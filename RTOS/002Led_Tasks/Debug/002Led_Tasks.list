
002Led_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d4c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08006edc  08006edc  00007edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800705c  0800705c  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800705c  0800705c  0000805c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007064  08007064  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007064  08007064  00008064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007068  08007068  00008068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800706c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000906c  2**0
                  CONTENTS
 10 .bss          00014558  2000006c  2000006c  0000906c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200145c4  200145c4  0000906c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000133bf  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d19  00000000  00000000  0001c45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001290  00000000  00000000  0001f178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e39  00000000  00000000  00020408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025799  00000000  00000000  00021241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001492d  00000000  00000000  000469da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea319  00000000  00000000  0005b307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145620  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054d0  00000000  00000000  00145664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000fd  00000000  00000000  0014ab34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ec4 	.word	0x08006ec4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006ec4 	.word	0x08006ec4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ea4 	.word	0x20012ea4
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	@ 0x28
 8000640:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fc49 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f871 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064a:	f000 f8d9 	bl	8000800 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT (cycle counter)
  DWT_CTRL |= (1 << 0);
 800064e:	4b30      	ldr	r3, [pc, #192]	@ (8000710 <main+0xd4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a2f      	ldr	r2, [pc, #188]	@ (8000710 <main+0xd4>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6013      	str	r3, [r2, #0]

  // Start SEGGER recording of FreeRTOS app
  SEGGER_SYSVIEW_Conf();
 800065a:	f003 fa7b 	bl	8003b54 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800065e:	f004 fdf1 	bl	8005244 <SEGGER_SYSVIEW_Start>

  // Tasks

  status = xTaskCreate(green_led_handler, "Green_Led_Task", 200, NULL, 2, &green_led_task_handle);
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	2302      	movs	r3, #2
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2300      	movs	r3, #0
 800066e:	22c8      	movs	r2, #200	@ 0xc8
 8000670:	4928      	ldr	r1, [pc, #160]	@ (8000714 <main+0xd8>)
 8000672:	4829      	ldr	r0, [pc, #164]	@ (8000718 <main+0xdc>)
 8000674:	f001 ff36 	bl	80024e4 <xTaskCreate>
 8000678:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d00b      	beq.n	8000698 <main+0x5c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000684:	f383 8811 	msr	BASEPRI, r3
 8000688:	f3bf 8f6f 	isb	sy
 800068c:	f3bf 8f4f 	dsb	sy
 8000690:	61bb      	str	r3, [r7, #24]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <main+0x58>

  status = xTaskCreate(red_led_handler, "Red_Led_Task", 200, NULL, 2, &red_led_task_handle);
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2302      	movs	r3, #2
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2300      	movs	r3, #0
 80006a4:	22c8      	movs	r2, #200	@ 0xc8
 80006a6:	491d      	ldr	r1, [pc, #116]	@ (800071c <main+0xe0>)
 80006a8:	481d      	ldr	r0, [pc, #116]	@ (8000720 <main+0xe4>)
 80006aa:	f001 ff1b 	bl	80024e4 <xTaskCreate>
 80006ae:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d00b      	beq.n	80006ce <main+0x92>
    __asm volatile
 80006b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006ba:	f383 8811 	msr	BASEPRI, r3
 80006be:	f3bf 8f6f 	isb	sy
 80006c2:	f3bf 8f4f 	dsb	sy
 80006c6:	617b      	str	r3, [r7, #20]
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	e7fd      	b.n	80006ca <main+0x8e>

  status = xTaskCreate(orange_led_handler, "Orange_Led_Task", 200, NULL, 2, &orange_led_task_handle);
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	2302      	movs	r3, #2
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2300      	movs	r3, #0
 80006d8:	22c8      	movs	r2, #200	@ 0xc8
 80006da:	4912      	ldr	r1, [pc, #72]	@ (8000724 <main+0xe8>)
 80006dc:	4812      	ldr	r0, [pc, #72]	@ (8000728 <main+0xec>)
 80006de:	f001 ff01 	bl	80024e4 <xTaskCreate>
 80006e2:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d00b      	beq.n	8000702 <main+0xc6>
    __asm volatile
 80006ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006ee:	f383 8811 	msr	BASEPRI, r3
 80006f2:	f3bf 8f6f 	isb	sy
 80006f6:	f3bf 8f4f 	dsb	sy
 80006fa:	613b      	str	r3, [r7, #16]
}
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	e7fd      	b.n	80006fe <main+0xc2>
  // If you are using an STM32 with the STM32 driver library then ensure all the priority bits are assigned
  // to be preempt priority bits by calling NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 ); before the RTOS is started.

  // Recommended to set all priority bits to preempt bits (no sub-priority bits) to prevent complications
  // w/ the configMAX_SYSCALL_INTERRUPT_PRIORITY setting and the priority assigned to individual peripheral interrupts.
  HAL_NVIC_SetPriorityGrouping( NVIC_PRIORITYGROUP_4 );
 8000702:	2003      	movs	r0, #3
 8000704:	f000 fcfb 	bl	80010fe <HAL_NVIC_SetPriorityGrouping>

  //start FreeRTOS scheduler
  vTaskStartScheduler();
 8000708:	f002 f8a4 	bl	8002854 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <main+0xd0>
 8000710:	e0001000 	.word	0xe0001000
 8000714:	08006edc 	.word	0x08006edc
 8000718:	08000abd 	.word	0x08000abd
 800071c:	08006eec 	.word	0x08006eec
 8000720:	08000b01 	.word	0x08000b01
 8000724:	08006efc 	.word	0x08006efc
 8000728:	08000b45 	.word	0x08000b45

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	@ 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	2230      	movs	r2, #48	@ 0x30
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f005 fd08 	bl	8006150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	4b28      	ldr	r3, [pc, #160]	@ (80007f8 <SystemClock_Config+0xcc>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000758:	4a27      	ldr	r2, [pc, #156]	@ (80007f8 <SystemClock_Config+0xcc>)
 800075a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800075e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000760:	4b25      	ldr	r3, [pc, #148]	@ (80007f8 <SystemClock_Config+0xcc>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	4b22      	ldr	r3, [pc, #136]	@ (80007fc <SystemClock_Config+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a21      	ldr	r2, [pc, #132]	@ (80007fc <SystemClock_Config+0xd0>)
 8000776:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <SystemClock_Config+0xd0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000788:	2302      	movs	r3, #2
 800078a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078c:	2301      	movs	r3, #1
 800078e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000790:	2310      	movs	r3, #16
 8000792:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000794:	2302      	movs	r3, #2
 8000796:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000798:	2300      	movs	r3, #0
 800079a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800079c:	2308      	movs	r3, #8
 800079e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80007a0:	2332      	movs	r3, #50	@ 0x32
 80007a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007a8:	2307      	movs	r3, #7
 80007aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 0320 	add.w	r3, r7, #32
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 fea9 	bl	8001508 <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007bc:	f000 f9f6 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c0:	230f      	movs	r3, #15
 80007c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2302      	movs	r3, #2
 80007c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007cc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 f90a 	bl	80019f8 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ea:	f000 f9df 	bl	8000bac <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	3750      	adds	r7, #80	@ 0x50
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	@ 0x30
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
 800081a:	4ba2      	ldr	r3, [pc, #648]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4aa1      	ldr	r2, [pc, #644]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000820:	f043 0310 	orr.w	r3, r3, #16
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b9f      	ldr	r3, [pc, #636]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0310 	and.w	r3, r3, #16
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	4b9b      	ldr	r3, [pc, #620]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a9a      	ldr	r2, [pc, #616]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b98      	ldr	r3, [pc, #608]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	4b94      	ldr	r3, [pc, #592]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a93      	ldr	r2, [pc, #588]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b91      	ldr	r3, [pc, #580]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b8d      	ldr	r3, [pc, #564]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a8c      	ldr	r2, [pc, #560]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b8a      	ldr	r3, [pc, #552]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b86      	ldr	r3, [pc, #536]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a85      	ldr	r2, [pc, #532]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b83      	ldr	r3, [pc, #524]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b7f      	ldr	r3, [pc, #508]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a7e      	ldr	r2, [pc, #504]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 80008ac:	f043 0308 	orr.w	r3, r3, #8
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b7c      	ldr	r3, [pc, #496]	@ (8000aa4 <MX_GPIO_Init+0x2a4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0308 	and.w	r3, r3, #8
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2108      	movs	r1, #8
 80008c2:	4879      	ldr	r0, [pc, #484]	@ (8000aa8 <MX_GPIO_Init+0x2a8>)
 80008c4:	f000 fdec 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2101      	movs	r1, #1
 80008cc:	4877      	ldr	r0, [pc, #476]	@ (8000aac <MX_GPIO_Init+0x2ac>)
 80008ce:	f000 fde7 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008d2:	2200      	movs	r2, #0
 80008d4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008d8:	4875      	ldr	r0, [pc, #468]	@ (8000ab0 <MX_GPIO_Init+0x2b0>)
 80008da:	f000 fde1 	bl	80014a0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008de:	2308      	movs	r3, #8
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	486c      	ldr	r0, [pc, #432]	@ (8000aa8 <MX_GPIO_Init+0x2a8>)
 80008f6:	f000 fc37 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	4866      	ldr	r0, [pc, #408]	@ (8000aac <MX_GPIO_Init+0x2ac>)
 8000912:	f000 fc29 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000916:	2308      	movs	r3, #8
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000926:	2305      	movs	r3, #5
 8000928:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	485e      	ldr	r0, [pc, #376]	@ (8000aac <MX_GPIO_Init+0x2ac>)
 8000932:	f000 fc19 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000936:	2301      	movs	r3, #1
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	485a      	ldr	r0, [pc, #360]	@ (8000ab4 <MX_GPIO_Init+0x2b4>)
 800094c:	f000 fc0c 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000950:	2310      	movs	r3, #16
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000960:	2306      	movs	r3, #6
 8000962:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4852      	ldr	r0, [pc, #328]	@ (8000ab4 <MX_GPIO_Init+0x2b4>)
 800096c:	f000 fbfc 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000970:	23e0      	movs	r3, #224	@ 0xe0
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000980:	2305      	movs	r3, #5
 8000982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	484a      	ldr	r0, [pc, #296]	@ (8000ab4 <MX_GPIO_Init+0x2b4>)
 800098c:	f000 fbec 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000990:	2304      	movs	r3, #4
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4845      	ldr	r0, [pc, #276]	@ (8000ab8 <MX_GPIO_Init+0x2b8>)
 80009a4:	f000 fbe0 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ba:	2305      	movs	r3, #5
 80009bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	483c      	ldr	r0, [pc, #240]	@ (8000ab8 <MX_GPIO_Init+0x2b8>)
 80009c6:	f000 fbcf 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ca:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80009ce:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4833      	ldr	r0, [pc, #204]	@ (8000ab0 <MX_GPIO_Init+0x2b0>)
 80009e4:	f000 fbc0 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009e8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009fa:	2306      	movs	r3, #6
 80009fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4829      	ldr	r0, [pc, #164]	@ (8000aac <MX_GPIO_Init+0x2ac>)
 8000a06:	f000 fbaf 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4825      	ldr	r0, [pc, #148]	@ (8000ab4 <MX_GPIO_Init+0x2b4>)
 8000a20:	f000 fba2 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a24:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a36:	230a      	movs	r3, #10
 8000a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	481c      	ldr	r0, [pc, #112]	@ (8000ab4 <MX_GPIO_Init+0x2b4>)
 8000a42:	f000 fb91 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a46:	2320      	movs	r3, #32
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4815      	ldr	r0, [pc, #84]	@ (8000ab0 <MX_GPIO_Init+0x2b0>)
 8000a5a:	f000 fb85 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a5e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a64:	2312      	movs	r3, #18
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a70:	2304      	movs	r3, #4
 8000a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480f      	ldr	r0, [pc, #60]	@ (8000ab8 <MX_GPIO_Init+0x2b8>)
 8000a7c:	f000 fb74 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a84:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <MX_GPIO_Init+0x2a8>)
 8000a96:	f000 fb67 	bl	8001168 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3730      	adds	r7, #48	@ 0x30
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40020800 	.word	0x40020800
 8000ab0:	40020c00 	.word	0x40020c00
 8000ab4:	40020000 	.word	0x40020000
 8000ab8:	40020400 	.word	0x40020400

08000abc <green_led_handler>:

/* USER CODE BEGIN 4 */
static void green_led_handler(void* parameters)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b09c      	sub	sp, #112	@ 0x70
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	char msg[100];

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000ac4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ac8:	480b      	ldr	r0, [pc, #44]	@ (8000af8 <green_led_handler+0x3c>)
 8000aca:	f000 fd02 	bl	80014d2 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000ace:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ad2:	f000 fa43 	bl	8000f5c <HAL_Delay>
		printf("%s\n", (char*)parameters);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f005 fb22 	bl	8006120 <puts>

		snprintf(msg,100,"%s\n", (char*)parameters);
 8000adc:	f107 000c 	add.w	r0, r7, #12
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a06      	ldr	r2, [pc, #24]	@ (8000afc <green_led_handler+0x40>)
 8000ae4:	2164      	movs	r1, #100	@ 0x64
 8000ae6:	f005 f9cd 	bl	8005e84 <sniprintf>

		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	4618      	mov	r0, r3
 8000af0:	f005 f946 	bl	8005d80 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000af4:	bf00      	nop
 8000af6:	e7e5      	b.n	8000ac4 <green_led_handler+0x8>
 8000af8:	40020c00 	.word	0x40020c00
 8000afc:	08006f0c 	.word	0x08006f0c

08000b00 <red_led_handler>:
	}
}

static void red_led_handler(void* parameters)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b09c      	sub	sp, #112	@ 0x70
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	char msg[100];

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b08:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b0c:	480b      	ldr	r0, [pc, #44]	@ (8000b3c <red_led_handler+0x3c>)
 8000b0e:	f000 fce0 	bl	80014d2 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 8000b12:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000b16:	f000 fa21 	bl	8000f5c <HAL_Delay>
		printf("%s\n", (char*)parameters);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f005 fb00 	bl	8006120 <puts>

		snprintf(msg,100,"%s\n", (char*)parameters);
 8000b20:	f107 000c 	add.w	r0, r7, #12
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a06      	ldr	r2, [pc, #24]	@ (8000b40 <red_led_handler+0x40>)
 8000b28:	2164      	movs	r1, #100	@ 0x64
 8000b2a:	f005 f9ab 	bl	8005e84 <sniprintf>

		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	4618      	mov	r0, r3
 8000b34:	f005 f924 	bl	8005d80 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000b38:	bf00      	nop
 8000b3a:	e7e5      	b.n	8000b08 <red_led_handler+0x8>
 8000b3c:	40020c00 	.word	0x40020c00
 8000b40:	08006f0c 	.word	0x08006f0c

08000b44 <orange_led_handler>:
	}
}

static void orange_led_handler(void* parameters)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b09c      	sub	sp, #112	@ 0x70
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	char msg[100];

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000b4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b50:	480b      	ldr	r0, [pc, #44]	@ (8000b80 <orange_led_handler+0x3c>)
 8000b52:	f000 fcbe 	bl	80014d2 <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 8000b56:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000b5a:	f000 f9ff 	bl	8000f5c <HAL_Delay>
		printf("%s\n", (char*)parameters);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f005 fade 	bl	8006120 <puts>

		snprintf(msg,100,"%s\n", (char*)parameters);
 8000b64:	f107 000c 	add.w	r0, r7, #12
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a06      	ldr	r2, [pc, #24]	@ (8000b84 <orange_led_handler+0x40>)
 8000b6c:	2164      	movs	r1, #100	@ 0x64
 8000b6e:	f005 f989 	bl	8005e84 <sniprintf>

		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	4618      	mov	r0, r3
 8000b78:	f005 f902 	bl	8005d80 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000b7c:	bf00      	nop
 8000b7e:	e7e5      	b.n	8000b4c <orange_led_handler+0x8>
 8000b80:	40020c00 	.word	0x40020c00
 8000b84:	08006f0c 	.word	0x08006f0c

08000b88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a04      	ldr	r2, [pc, #16]	@ (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d101      	bne.n	8000b9e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000b9a:	f000 f9bf 	bl	8000f1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40001000 	.word	0x40001000

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <Error_Handler+0x8>

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <HAL_MspInit+0x50>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc6:	4a10      	ldr	r2, [pc, #64]	@ (8000c08 <HAL_MspInit+0x50>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bce:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <HAL_MspInit+0x50>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <HAL_MspInit+0x50>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be2:	4a09      	ldr	r2, [pc, #36]	@ (8000c08 <HAL_MspInit+0x50>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bea:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <HAL_MspInit+0x50>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf6:	2003      	movs	r0, #3
 8000bf8:	f000 fa81 	bl	80010fe <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000bfc:	f002 fb72 	bl	80032e4 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40023800 	.word	0x40023800

08000c0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08e      	sub	sp, #56	@ 0x38
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	4b33      	ldr	r3, [pc, #204]	@ (8000cf0 <HAL_InitTick+0xe4>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c24:	4a32      	ldr	r2, [pc, #200]	@ (8000cf0 <HAL_InitTick+0xe4>)
 8000c26:	f043 0310 	orr.w	r3, r3, #16
 8000c2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c2c:	4b30      	ldr	r3, [pc, #192]	@ (8000cf0 <HAL_InitTick+0xe4>)
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c30:	f003 0310 	and.w	r3, r3, #16
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c38:	f107 0210 	add.w	r2, r7, #16
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4611      	mov	r1, r2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 f8e4 	bl	8001e10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c48:	6a3b      	ldr	r3, [r7, #32]
 8000c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d103      	bne.n	8000c5a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c52:	f001 f8c9 	bl	8001de8 <HAL_RCC_GetPCLK1Freq>
 8000c56:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c58:	e004      	b.n	8000c64 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c5a:	f001 f8c5 	bl	8001de8 <HAL_RCC_GetPCLK1Freq>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c66:	4a23      	ldr	r2, [pc, #140]	@ (8000cf4 <HAL_InitTick+0xe8>)
 8000c68:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6c:	0c9b      	lsrs	r3, r3, #18
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c72:	4b21      	ldr	r3, [pc, #132]	@ (8000cf8 <HAL_InitTick+0xec>)
 8000c74:	4a21      	ldr	r2, [pc, #132]	@ (8000cfc <HAL_InitTick+0xf0>)
 8000c76:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c78:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf8 <HAL_InitTick+0xec>)
 8000c7a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c7e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c80:	4a1d      	ldr	r2, [pc, #116]	@ (8000cf8 <HAL_InitTick+0xec>)
 8000c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c84:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c86:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <HAL_InitTick+0xec>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf8 <HAL_InitTick+0xec>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c92:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <HAL_InitTick+0xec>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c98:	4817      	ldr	r0, [pc, #92]	@ (8000cf8 <HAL_InitTick+0xec>)
 8000c9a:	f001 f8eb 	bl	8001e74 <HAL_TIM_Base_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ca4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d11b      	bne.n	8000ce4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cac:	4812      	ldr	r0, [pc, #72]	@ (8000cf8 <HAL_InitTick+0xec>)
 8000cae:	f001 f93b 	bl	8001f28 <HAL_TIM_Base_Start_IT>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000cb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d111      	bne.n	8000ce4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc0:	2036      	movs	r0, #54	@ 0x36
 8000cc2:	f000 fa43 	bl	800114c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b0f      	cmp	r3, #15
 8000cca:	d808      	bhi.n	8000cde <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	2036      	movs	r0, #54	@ 0x36
 8000cd2:	f000 fa1f 	bl	8001114 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <HAL_InitTick+0xf4>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6013      	str	r3, [r2, #0]
 8000cdc:	e002      	b.n	8000ce4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ce4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3738      	adds	r7, #56	@ 0x38
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	431bde83 	.word	0x431bde83
 8000cf8:	20000088 	.word	0x20000088
 8000cfc:	40001000 	.word	0x40001000
 8000d00:	20000004 	.word	0x20000004

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <NMI_Handler+0x4>

08000d0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d40:	4802      	ldr	r0, [pc, #8]	@ (8000d4c <TIM6_DAC_IRQHandler+0x10>)
 8000d42:	f001 f961 	bl	8002008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000088 	.word	0x20000088

08000d50 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	e00a      	b.n	8000d78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d62:	f3af 8000 	nop.w
 8000d66:	4601      	mov	r1, r0
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	1c5a      	adds	r2, r3, #1
 8000d6c:	60ba      	str	r2, [r7, #8]
 8000d6e:	b2ca      	uxtb	r2, r1
 8000d70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	dbf0      	blt.n	8000d62 <_read+0x12>
  }

  return len;
 8000d80:	687b      	ldr	r3, [r7, #4]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
 8000daa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000db2:	605a      	str	r2, [r3, #4]
  return 0;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <_isatty>:

int _isatty(int file)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dfc:	4a14      	ldr	r2, [pc, #80]	@ (8000e50 <_sbrk+0x5c>)
 8000dfe:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <_sbrk+0x60>)
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e08:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e10:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <_sbrk+0x64>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	@ (8000e5c <_sbrk+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e16:	4b10      	ldr	r3, [pc, #64]	@ (8000e58 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d207      	bcs.n	8000e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e24:	f005 f99c 	bl	8006160 <__errno>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e32:	e009      	b.n	8000e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e34:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <_sbrk+0x64>)
 8000e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20020000 	.word	0x20020000
 8000e54:	00000400 	.word	0x00000400
 8000e58:	200000d0 	.word	0x200000d0
 8000e5c:	200145c8 	.word	0x200145c8

08000e60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e64:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <SystemInit+0x20>)
 8000e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e6a:	4a05      	ldr	r2, [pc, #20]	@ (8000e80 <SystemInit+0x20>)
 8000e6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ebc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e88:	f7ff ffea 	bl	8000e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e8c:	480c      	ldr	r0, [pc, #48]	@ (8000ec0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e8e:	490d      	ldr	r1, [pc, #52]	@ (8000ec4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e90:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f005 f95b 	bl	800616c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb6:	f7ff fbc1 	bl	800063c <main>
  bx  lr    
 8000eba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ebc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ec8:	0800706c 	.word	0x0800706c
  ldr r2, =_sbss
 8000ecc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ed0:	200145c4 	.word	0x200145c4

08000ed4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000edc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f18 <HAL_Init+0x40>)
 8000ee2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0a      	ldr	r2, [pc, #40]	@ (8000f18 <HAL_Init+0x40>)
 8000eee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef4:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	@ (8000f18 <HAL_Init+0x40>)
 8000efa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f00:	2003      	movs	r0, #3
 8000f02:	f000 f8fc 	bl	80010fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff fe80 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f0c:	f7ff fe54 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023c00 	.word	0x40023c00

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	@ (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	200000d4 	.word	0x200000d4

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	@ (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	200000d4 	.word	0x200000d4

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff ffee 	bl	8000f44 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffde 	bl	8000f44 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	@ (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db0b      	blt.n	8001032 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	f003 021f 	and.w	r2, r3, #31
 8001020:	4907      	ldr	r1, [pc, #28]	@ (8001040 <__NVIC_EnableIRQ+0x38>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	095b      	lsrs	r3, r3, #5
 8001028:	2001      	movs	r0, #1
 800102a:	fa00 f202 	lsl.w	r2, r0, r2
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db0a      	blt.n	800106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	490c      	ldr	r1, [pc, #48]	@ (8001090 <__NVIC_SetPriority+0x4c>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106c:	e00a      	b.n	8001084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4908      	ldr	r1, [pc, #32]	@ (8001094 <__NVIC_SetPriority+0x50>)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	3b04      	subs	r3, #4
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	440b      	add	r3, r1
 8001082:	761a      	strb	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	@ 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43da      	mvns	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	401a      	ands	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	4313      	orrs	r3, r2
         );
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3724      	adds	r7, #36	@ 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff4c 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001126:	f7ff ff61 	bl	8000fec <__NVIC_GetPriorityGrouping>
 800112a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	68b9      	ldr	r1, [r7, #8]
 8001130:	6978      	ldr	r0, [r7, #20]
 8001132:	f7ff ffb1 	bl	8001098 <NVIC_EncodePriority>
 8001136:	4602      	mov	r2, r0
 8001138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113c:	4611      	mov	r1, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff80 	bl	8001044 <__NVIC_SetPriority>
}
 8001144:	bf00      	nop
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff54 	bl	8001008 <__NVIC_EnableIRQ>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	@ 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	e16b      	b.n	800145c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001184:	2201      	movs	r2, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	429a      	cmp	r2, r3
 800119e:	f040 815a 	bne.w	8001456 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d005      	beq.n	80011ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d130      	bne.n	800121c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	f003 0201 	and.w	r2, r3, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b03      	cmp	r3, #3
 8001226:	d017      	beq.n	8001258 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d123      	bne.n	80012ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	08da      	lsrs	r2, r3, #3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3208      	adds	r2, #8
 800126c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	220f      	movs	r2, #15
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	691a      	ldr	r2, [r3, #16]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	08da      	lsrs	r2, r3, #3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3208      	adds	r2, #8
 80012a6:	69b9      	ldr	r1, [r7, #24]
 80012a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0203 	and.w	r2, r3, #3
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80b4 	beq.w	8001456 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b60      	ldr	r3, [pc, #384]	@ (8001474 <HAL_GPIO_Init+0x30c>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f6:	4a5f      	ldr	r2, [pc, #380]	@ (8001474 <HAL_GPIO_Init+0x30c>)
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001474 <HAL_GPIO_Init+0x30c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130a:	4a5b      	ldr	r2, [pc, #364]	@ (8001478 <HAL_GPIO_Init+0x310>)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	3302      	adds	r3, #2
 8001312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	220f      	movs	r2, #15
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a52      	ldr	r2, [pc, #328]	@ (800147c <HAL_GPIO_Init+0x314>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d02b      	beq.n	800138e <HAL_GPIO_Init+0x226>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a51      	ldr	r2, [pc, #324]	@ (8001480 <HAL_GPIO_Init+0x318>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d025      	beq.n	800138a <HAL_GPIO_Init+0x222>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a50      	ldr	r2, [pc, #320]	@ (8001484 <HAL_GPIO_Init+0x31c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d01f      	beq.n	8001386 <HAL_GPIO_Init+0x21e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4f      	ldr	r2, [pc, #316]	@ (8001488 <HAL_GPIO_Init+0x320>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d019      	beq.n	8001382 <HAL_GPIO_Init+0x21a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4e      	ldr	r2, [pc, #312]	@ (800148c <HAL_GPIO_Init+0x324>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d013      	beq.n	800137e <HAL_GPIO_Init+0x216>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4d      	ldr	r2, [pc, #308]	@ (8001490 <HAL_GPIO_Init+0x328>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d00d      	beq.n	800137a <HAL_GPIO_Init+0x212>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4c      	ldr	r2, [pc, #304]	@ (8001494 <HAL_GPIO_Init+0x32c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d007      	beq.n	8001376 <HAL_GPIO_Init+0x20e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4b      	ldr	r2, [pc, #300]	@ (8001498 <HAL_GPIO_Init+0x330>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d101      	bne.n	8001372 <HAL_GPIO_Init+0x20a>
 800136e:	2307      	movs	r3, #7
 8001370:	e00e      	b.n	8001390 <HAL_GPIO_Init+0x228>
 8001372:	2308      	movs	r3, #8
 8001374:	e00c      	b.n	8001390 <HAL_GPIO_Init+0x228>
 8001376:	2306      	movs	r3, #6
 8001378:	e00a      	b.n	8001390 <HAL_GPIO_Init+0x228>
 800137a:	2305      	movs	r3, #5
 800137c:	e008      	b.n	8001390 <HAL_GPIO_Init+0x228>
 800137e:	2304      	movs	r3, #4
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x228>
 8001382:	2303      	movs	r3, #3
 8001384:	e004      	b.n	8001390 <HAL_GPIO_Init+0x228>
 8001386:	2302      	movs	r3, #2
 8001388:	e002      	b.n	8001390 <HAL_GPIO_Init+0x228>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_GPIO_Init+0x228>
 800138e:	2300      	movs	r3, #0
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	f002 0203 	and.w	r2, r2, #3
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	4093      	lsls	r3, r2
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a0:	4935      	ldr	r1, [pc, #212]	@ (8001478 <HAL_GPIO_Init+0x310>)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	3302      	adds	r3, #2
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ae:	4b3b      	ldr	r3, [pc, #236]	@ (800149c <HAL_GPIO_Init+0x334>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d2:	4a32      	ldr	r2, [pc, #200]	@ (800149c <HAL_GPIO_Init+0x334>)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d8:	4b30      	ldr	r3, [pc, #192]	@ (800149c <HAL_GPIO_Init+0x334>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013fc:	4a27      	ldr	r2, [pc, #156]	@ (800149c <HAL_GPIO_Init+0x334>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001402:	4b26      	ldr	r3, [pc, #152]	@ (800149c <HAL_GPIO_Init+0x334>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001426:	4a1d      	ldr	r2, [pc, #116]	@ (800149c <HAL_GPIO_Init+0x334>)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800142c:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <HAL_GPIO_Init+0x334>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001450:	4a12      	ldr	r2, [pc, #72]	@ (800149c <HAL_GPIO_Init+0x334>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3301      	adds	r3, #1
 800145a:	61fb      	str	r3, [r7, #28]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	2b0f      	cmp	r3, #15
 8001460:	f67f ae90 	bls.w	8001184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3724      	adds	r7, #36	@ 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40013800 	.word	0x40013800
 800147c:	40020000 	.word	0x40020000
 8001480:	40020400 	.word	0x40020400
 8001484:	40020800 	.word	0x40020800
 8001488:	40020c00 	.word	0x40020c00
 800148c:	40021000 	.word	0x40021000
 8001490:	40021400 	.word	0x40021400
 8001494:	40021800 	.word	0x40021800
 8001498:	40021c00 	.word	0x40021c00
 800149c:	40013c00 	.word	0x40013c00

080014a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	807b      	strh	r3, [r7, #2]
 80014ac:	4613      	mov	r3, r2
 80014ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b0:	787b      	ldrb	r3, [r7, #1]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014b6:	887a      	ldrh	r2, [r7, #2]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014bc:	e003      	b.n	80014c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014be:	887b      	ldrh	r3, [r7, #2]
 80014c0:	041a      	lsls	r2, r3, #16
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	619a      	str	r2, [r3, #24]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b085      	sub	sp, #20
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	460b      	mov	r3, r1
 80014dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014e4:	887a      	ldrh	r2, [r7, #2]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4013      	ands	r3, r2
 80014ea:	041a      	lsls	r2, r3, #16
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	43d9      	mvns	r1, r3
 80014f0:	887b      	ldrh	r3, [r7, #2]
 80014f2:	400b      	ands	r3, r1
 80014f4:	431a      	orrs	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	619a      	str	r2, [r3, #24]
}
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e267      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d075      	beq.n	8001612 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001526:	4b88      	ldr	r3, [pc, #544]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	2b04      	cmp	r3, #4
 8001530:	d00c      	beq.n	800154c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001532:	4b85      	ldr	r3, [pc, #532]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800153a:	2b08      	cmp	r3, #8
 800153c:	d112      	bne.n	8001564 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800153e:	4b82      	ldr	r3, [pc, #520]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001546:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800154a:	d10b      	bne.n	8001564 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154c:	4b7e      	ldr	r3, [pc, #504]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d05b      	beq.n	8001610 <HAL_RCC_OscConfig+0x108>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d157      	bne.n	8001610 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e242      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800156c:	d106      	bne.n	800157c <HAL_RCC_OscConfig+0x74>
 800156e:	4b76      	ldr	r3, [pc, #472]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a75      	ldr	r2, [pc, #468]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 8001574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e01d      	b.n	80015b8 <HAL_RCC_OscConfig+0xb0>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x98>
 8001586:	4b70      	ldr	r3, [pc, #448]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a6f      	ldr	r2, [pc, #444]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 800158c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b6d      	ldr	r3, [pc, #436]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a6c      	ldr	r2, [pc, #432]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 8001598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e00b      	b.n	80015b8 <HAL_RCC_OscConfig+0xb0>
 80015a0:	4b69      	ldr	r3, [pc, #420]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a68      	ldr	r2, [pc, #416]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 80015a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b66      	ldr	r3, [pc, #408]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a65      	ldr	r2, [pc, #404]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 80015b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d013      	beq.n	80015e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fcc0 	bl	8000f44 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c8:	f7ff fcbc 	bl	8000f44 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b64      	cmp	r3, #100	@ 0x64
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e207      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	4b5b      	ldr	r3, [pc, #364]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f0      	beq.n	80015c8 <HAL_RCC_OscConfig+0xc0>
 80015e6:	e014      	b.n	8001612 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fcac 	bl	8000f44 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff fca8 	bl	8000f44 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	@ 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e1f3      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001602:	4b51      	ldr	r3, [pc, #324]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0xe8>
 800160e:	e000      	b.n	8001612 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d063      	beq.n	80016e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800161e:	4b4a      	ldr	r3, [pc, #296]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00b      	beq.n	8001642 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800162a:	4b47      	ldr	r3, [pc, #284]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001632:	2b08      	cmp	r3, #8
 8001634:	d11c      	bne.n	8001670 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001636:	4b44      	ldr	r3, [pc, #272]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d116      	bne.n	8001670 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001642:	4b41      	ldr	r3, [pc, #260]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d005      	beq.n	800165a <HAL_RCC_OscConfig+0x152>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d001      	beq.n	800165a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e1c7      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165a:	4b3b      	ldr	r3, [pc, #236]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4937      	ldr	r1, [pc, #220]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 800166a:	4313      	orrs	r3, r2
 800166c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166e:	e03a      	b.n	80016e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d020      	beq.n	80016ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001678:	4b34      	ldr	r3, [pc, #208]	@ (800174c <HAL_RCC_OscConfig+0x244>)
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167e:	f7ff fc61 	bl	8000f44 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001686:	f7ff fc5d 	bl	8000f44 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e1a8      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001698:	4b2b      	ldr	r3, [pc, #172]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a4:	4b28      	ldr	r3, [pc, #160]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4925      	ldr	r1, [pc, #148]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	600b      	str	r3, [r1, #0]
 80016b8:	e015      	b.n	80016e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ba:	4b24      	ldr	r3, [pc, #144]	@ (800174c <HAL_RCC_OscConfig+0x244>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff fc40 	bl	8000f44 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c8:	f7ff fc3c 	bl	8000f44 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e187      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016da:	4b1b      	ldr	r3, [pc, #108]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d036      	beq.n	8001760 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d016      	beq.n	8001728 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <HAL_RCC_OscConfig+0x248>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001700:	f7ff fc20 	bl	8000f44 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001708:	f7ff fc1c 	bl	8000f44 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e167      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171a:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <HAL_RCC_OscConfig+0x240>)
 800171c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x200>
 8001726:	e01b      	b.n	8001760 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001728:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <HAL_RCC_OscConfig+0x248>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172e:	f7ff fc09 	bl	8000f44 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001734:	e00e      	b.n	8001754 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001736:	f7ff fc05 	bl	8000f44 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d907      	bls.n	8001754 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e150      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
 8001748:	40023800 	.word	0x40023800
 800174c:	42470000 	.word	0x42470000
 8001750:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001754:	4b88      	ldr	r3, [pc, #544]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 8001756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1ea      	bne.n	8001736 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 8097 	beq.w	800189c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001772:	4b81      	ldr	r3, [pc, #516]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10f      	bne.n	800179e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	4b7d      	ldr	r3, [pc, #500]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	4a7c      	ldr	r2, [pc, #496]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800178c:	6413      	str	r3, [r2, #64]	@ 0x40
 800178e:	4b7a      	ldr	r3, [pc, #488]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800179a:	2301      	movs	r3, #1
 800179c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179e:	4b77      	ldr	r3, [pc, #476]	@ (800197c <HAL_RCC_OscConfig+0x474>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d118      	bne.n	80017dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017aa:	4b74      	ldr	r3, [pc, #464]	@ (800197c <HAL_RCC_OscConfig+0x474>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a73      	ldr	r2, [pc, #460]	@ (800197c <HAL_RCC_OscConfig+0x474>)
 80017b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b6:	f7ff fbc5 	bl	8000f44 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017be:	f7ff fbc1 	bl	8000f44 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e10c      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d0:	4b6a      	ldr	r3, [pc, #424]	@ (800197c <HAL_RCC_OscConfig+0x474>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d106      	bne.n	80017f2 <HAL_RCC_OscConfig+0x2ea>
 80017e4:	4b64      	ldr	r3, [pc, #400]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e8:	4a63      	ldr	r2, [pc, #396]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80017f0:	e01c      	b.n	800182c <HAL_RCC_OscConfig+0x324>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2b05      	cmp	r3, #5
 80017f8:	d10c      	bne.n	8001814 <HAL_RCC_OscConfig+0x30c>
 80017fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 80017fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017fe:	4a5e      	ldr	r2, [pc, #376]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6713      	str	r3, [r2, #112]	@ 0x70
 8001806:	4b5c      	ldr	r3, [pc, #368]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 8001808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800180a:	4a5b      	ldr	r2, [pc, #364]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6713      	str	r3, [r2, #112]	@ 0x70
 8001812:	e00b      	b.n	800182c <HAL_RCC_OscConfig+0x324>
 8001814:	4b58      	ldr	r3, [pc, #352]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 8001816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001818:	4a57      	ldr	r2, [pc, #348]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001820:	4b55      	ldr	r3, [pc, #340]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 8001822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001824:	4a54      	ldr	r2, [pc, #336]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 8001826:	f023 0304 	bic.w	r3, r3, #4
 800182a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d015      	beq.n	8001860 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001834:	f7ff fb86 	bl	8000f44 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183a:	e00a      	b.n	8001852 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183c:	f7ff fb82 	bl	8000f44 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e0cb      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001852:	4b49      	ldr	r3, [pc, #292]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 8001854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0ee      	beq.n	800183c <HAL_RCC_OscConfig+0x334>
 800185e:	e014      	b.n	800188a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001860:	f7ff fb70 	bl	8000f44 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001866:	e00a      	b.n	800187e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001868:	f7ff fb6c 	bl	8000f44 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e0b5      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187e:	4b3e      	ldr	r3, [pc, #248]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 8001880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1ee      	bne.n	8001868 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800188a:	7dfb      	ldrb	r3, [r7, #23]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d105      	bne.n	800189c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001890:	4b39      	ldr	r3, [pc, #228]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001894:	4a38      	ldr	r2, [pc, #224]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 8001896:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800189a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80a1 	beq.w	80019e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018a6:	4b34      	ldr	r3, [pc, #208]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d05c      	beq.n	800196c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d141      	bne.n	800193e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ba:	4b31      	ldr	r3, [pc, #196]	@ (8001980 <HAL_RCC_OscConfig+0x478>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7ff fb40 	bl	8000f44 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c8:	f7ff fb3c 	bl	8000f44 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e087      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018da:	4b27      	ldr	r3, [pc, #156]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69da      	ldr	r2, [r3, #28]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f4:	019b      	lsls	r3, r3, #6
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fc:	085b      	lsrs	r3, r3, #1
 80018fe:	3b01      	subs	r3, #1
 8001900:	041b      	lsls	r3, r3, #16
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001908:	061b      	lsls	r3, r3, #24
 800190a:	491b      	ldr	r1, [pc, #108]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 800190c:	4313      	orrs	r3, r2
 800190e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001910:	4b1b      	ldr	r3, [pc, #108]	@ (8001980 <HAL_RCC_OscConfig+0x478>)
 8001912:	2201      	movs	r2, #1
 8001914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001916:	f7ff fb15 	bl	8000f44 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191e:	f7ff fb11 	bl	8000f44 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e05c      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001930:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x416>
 800193c:	e054      	b.n	80019e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193e:	4b10      	ldr	r3, [pc, #64]	@ (8001980 <HAL_RCC_OscConfig+0x478>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fafe 	bl	8000f44 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff fafa 	bl	8000f44 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e045      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195e:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <HAL_RCC_OscConfig+0x470>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x444>
 800196a:	e03d      	b.n	80019e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d107      	bne.n	8001984 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e038      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
 8001978:	40023800 	.word	0x40023800
 800197c:	40007000 	.word	0x40007000
 8001980:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001984:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <HAL_RCC_OscConfig+0x4ec>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d028      	beq.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800199c:	429a      	cmp	r2, r3
 800199e:	d121      	bne.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d11a      	bne.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019b4:	4013      	ands	r3, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019bc:	4293      	cmp	r3, r2
 80019be:	d111      	bne.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ca:	085b      	lsrs	r3, r3, #1
 80019cc:	3b01      	subs	r3, #1
 80019ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d107      	bne.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800

080019f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0cc      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b68      	ldr	r3, [pc, #416]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d90c      	bls.n	8001a34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	4b65      	ldr	r3, [pc, #404]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a22:	4b63      	ldr	r3, [pc, #396]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0b8      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d020      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a4c:	4b59      	ldr	r3, [pc, #356]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	4a58      	ldr	r2, [pc, #352]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a64:	4b53      	ldr	r3, [pc, #332]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4a52      	ldr	r2, [pc, #328]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a70:	4b50      	ldr	r3, [pc, #320]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	494d      	ldr	r1, [pc, #308]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d044      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d107      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a96:	4b47      	ldr	r3, [pc, #284]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d119      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e07f      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d003      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab6:	4b3f      	ldr	r3, [pc, #252]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d109      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e06f      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e067      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad6:	4b37      	ldr	r3, [pc, #220]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f023 0203 	bic.w	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	4934      	ldr	r1, [pc, #208]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae8:	f7ff fa2c 	bl	8000f44 <HAL_GetTick>
 8001aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	e00a      	b.n	8001b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af0:	f7ff fa28 	bl	8000f44 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e04f      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 020c 	and.w	r2, r3, #12
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d1eb      	bne.n	8001af0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b18:	4b25      	ldr	r3, [pc, #148]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d20c      	bcs.n	8001b40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4b22      	ldr	r3, [pc, #136]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b20      	ldr	r3, [pc, #128]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e032      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b4c:	4b19      	ldr	r3, [pc, #100]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4916      	ldr	r1, [pc, #88]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d009      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b6a:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	490e      	ldr	r1, [pc, #56]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b7e:	f000 f821 	bl	8001bc4 <HAL_RCC_GetSysClockFreq>
 8001b82:	4602      	mov	r2, r0
 8001b84:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	490a      	ldr	r1, [pc, #40]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b90:	5ccb      	ldrb	r3, [r1, r3]
 8001b92:	fa22 f303 	lsr.w	r3, r2, r3
 8001b96:	4a09      	ldr	r2, [pc, #36]	@ (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b9a:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f834 	bl	8000c0c <HAL_InitTick>

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023c00 	.word	0x40023c00
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	08006fd4 	.word	0x08006fd4
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	20000004 	.word	0x20000004

08001bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bc8:	b094      	sub	sp, #80	@ 0x50
 8001bca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bdc:	4b79      	ldr	r3, [pc, #484]	@ (8001dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d00d      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0x40>
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	f200 80e1 	bhi.w	8001db0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d003      	beq.n	8001bfe <HAL_RCC_GetSysClockFreq+0x3a>
 8001bf6:	e0db      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bf8:	4b73      	ldr	r3, [pc, #460]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bfc:	e0db      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bfe:	4b73      	ldr	r3, [pc, #460]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x208>)
 8001c00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c02:	e0d8      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c04:	4b6f      	ldr	r3, [pc, #444]	@ (8001dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c0c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c0e:	4b6d      	ldr	r3, [pc, #436]	@ (8001dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d063      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c1a:	4b6a      	ldr	r3, [pc, #424]	@ (8001dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	099b      	lsrs	r3, r3, #6
 8001c20:	2200      	movs	r2, #0
 8001c22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c2e:	2300      	movs	r3, #0
 8001c30:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c36:	4622      	mov	r2, r4
 8001c38:	462b      	mov	r3, r5
 8001c3a:	f04f 0000 	mov.w	r0, #0
 8001c3e:	f04f 0100 	mov.w	r1, #0
 8001c42:	0159      	lsls	r1, r3, #5
 8001c44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c48:	0150      	lsls	r0, r2, #5
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4621      	mov	r1, r4
 8001c50:	1a51      	subs	r1, r2, r1
 8001c52:	6139      	str	r1, [r7, #16]
 8001c54:	4629      	mov	r1, r5
 8001c56:	eb63 0301 	sbc.w	r3, r3, r1
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c68:	4659      	mov	r1, fp
 8001c6a:	018b      	lsls	r3, r1, #6
 8001c6c:	4651      	mov	r1, sl
 8001c6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c72:	4651      	mov	r1, sl
 8001c74:	018a      	lsls	r2, r1, #6
 8001c76:	4651      	mov	r1, sl
 8001c78:	ebb2 0801 	subs.w	r8, r2, r1
 8001c7c:	4659      	mov	r1, fp
 8001c7e:	eb63 0901 	sbc.w	r9, r3, r1
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c96:	4690      	mov	r8, r2
 8001c98:	4699      	mov	r9, r3
 8001c9a:	4623      	mov	r3, r4
 8001c9c:	eb18 0303 	adds.w	r3, r8, r3
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	462b      	mov	r3, r5
 8001ca4:	eb49 0303 	adc.w	r3, r9, r3
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	024b      	lsls	r3, r1, #9
 8001cba:	4621      	mov	r1, r4
 8001cbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	024a      	lsls	r2, r1, #9
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cca:	2200      	movs	r2, #0
 8001ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001cd4:	f7fe fb1c 	bl	8000310 <__aeabi_uldivmod>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4613      	mov	r3, r2
 8001cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ce0:	e058      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce2:	4b38      	ldr	r3, [pc, #224]	@ (8001dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	099b      	lsrs	r3, r3, #6
 8001ce8:	2200      	movs	r2, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	4611      	mov	r1, r2
 8001cee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cf2:	623b      	str	r3, [r7, #32]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cf8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cfc:	4642      	mov	r2, r8
 8001cfe:	464b      	mov	r3, r9
 8001d00:	f04f 0000 	mov.w	r0, #0
 8001d04:	f04f 0100 	mov.w	r1, #0
 8001d08:	0159      	lsls	r1, r3, #5
 8001d0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d0e:	0150      	lsls	r0, r2, #5
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4641      	mov	r1, r8
 8001d16:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d1a:	4649      	mov	r1, r9
 8001d1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d34:	ebb2 040a 	subs.w	r4, r2, sl
 8001d38:	eb63 050b 	sbc.w	r5, r3, fp
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	00eb      	lsls	r3, r5, #3
 8001d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d4a:	00e2      	lsls	r2, r4, #3
 8001d4c:	4614      	mov	r4, r2
 8001d4e:	461d      	mov	r5, r3
 8001d50:	4643      	mov	r3, r8
 8001d52:	18e3      	adds	r3, r4, r3
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	464b      	mov	r3, r9
 8001d58:	eb45 0303 	adc.w	r3, r5, r3
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	028b      	lsls	r3, r1, #10
 8001d6e:	4621      	mov	r1, r4
 8001d70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d74:	4621      	mov	r1, r4
 8001d76:	028a      	lsls	r2, r1, #10
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d7e:	2200      	movs	r2, #0
 8001d80:	61bb      	str	r3, [r7, #24]
 8001d82:	61fa      	str	r2, [r7, #28]
 8001d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d88:	f7fe fac2 	bl	8000310 <__aeabi_uldivmod>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4613      	mov	r3, r2
 8001d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d94:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	0c1b      	lsrs	r3, r3, #16
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	3301      	adds	r3, #1
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001da4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dae:	e002      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001db2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3750      	adds	r7, #80	@ 0x50
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	00f42400 	.word	0x00f42400
 8001dcc:	007a1200 	.word	0x007a1200

08001dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd4:	4b03      	ldr	r3, [pc, #12]	@ (8001de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20000000 	.word	0x20000000

08001de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dec:	f7ff fff0 	bl	8001dd0 <HAL_RCC_GetHCLKFreq>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b05      	ldr	r3, [pc, #20]	@ (8001e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	0a9b      	lsrs	r3, r3, #10
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	4903      	ldr	r1, [pc, #12]	@ (8001e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dfe:	5ccb      	ldrb	r3, [r1, r3]
 8001e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	08006fe4 	.word	0x08006fe4

08001e10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e20:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <HAL_RCC_GetClockConfig+0x5c>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0203 	and.w	r2, r3, #3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e6c <HAL_RCC_GetClockConfig+0x5c>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <HAL_RCC_GetClockConfig+0x5c>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e44:	4b09      	ldr	r3, [pc, #36]	@ (8001e6c <HAL_RCC_GetClockConfig+0x5c>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	08db      	lsrs	r3, r3, #3
 8001e4a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e52:	4b07      	ldr	r3, [pc, #28]	@ (8001e70 <HAL_RCC_GetClockConfig+0x60>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0207 	and.w	r2, r3, #7
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	601a      	str	r2, [r3, #0]
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40023c00 	.word	0x40023c00

08001e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e041      	b.n	8001f0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d106      	bne.n	8001ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f839 	bl	8001f12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3304      	adds	r3, #4
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	f000 f9c0 	bl	8002238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d001      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e04e      	b.n	8001fde <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a23      	ldr	r2, [pc, #140]	@ (8001fec <HAL_TIM_Base_Start_IT+0xc4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d022      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f6a:	d01d      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d018      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ff4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d013      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00e      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8001ffc <HAL_TIM_Base_Start_IT+0xd4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d009      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a19      	ldr	r2, [pc, #100]	@ (8002000 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d004      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a18      	ldr	r2, [pc, #96]	@ (8002004 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d111      	bne.n	8001fcc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b06      	cmp	r3, #6
 8001fb8:	d010      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0201 	orr.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fca:	e007      	b.n	8001fdc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40010000 	.word	0x40010000
 8001ff0:	40000400 	.word	0x40000400
 8001ff4:	40000800 	.word	0x40000800
 8001ff8:	40000c00 	.word	0x40000c00
 8001ffc:	40010400 	.word	0x40010400
 8002000:	40014000 	.word	0x40014000
 8002004:	40001800 	.word	0x40001800

08002008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d020      	beq.n	800206c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01b      	beq.n	800206c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0202 	mvn.w	r2, #2
 800203c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f8d2 	bl	80021fc <HAL_TIM_IC_CaptureCallback>
 8002058:	e005      	b.n	8002066 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f8c4 	bl	80021e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f8d5 	bl	8002210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b00      	cmp	r3, #0
 8002074:	d020      	beq.n	80020b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01b      	beq.n	80020b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0204 	mvn.w	r2, #4
 8002088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2202      	movs	r2, #2
 800208e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f8ac 	bl	80021fc <HAL_TIM_IC_CaptureCallback>
 80020a4:	e005      	b.n	80020b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f89e 	bl	80021e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f8af 	bl	8002210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d020      	beq.n	8002104 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d01b      	beq.n	8002104 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0208 	mvn.w	r2, #8
 80020d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2204      	movs	r2, #4
 80020da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f886 	bl	80021fc <HAL_TIM_IC_CaptureCallback>
 80020f0:	e005      	b.n	80020fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f878 	bl	80021e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f889 	bl	8002210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b00      	cmp	r3, #0
 800210c:	d020      	beq.n	8002150 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b00      	cmp	r3, #0
 8002116:	d01b      	beq.n	8002150 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0210 	mvn.w	r2, #16
 8002120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2208      	movs	r2, #8
 8002126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f860 	bl	80021fc <HAL_TIM_IC_CaptureCallback>
 800213c:	e005      	b.n	800214a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f852 	bl	80021e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f863 	bl	8002210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00c      	beq.n	8002174 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b00      	cmp	r3, #0
 8002162:	d007      	beq.n	8002174 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 0201 	mvn.w	r2, #1
 800216c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe fd0a 	bl	8000b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00c      	beq.n	8002198 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002184:	2b00      	cmp	r3, #0
 8002186:	d007      	beq.n	8002198 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f900 	bl	8002398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00c      	beq.n	80021bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d007      	beq.n	80021bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f834 	bl	8002224 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00c      	beq.n	80021e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d007      	beq.n	80021e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0220 	mvn.w	r2, #32
 80021d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f8d2 	bl	8002384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021e0:	bf00      	nop
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a43      	ldr	r2, [pc, #268]	@ (8002358 <TIM_Base_SetConfig+0x120>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d013      	beq.n	8002278 <TIM_Base_SetConfig+0x40>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002256:	d00f      	beq.n	8002278 <TIM_Base_SetConfig+0x40>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a40      	ldr	r2, [pc, #256]	@ (800235c <TIM_Base_SetConfig+0x124>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d00b      	beq.n	8002278 <TIM_Base_SetConfig+0x40>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a3f      	ldr	r2, [pc, #252]	@ (8002360 <TIM_Base_SetConfig+0x128>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d007      	beq.n	8002278 <TIM_Base_SetConfig+0x40>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a3e      	ldr	r2, [pc, #248]	@ (8002364 <TIM_Base_SetConfig+0x12c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d003      	beq.n	8002278 <TIM_Base_SetConfig+0x40>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a3d      	ldr	r2, [pc, #244]	@ (8002368 <TIM_Base_SetConfig+0x130>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d108      	bne.n	800228a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800227e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a32      	ldr	r2, [pc, #200]	@ (8002358 <TIM_Base_SetConfig+0x120>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d02b      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002298:	d027      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a2f      	ldr	r2, [pc, #188]	@ (800235c <TIM_Base_SetConfig+0x124>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d023      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002360 <TIM_Base_SetConfig+0x128>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d01f      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a2d      	ldr	r2, [pc, #180]	@ (8002364 <TIM_Base_SetConfig+0x12c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d01b      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002368 <TIM_Base_SetConfig+0x130>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d017      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a2b      	ldr	r2, [pc, #172]	@ (800236c <TIM_Base_SetConfig+0x134>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002370 <TIM_Base_SetConfig+0x138>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00f      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a29      	ldr	r2, [pc, #164]	@ (8002374 <TIM_Base_SetConfig+0x13c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00b      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a28      	ldr	r2, [pc, #160]	@ (8002378 <TIM_Base_SetConfig+0x140>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d007      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a27      	ldr	r2, [pc, #156]	@ (800237c <TIM_Base_SetConfig+0x144>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d003      	beq.n	80022ea <TIM_Base_SetConfig+0xb2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a26      	ldr	r2, [pc, #152]	@ (8002380 <TIM_Base_SetConfig+0x148>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d108      	bne.n	80022fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	4313      	orrs	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a0e      	ldr	r2, [pc, #56]	@ (8002358 <TIM_Base_SetConfig+0x120>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d003      	beq.n	800232a <TIM_Base_SetConfig+0xf2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a10      	ldr	r2, [pc, #64]	@ (8002368 <TIM_Base_SetConfig+0x130>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d103      	bne.n	8002332 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f043 0204 	orr.w	r2, r3, #4
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	601a      	str	r2, [r3, #0]
}
 800234a:	bf00      	nop
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40010000 	.word	0x40010000
 800235c:	40000400 	.word	0x40000400
 8002360:	40000800 	.word	0x40000800
 8002364:	40000c00 	.word	0x40000c00
 8002368:	40010400 	.word	0x40010400
 800236c:	40014000 	.word	0x40014000
 8002370:	40014400 	.word	0x40014400
 8002374:	40014800 	.word	0x40014800
 8002378:	40001800 	.word	0x40001800
 800237c:	40001c00 	.word	0x40001c00
 8002380:	40002000 	.word	0x40002000

08002384 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f103 0208 	add.w	r2, r3, #8
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023c4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f103 0208 	add.w	r2, r3, #8
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f103 0208 	add.w	r2, r3, #8
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80023e0:	f240 1019 	movw	r0, #281	@ 0x119
 80023e4:	f003 fa70 	bl	80058c8 <SEGGER_SYSVIEW_RecordEndCall>
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80023fe:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002402:	f003 fa61 	bl	80058c8 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <uxListRemove>:
}
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6892      	ldr	r2, [r2, #8]
 8002424:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6852      	ldr	r2, [r2, #4]
 800242e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	429a      	cmp	r2, r3
 8002438:	d103      	bne.n	8002442 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	1e5a      	subs	r2, r3, #1
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4619      	mov	r1, r3
 8002458:	f240 101d 	movw	r0, #285	@ 0x11d
 800245c:	f003 fa70 	bl	8005940 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	@ 0x28
 8002470:	af04      	add	r7, sp, #16
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4618      	mov	r0, r3
 8002480:	f001 f8de 	bl	8003640 <pvPortMalloc>
 8002484:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d013      	beq.n	80024b4 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800248c:	2058      	movs	r0, #88	@ 0x58
 800248e:	f001 f8d7 	bl	8003640 <pvPortMalloc>
 8002492:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d008      	beq.n	80024ac <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800249a:	2258      	movs	r2, #88	@ 0x58
 800249c:	2100      	movs	r1, #0
 800249e:	6978      	ldr	r0, [r7, #20]
 80024a0:	f003 fe56 	bl	8006150 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80024aa:	e005      	b.n	80024b8 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80024ac:	6938      	ldr	r0, [r7, #16]
 80024ae:	f001 f9f9 	bl	80038a4 <vPortFree>
 80024b2:	e001      	b.n	80024b8 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00d      	beq.n	80024da <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80024be:	2300      	movs	r3, #0
 80024c0:	9303      	str	r3, [sp, #12]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	9302      	str	r3, [sp, #8]
 80024c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	68b9      	ldr	r1, [r7, #8]
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 f82d 	bl	8002534 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80024da:	697b      	ldr	r3, [r7, #20]
    }
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	68b9      	ldr	r1, [r7, #8]
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f7ff ffb3 	bl	800246c <prvCreateTask>
 8002506:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800250e:	6938      	ldr	r0, [r7, #16]
 8002510:	f000 f8a0 	bl	8002654 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002514:	2301      	movs	r3, #1
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	e002      	b.n	8002520 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800251a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800251e:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	4619      	mov	r1, r3
 8002524:	20c2      	movs	r0, #194	@ 0xc2
 8002526:	f003 fa0b 	bl	8005940 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800252a:	697b      	ldr	r3, [r7, #20]
    }
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002544:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	461a      	mov	r2, r3
 800254c:	21a5      	movs	r1, #165	@ 0xa5
 800254e:	f003 fdff 	bl	8006150 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002554:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800255c:	3b01      	subs	r3, #1
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	f023 0307 	bic.w	r3, r3, #7
 800256a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <prvInitialiseNewTask+0x5a>
    __asm volatile
 8002576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800257a:	f383 8811 	msr	BASEPRI, r3
 800257e:	f3bf 8f6f 	isb	sy
 8002582:	f3bf 8f4f 	dsb	sy
 8002586:	617b      	str	r3, [r7, #20]
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	e7fd      	b.n	800258a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d01e      	beq.n	80025d2 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	e012      	b.n	80025c0 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	4413      	add	r3, r2
 80025a0:	7819      	ldrb	r1, [r3, #0]
 80025a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	4413      	add	r3, r2
 80025a8:	3334      	adds	r3, #52	@ 0x34
 80025aa:	460a      	mov	r2, r1
 80025ac:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	4413      	add	r3, r2
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d006      	beq.n	80025c8 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3301      	adds	r3, #1
 80025be:	61fb      	str	r3, [r7, #28]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2b09      	cmp	r3, #9
 80025c4:	d9e9      	bls.n	800259a <prvInitialiseNewTask+0x66>
 80025c6:	e000      	b.n	80025ca <prvInitialiseNewTask+0x96>
            {
                break;
 80025c8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80025ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80025d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d90b      	bls.n	80025f0 <prvInitialiseNewTask+0xbc>
    __asm volatile
 80025d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025dc:	f383 8811 	msr	BASEPRI, r3
 80025e0:	f3bf 8f6f 	isb	sy
 80025e4:	f3bf 8f4f 	dsb	sy
 80025e8:	613b      	str	r3, [r7, #16]
}
 80025ea:	bf00      	nop
 80025ec:	bf00      	nop
 80025ee:	e7fd      	b.n	80025ec <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80025f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d901      	bls.n	80025fa <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80025f6:	2304      	movs	r3, #4
 80025f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80025fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002602:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002604:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002608:	3304      	adds	r3, #4
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fef0 	bl	80023f0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002612:	3318      	adds	r3, #24
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff feeb 	bl	80023f0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800261a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800261e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002622:	f1c3 0205 	rsb	r2, r3, #5
 8002626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002628:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800262a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800262e:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	68f9      	ldr	r1, [r7, #12]
 8002634:	69b8      	ldr	r0, [r7, #24]
 8002636:	f000 fcd7 	bl	8002fe8 <pxPortInitialiseStack>
 800263a:	4602      	mov	r2, r0
 800263c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800263e:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002648:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800264a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800264c:	bf00      	nop
 800264e:	3720      	adds	r7, #32
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002654:	b5b0      	push	{r4, r5, r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af02      	add	r7, sp, #8
 800265a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800265c:	f000 fec2 	bl	80033e4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002660:	4b50      	ldr	r3, [pc, #320]	@ (80027a4 <prvAddNewTaskToReadyList+0x150>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	3301      	adds	r3, #1
 8002666:	4a4f      	ldr	r2, [pc, #316]	@ (80027a4 <prvAddNewTaskToReadyList+0x150>)
 8002668:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800266a:	4b4f      	ldr	r3, [pc, #316]	@ (80027a8 <prvAddNewTaskToReadyList+0x154>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002672:	4a4d      	ldr	r2, [pc, #308]	@ (80027a8 <prvAddNewTaskToReadyList+0x154>)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002678:	4b4a      	ldr	r3, [pc, #296]	@ (80027a4 <prvAddNewTaskToReadyList+0x150>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d110      	bne.n	80026a2 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002680:	f000 fc18 	bl	8002eb4 <prvInitialiseTaskLists>
 8002684:	e00d      	b.n	80026a2 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002686:	4b49      	ldr	r3, [pc, #292]	@ (80027ac <prvAddNewTaskToReadyList+0x158>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800268e:	4b46      	ldr	r3, [pc, #280]	@ (80027a8 <prvAddNewTaskToReadyList+0x154>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002698:	429a      	cmp	r2, r3
 800269a:	d802      	bhi.n	80026a2 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 800269c:	4a42      	ldr	r2, [pc, #264]	@ (80027a8 <prvAddNewTaskToReadyList+0x154>)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80026a2:	4b43      	ldr	r3, [pc, #268]	@ (80027b0 <prvAddNewTaskToReadyList+0x15c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	3301      	adds	r3, #1
 80026a8:	4a41      	ldr	r2, [pc, #260]	@ (80027b0 <prvAddNewTaskToReadyList+0x15c>)
 80026aa:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80026ac:	4b40      	ldr	r3, [pc, #256]	@ (80027b0 <prvAddNewTaskToReadyList+0x15c>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <prvAddNewTaskToReadyList+0x94>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4618      	mov	r0, r3
 80026be:	f003 f9b3 	bl	8005a28 <SEGGER_SYSVIEW_OnTaskCreate>
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	461d      	mov	r5, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	461c      	mov	r4, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	1ae3      	subs	r3, r4, r3
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	462b      	mov	r3, r5
 80026e4:	f001 fad8 	bl	8003c98 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f003 fa20 	bl	8005b30 <SEGGER_SYSVIEW_OnTaskStartReady>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f4:	2201      	movs	r2, #1
 80026f6:	409a      	lsls	r2, r3
 80026f8:	4b2e      	ldr	r3, [pc, #184]	@ (80027b4 <prvAddNewTaskToReadyList+0x160>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	4a2d      	ldr	r2, [pc, #180]	@ (80027b4 <prvAddNewTaskToReadyList+0x160>)
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002706:	492c      	ldr	r1, [pc, #176]	@ (80027b8 <prvAddNewTaskToReadyList+0x164>)
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	3304      	adds	r3, #4
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	609a      	str	r2, [r3, #8]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	3204      	adds	r2, #4
 800272e:	605a      	str	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	1d1a      	adds	r2, r3, #4
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4a1c      	ldr	r2, [pc, #112]	@ (80027b8 <prvAddNewTaskToReadyList+0x164>)
 8002746:	441a      	add	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	615a      	str	r2, [r3, #20]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002750:	4919      	ldr	r1, [pc, #100]	@ (80027b8 <prvAddNewTaskToReadyList+0x164>)
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002762:	1c59      	adds	r1, r3, #1
 8002764:	4814      	ldr	r0, [pc, #80]	@ (80027b8 <prvAddNewTaskToReadyList+0x164>)
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4403      	add	r3, r0
 8002770:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002772:	f000 fe69 	bl	8003448 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002776:	4b0d      	ldr	r3, [pc, #52]	@ (80027ac <prvAddNewTaskToReadyList+0x158>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00e      	beq.n	800279c <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800277e:	4b0a      	ldr	r3, [pc, #40]	@ (80027a8 <prvAddNewTaskToReadyList+0x154>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002788:	429a      	cmp	r2, r3
 800278a:	d207      	bcs.n	800279c <prvAddNewTaskToReadyList+0x148>
 800278c:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <prvAddNewTaskToReadyList+0x168>)
 800278e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800279c:	bf00      	nop
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bdb0      	pop	{r4, r5, r7, pc}
 80027a4:	200001b0 	.word	0x200001b0
 80027a8:	200000d8 	.word	0x200000d8
 80027ac:	200001bc 	.word	0x200001bc
 80027b0:	200001cc 	.word	0x200001cc
 80027b4:	200001b8 	.word	0x200001b8
 80027b8:	200000dc 	.word	0x200000dc
 80027bc:	e000ed04 	.word	0xe000ed04

080027c0 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	@ 0x28
 80027c4:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80027c6:	2301      	movs	r3, #1
 80027c8:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	e011      	b.n	80027f8 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80027d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002848 <prvCreateIdleTasks+0x88>)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	4413      	add	r3, r2
 80027da:	7819      	ldrb	r1, [r3, #0]
 80027dc:	1d3a      	adds	r2, r7, #4
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	4413      	add	r3, r2
 80027e2:	460a      	mov	r2, r1
 80027e4:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80027e6:	1d3a      	adds	r2, r7, #4
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	4413      	add	r3, r2
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d006      	beq.n	8002800 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	3301      	adds	r3, #1
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b09      	cmp	r3, #9
 80027fc:	ddea      	ble.n	80027d4 <prvCreateIdleTasks+0x14>
 80027fe:	e000      	b.n	8002802 <prvCreateIdleTasks+0x42>
        {
            break;
 8002800:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	e015      	b.n	8002834 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002808:	4b10      	ldr	r3, [pc, #64]	@ (800284c <prvCreateIdleTasks+0x8c>)
 800280a:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4a0f      	ldr	r2, [pc, #60]	@ (8002850 <prvCreateIdleTasks+0x90>)
 8002812:	4413      	add	r3, r2
 8002814:	1d39      	adds	r1, r7, #4
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	2300      	movs	r3, #0
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	2300      	movs	r3, #0
 800281e:	2282      	movs	r2, #130	@ 0x82
 8002820:	6938      	ldr	r0, [r7, #16]
 8002822:	f7ff fe5f 	bl	80024e4 <xTaskCreate>
 8002826:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d006      	beq.n	800283c <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	3301      	adds	r3, #1
 8002832:	61bb      	str	r3, [r7, #24]
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	dde6      	ble.n	8002808 <prvCreateIdleTasks+0x48>
 800283a:	e000      	b.n	800283e <prvCreateIdleTasks+0x7e>
        {
            break;
 800283c:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800283e:	69fb      	ldr	r3, [r7, #28]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3720      	adds	r7, #32
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	08006f10 	.word	0x08006f10
 800284c:	08002e85 	.word	0x08002e85
 8002850:	200001d4 	.word	0x200001d4

08002854 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800285a:	f7ff ffb1 	bl	80027c0 <prvCreateIdleTasks>
 800285e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d124      	bne.n	80028b0 <vTaskStartScheduler+0x5c>
    __asm volatile
 8002866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800286a:	f383 8811 	msr	BASEPRI, r3
 800286e:	f3bf 8f6f 	isb	sy
 8002872:	f3bf 8f4f 	dsb	sy
 8002876:	60bb      	str	r3, [r7, #8]
}
 8002878:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800287a:	4b1a      	ldr	r3, [pc, #104]	@ (80028e4 <vTaskStartScheduler+0x90>)
 800287c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002880:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002882:	4b19      	ldr	r3, [pc, #100]	@ (80028e8 <vTaskStartScheduler+0x94>)
 8002884:	2201      	movs	r2, #1
 8002886:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002888:	4b18      	ldr	r3, [pc, #96]	@ (80028ec <vTaskStartScheduler+0x98>)
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800288e:	4b18      	ldr	r3, [pc, #96]	@ (80028f0 <vTaskStartScheduler+0x9c>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	4b18      	ldr	r3, [pc, #96]	@ (80028f4 <vTaskStartScheduler+0xa0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d102      	bne.n	80028a0 <vTaskStartScheduler+0x4c>
 800289a:	f003 f8a9 	bl	80059f0 <SEGGER_SYSVIEW_OnIdle>
 800289e:	e004      	b.n	80028aa <vTaskStartScheduler+0x56>
 80028a0:	4b14      	ldr	r3, [pc, #80]	@ (80028f4 <vTaskStartScheduler+0xa0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f003 f901 	bl	8005aac <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80028aa:	f000 fc2b 	bl	8003104 <xPortStartScheduler>
 80028ae:	e00f      	b.n	80028d0 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028b6:	d10b      	bne.n	80028d0 <vTaskStartScheduler+0x7c>
    __asm volatile
 80028b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028bc:	f383 8811 	msr	BASEPRI, r3
 80028c0:	f3bf 8f6f 	isb	sy
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	607b      	str	r3, [r7, #4]
}
 80028ca:	bf00      	nop
 80028cc:	bf00      	nop
 80028ce:	e7fd      	b.n	80028cc <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80028d0:	4b09      	ldr	r3, [pc, #36]	@ (80028f8 <vTaskStartScheduler+0xa4>)
 80028d2:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 80028d4:	20cd      	movs	r0, #205	@ 0xcd
 80028d6:	f002 fff7 	bl	80058c8 <SEGGER_SYSVIEW_RecordEndCall>
}
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200001d0 	.word	0x200001d0
 80028e8:	200001bc 	.word	0x200001bc
 80028ec:	200001b4 	.word	0x200001b4
 80028f0:	200001d4 	.word	0x200001d4
 80028f4:	200000d8 	.word	0x200000d8
 80028f8:	08006fec 	.word	0x08006fec

080028fc <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002900:	4b04      	ldr	r3, [pc, #16]	@ (8002914 <vTaskSuspendAll+0x18>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3301      	adds	r3, #1
 8002906:	4a03      	ldr	r2, [pc, #12]	@ (8002914 <vTaskSuspendAll+0x18>)
 8002908:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 800290a:	20cf      	movs	r0, #207	@ 0xcf
 800290c:	f002 ffdc 	bl	80058c8 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}
 8002914:	200001d8 	.word	0x200001d8

08002918 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002922:	2300      	movs	r3, #0
 8002924:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002926:	f000 fd5d 	bl	80033e4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800292e:	4b7a      	ldr	r3, [pc, #488]	@ (8002b18 <xTaskResumeAll+0x200>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10b      	bne.n	800294e <xTaskResumeAll+0x36>
    __asm volatile
 8002936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800293a:	f383 8811 	msr	BASEPRI, r3
 800293e:	f3bf 8f6f 	isb	sy
 8002942:	f3bf 8f4f 	dsb	sy
 8002946:	603b      	str	r3, [r7, #0]
}
 8002948:	bf00      	nop
 800294a:	bf00      	nop
 800294c:	e7fd      	b.n	800294a <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800294e:	4b72      	ldr	r3, [pc, #456]	@ (8002b18 <xTaskResumeAll+0x200>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3b01      	subs	r3, #1
 8002954:	4a70      	ldr	r2, [pc, #448]	@ (8002b18 <xTaskResumeAll+0x200>)
 8002956:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002958:	4b6f      	ldr	r3, [pc, #444]	@ (8002b18 <xTaskResumeAll+0x200>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	f040 80ce 	bne.w	8002afe <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002962:	4b6e      	ldr	r3, [pc, #440]	@ (8002b1c <xTaskResumeAll+0x204>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80c9 	beq.w	8002afe <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800296c:	e092      	b.n	8002a94 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800296e:	4b6c      	ldr	r3, [pc, #432]	@ (8002b20 <xTaskResumeAll+0x208>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	6a12      	ldr	r2, [r2, #32]
 8002984:	609a      	str	r2, [r3, #8]
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	69d2      	ldr	r2, [r2, #28]
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	3318      	adds	r3, #24
 8002998:	429a      	cmp	r2, r3
 800299a:	d103      	bne.n	80029a4 <xTaskResumeAll+0x8c>
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	6a1a      	ldr	r2, [r3, #32]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	2200      	movs	r2, #0
 80029a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	1e5a      	subs	r2, r3, #1
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	68d2      	ldr	r2, [r2, #12]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	69fa      	ldr	r2, [r7, #28]
 80029ca:	6892      	ldr	r2, [r2, #8]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3304      	adds	r3, #4
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d103      	bne.n	80029e2 <xTaskResumeAll+0xca>
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	2200      	movs	r2, #0
 80029e6:	615a      	str	r2, [r3, #20]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	1e5a      	subs	r2, r3, #1
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f003 f89b 	bl	8005b30 <SEGGER_SYSVIEW_OnTaskStartReady>
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fe:	2201      	movs	r2, #1
 8002a00:	409a      	lsls	r2, r3
 8002a02:	4b48      	ldr	r3, [pc, #288]	@ (8002b24 <xTaskResumeAll+0x20c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	4a46      	ldr	r2, [pc, #280]	@ (8002b24 <xTaskResumeAll+0x20c>)
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a10:	4945      	ldr	r1, [pc, #276]	@ (8002b28 <xTaskResumeAll+0x210>)
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	60da      	str	r2, [r3, #12]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	3204      	adds	r2, #4
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	1d1a      	adds	r2, r3, #4
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	609a      	str	r2, [r3, #8]
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4a36      	ldr	r2, [pc, #216]	@ (8002b28 <xTaskResumeAll+0x210>)
 8002a50:	441a      	add	r2, r3
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	615a      	str	r2, [r3, #20]
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a5a:	4933      	ldr	r1, [pc, #204]	@ (8002b28 <xTaskResumeAll+0x210>)
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	69fa      	ldr	r2, [r7, #28]
 8002a6a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a6c:	1c59      	adds	r1, r3, #1
 8002a6e:	482e      	ldr	r0, [pc, #184]	@ (8002b28 <xTaskResumeAll+0x210>)
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4403      	add	r3, r0
 8002a7a:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a80:	4b2a      	ldr	r3, [pc, #168]	@ (8002b2c <xTaskResumeAll+0x214>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d904      	bls.n	8002a94 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002a8a:	4a29      	ldr	r2, [pc, #164]	@ (8002b30 <xTaskResumeAll+0x218>)
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	2101      	movs	r1, #1
 8002a90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a94:	4b22      	ldr	r3, [pc, #136]	@ (8002b20 <xTaskResumeAll+0x208>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f47f af68 	bne.w	800296e <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002aa4:	f000 fa84 	bl	8002fb0 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002aa8:	4b22      	ldr	r3, [pc, #136]	@ (8002b34 <xTaskResumeAll+0x21c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d012      	beq.n	8002ada <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002ab4:	f000 f858 	bl	8002b68 <xTaskIncrementTick>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d004      	beq.n	8002ac8 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8002abe:	4a1c      	ldr	r2, [pc, #112]	@ (8002b30 <xTaskResumeAll+0x218>)
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1ef      	bne.n	8002ab4 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8002ad4:	4b17      	ldr	r3, [pc, #92]	@ (8002b34 <xTaskResumeAll+0x21c>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002ada:	4a15      	ldr	r2, [pc, #84]	@ (8002b30 <xTaskResumeAll+0x218>)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00b      	beq.n	8002afe <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8002aea:	4b10      	ldr	r3, [pc, #64]	@ (8002b2c <xTaskResumeAll+0x214>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4b12      	ldr	r3, [pc, #72]	@ (8002b38 <xTaskResumeAll+0x220>)
 8002af0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	f3bf 8f4f 	dsb	sy
 8002afa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002afe:	f000 fca3 	bl	8003448 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	4619      	mov	r1, r3
 8002b06:	20d0      	movs	r0, #208	@ 0xd0
 8002b08:	f002 ff1a 	bl	8005940 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8002b0c:	69bb      	ldr	r3, [r7, #24]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200001d8 	.word	0x200001d8
 8002b1c:	200001b0 	.word	0x200001b0
 8002b20:	20000170 	.word	0x20000170
 8002b24:	200001b8 	.word	0x200001b8
 8002b28:	200000dc 	.word	0x200000dc
 8002b2c:	200000d8 	.word	0x200000d8
 8002b30:	200001c4 	.word	0x200001c4
 8002b34:	200001c0 	.word	0x200001c0
 8002b38:	e000ed04 	.word	0xe000ed04

08002b3c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b42:	f000 fd3b 	bl	80035bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002b46:	2300      	movs	r3, #0
 8002b48:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002b4a:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <xTaskGetTickCountFromISR+0x28>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8002b50:	6839      	ldr	r1, [r7, #0]
 8002b52:	20d2      	movs	r0, #210	@ 0xd2
 8002b54:	f002 fef4 	bl	8005940 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002b58:	683b      	ldr	r3, [r7, #0]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	200001b4 	.word	0x200001b4

08002b68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	@ 0x28
 8002b6c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002b72:	4b83      	ldr	r3, [pc, #524]	@ (8002d80 <xTaskIncrementTick+0x218>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f040 80f3 	bne.w	8002d62 <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b7c:	4b81      	ldr	r3, [pc, #516]	@ (8002d84 <xTaskIncrementTick+0x21c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3301      	adds	r3, #1
 8002b82:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002b84:	4a7f      	ldr	r2, [pc, #508]	@ (8002d84 <xTaskIncrementTick+0x21c>)
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d121      	bne.n	8002bd4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002b90:	4b7d      	ldr	r3, [pc, #500]	@ (8002d88 <xTaskIncrementTick+0x220>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00b      	beq.n	8002bb2 <xTaskIncrementTick+0x4a>
    __asm volatile
 8002b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b9e:	f383 8811 	msr	BASEPRI, r3
 8002ba2:	f3bf 8f6f 	isb	sy
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	607b      	str	r3, [r7, #4]
}
 8002bac:	bf00      	nop
 8002bae:	bf00      	nop
 8002bb0:	e7fd      	b.n	8002bae <xTaskIncrementTick+0x46>
 8002bb2:	4b75      	ldr	r3, [pc, #468]	@ (8002d88 <xTaskIncrementTick+0x220>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	61fb      	str	r3, [r7, #28]
 8002bb8:	4b74      	ldr	r3, [pc, #464]	@ (8002d8c <xTaskIncrementTick+0x224>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a72      	ldr	r2, [pc, #456]	@ (8002d88 <xTaskIncrementTick+0x220>)
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	4a72      	ldr	r2, [pc, #456]	@ (8002d8c <xTaskIncrementTick+0x224>)
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4b72      	ldr	r3, [pc, #456]	@ (8002d90 <xTaskIncrementTick+0x228>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	4a70      	ldr	r2, [pc, #448]	@ (8002d90 <xTaskIncrementTick+0x228>)
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	f000 f9ee 	bl	8002fb0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002bd4:	4b6f      	ldr	r3, [pc, #444]	@ (8002d94 <xTaskIncrementTick+0x22c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6a3a      	ldr	r2, [r7, #32]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	f0c0 80ac 	bcc.w	8002d38 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002be0:	4b69      	ldr	r3, [pc, #420]	@ (8002d88 <xTaskIncrementTick+0x220>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d104      	bne.n	8002bf4 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002bea:	4b6a      	ldr	r3, [pc, #424]	@ (8002d94 <xTaskIncrementTick+0x22c>)
 8002bec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bf0:	601a      	str	r2, [r3, #0]
                    break;
 8002bf2:	e0a1      	b.n	8002d38 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002bf4:	4b64      	ldr	r3, [pc, #400]	@ (8002d88 <xTaskIncrementTick+0x220>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002c04:	6a3a      	ldr	r2, [r7, #32]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d203      	bcs.n	8002c14 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002c0c:	4a61      	ldr	r2, [pc, #388]	@ (8002d94 <xTaskIncrementTick+0x22c>)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	6013      	str	r3, [r2, #0]
                        break;
 8002c12:	e091      	b.n	8002d38 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	68d2      	ldr	r2, [r2, #12]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	6892      	ldr	r2, [r2, #8]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	3304      	adds	r3, #4
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d103      	bne.n	8002c42 <xTaskIncrementTick+0xda>
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	2200      	movs	r2, #0
 8002c46:	615a      	str	r2, [r3, #20]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	1e5a      	subs	r2, r3, #1
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d01e      	beq.n	8002c98 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	6a12      	ldr	r2, [r2, #32]
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	69d2      	ldr	r2, [r2, #28]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	3318      	adds	r3, #24
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d103      	bne.n	8002c88 <xTaskIncrementTick+0x120>
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	6a1a      	ldr	r2, [r3, #32]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	605a      	str	r2, [r3, #4]
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	1e5a      	subs	r2, r3, #1
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f002 ff48 	bl	8005b30 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8002d98 <xTaskIncrementTick+0x230>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	4a3a      	ldr	r2, [pc, #232]	@ (8002d98 <xTaskIncrementTick+0x230>)
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cb6:	4939      	ldr	r1, [pc, #228]	@ (8002d9c <xTaskIncrementTick+0x234>)
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	609a      	str	r2, [r3, #8]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	3204      	adds	r2, #4
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	1d1a      	adds	r2, r3, #4
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4a29      	ldr	r2, [pc, #164]	@ (8002d9c <xTaskIncrementTick+0x234>)
 8002cf6:	441a      	add	r2, r3
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	615a      	str	r2, [r3, #20]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d00:	4926      	ldr	r1, [pc, #152]	@ (8002d9c <xTaskIncrementTick+0x234>)
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d12:	1c59      	adds	r1, r3, #1
 8002d14:	4821      	ldr	r0, [pc, #132]	@ (8002d9c <xTaskIncrementTick+0x234>)
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4403      	add	r3, r0
 8002d20:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d26:	4b1e      	ldr	r3, [pc, #120]	@ (8002da0 <xTaskIncrementTick+0x238>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	f67f af57 	bls.w	8002be0 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8002d32:	2301      	movs	r3, #1
 8002d34:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d36:	e753      	b.n	8002be0 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8002d38:	4b19      	ldr	r3, [pc, #100]	@ (8002da0 <xTaskIncrementTick+0x238>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d3e:	4917      	ldr	r1, [pc, #92]	@ (8002d9c <xTaskIncrementTick+0x234>)
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d901      	bls.n	8002d54 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8002d50:	2301      	movs	r3, #1
 8002d52:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8002d54:	4b13      	ldr	r3, [pc, #76]	@ (8002da4 <xTaskIncrementTick+0x23c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d007      	beq.n	8002d6c <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d60:	e004      	b.n	8002d6c <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8002d62:	4b11      	ldr	r3, [pc, #68]	@ (8002da8 <xTaskIncrementTick+0x240>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3301      	adds	r3, #1
 8002d68:	4a0f      	ldr	r2, [pc, #60]	@ (8002da8 <xTaskIncrementTick+0x240>)
 8002d6a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6e:	4619      	mov	r1, r3
 8002d70:	20db      	movs	r0, #219	@ 0xdb
 8002d72:	f002 fde5 	bl	8005940 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3728      	adds	r7, #40	@ 0x28
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	200001d8 	.word	0x200001d8
 8002d84:	200001b4 	.word	0x200001b4
 8002d88:	20000168 	.word	0x20000168
 8002d8c:	2000016c 	.word	0x2000016c
 8002d90:	200001c8 	.word	0x200001c8
 8002d94:	200001d0 	.word	0x200001d0
 8002d98:	200001b8 	.word	0x200001b8
 8002d9c:	200000dc 	.word	0x200000dc
 8002da0:	200000d8 	.word	0x200000d8
 8002da4:	200001c4 	.word	0x200001c4
 8002da8:	200001c0 	.word	0x200001c0

08002dac <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002db2:	4b2e      	ldr	r3, [pc, #184]	@ (8002e6c <vTaskSwitchContext+0xc0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002dba:	4b2d      	ldr	r3, [pc, #180]	@ (8002e70 <vTaskSwitchContext+0xc4>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002dc0:	e04f      	b.n	8002e62 <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8002dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e70 <vTaskSwitchContext+0xc4>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e74 <vTaskSwitchContext+0xc8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	fab3 f383 	clz	r3, r3
 8002dd4:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8002dd6:	7afb      	ldrb	r3, [r7, #11]
 8002dd8:	f1c3 031f 	rsb	r3, r3, #31
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	4926      	ldr	r1, [pc, #152]	@ (8002e78 <vTaskSwitchContext+0xcc>)
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10b      	bne.n	8002e0a <vTaskSwitchContext+0x5e>
    __asm volatile
 8002df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df6:	f383 8811 	msr	BASEPRI, r3
 8002dfa:	f3bf 8f6f 	isb	sy
 8002dfe:	f3bf 8f4f 	dsb	sy
 8002e02:	607b      	str	r3, [r7, #4]
}
 8002e04:	bf00      	nop
 8002e06:	bf00      	nop
 8002e08:	e7fd      	b.n	8002e06 <vTaskSwitchContext+0x5a>
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4a18      	ldr	r2, [pc, #96]	@ (8002e78 <vTaskSwitchContext+0xcc>)
 8002e16:	4413      	add	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	3308      	adds	r3, #8
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d103      	bne.n	8002e38 <vTaskSwitchContext+0x8c>
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	4a0f      	ldr	r2, [pc, #60]	@ (8002e7c <vTaskSwitchContext+0xd0>)
 8002e40:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8002e42:	4b0f      	ldr	r3, [pc, #60]	@ (8002e80 <vTaskSwitchContext+0xd4>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4b0d      	ldr	r3, [pc, #52]	@ (8002e7c <vTaskSwitchContext+0xd0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d102      	bne.n	8002e54 <vTaskSwitchContext+0xa8>
 8002e4e:	f002 fdcf 	bl	80059f0 <SEGGER_SYSVIEW_OnIdle>
 8002e52:	e004      	b.n	8002e5e <vTaskSwitchContext+0xb2>
 8002e54:	4b09      	ldr	r3, [pc, #36]	@ (8002e7c <vTaskSwitchContext+0xd0>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f002 fe27 	bl	8005aac <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002e5e:	4b07      	ldr	r3, [pc, #28]	@ (8002e7c <vTaskSwitchContext+0xd0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
    }
 8002e62:	bf00      	nop
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	200001d8 	.word	0x200001d8
 8002e70:	200001c4 	.word	0x200001c4
 8002e74:	200001b8 	.word	0x200001b8
 8002e78:	200000dc 	.word	0x200000dc
 8002e7c:	200000d8 	.word	0x200000d8
 8002e80:	200001d4 	.word	0x200001d4

08002e84 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002e8c:	f000 f852 	bl	8002f34 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8002e90:	4b06      	ldr	r3, [pc, #24]	@ (8002eac <prvIdleTask+0x28>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d9f9      	bls.n	8002e8c <prvIdleTask+0x8>
            {
                taskYIELD();
 8002e98:	4b05      	ldr	r3, [pc, #20]	@ (8002eb0 <prvIdleTask+0x2c>)
 8002e9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002ea8:	e7f0      	b.n	8002e8c <prvIdleTask+0x8>
 8002eaa:	bf00      	nop
 8002eac:	200000dc 	.word	0x200000dc
 8002eb0:	e000ed04 	.word	0xe000ed04

08002eb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002eba:	2300      	movs	r3, #0
 8002ebc:	607b      	str	r3, [r7, #4]
 8002ebe:	e00c      	b.n	8002eda <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4a12      	ldr	r2, [pc, #72]	@ (8002f14 <prvInitialiseTaskLists+0x60>)
 8002ecc:	4413      	add	r3, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fa6c 	bl	80023ac <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	607b      	str	r3, [r7, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d9ef      	bls.n	8002ec0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002ee0:	480d      	ldr	r0, [pc, #52]	@ (8002f18 <prvInitialiseTaskLists+0x64>)
 8002ee2:	f7ff fa63 	bl	80023ac <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002ee6:	480d      	ldr	r0, [pc, #52]	@ (8002f1c <prvInitialiseTaskLists+0x68>)
 8002ee8:	f7ff fa60 	bl	80023ac <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002eec:	480c      	ldr	r0, [pc, #48]	@ (8002f20 <prvInitialiseTaskLists+0x6c>)
 8002eee:	f7ff fa5d 	bl	80023ac <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002ef2:	480c      	ldr	r0, [pc, #48]	@ (8002f24 <prvInitialiseTaskLists+0x70>)
 8002ef4:	f7ff fa5a 	bl	80023ac <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002ef8:	480b      	ldr	r0, [pc, #44]	@ (8002f28 <prvInitialiseTaskLists+0x74>)
 8002efa:	f7ff fa57 	bl	80023ac <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002efe:	4b0b      	ldr	r3, [pc, #44]	@ (8002f2c <prvInitialiseTaskLists+0x78>)
 8002f00:	4a05      	ldr	r2, [pc, #20]	@ (8002f18 <prvInitialiseTaskLists+0x64>)
 8002f02:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f04:	4b0a      	ldr	r3, [pc, #40]	@ (8002f30 <prvInitialiseTaskLists+0x7c>)
 8002f06:	4a05      	ldr	r2, [pc, #20]	@ (8002f1c <prvInitialiseTaskLists+0x68>)
 8002f08:	601a      	str	r2, [r3, #0]
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	200000dc 	.word	0x200000dc
 8002f18:	20000140 	.word	0x20000140
 8002f1c:	20000154 	.word	0x20000154
 8002f20:	20000170 	.word	0x20000170
 8002f24:	20000184 	.word	0x20000184
 8002f28:	2000019c 	.word	0x2000019c
 8002f2c:	20000168 	.word	0x20000168
 8002f30:	2000016c 	.word	0x2000016c

08002f34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f3a:	e019      	b.n	8002f70 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002f3c:	f000 fa52 	bl	80033e4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002f40:	4b10      	ldr	r3, [pc, #64]	@ (8002f84 <prvCheckTasksWaitingTermination+0x50>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fa5e 	bl	800240e <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8002f52:	4b0d      	ldr	r3, [pc, #52]	@ (8002f88 <prvCheckTasksWaitingTermination+0x54>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	4a0b      	ldr	r2, [pc, #44]	@ (8002f88 <prvCheckTasksWaitingTermination+0x54>)
 8002f5a:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f8c <prvCheckTasksWaitingTermination+0x58>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	4a0a      	ldr	r2, [pc, #40]	@ (8002f8c <prvCheckTasksWaitingTermination+0x58>)
 8002f64:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8002f66:	f000 fa6f 	bl	8003448 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f810 	bl	8002f90 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f70:	4b06      	ldr	r3, [pc, #24]	@ (8002f8c <prvCheckTasksWaitingTermination+0x58>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1e1      	bne.n	8002f3c <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002f78:	bf00      	nop
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000184 	.word	0x20000184
 8002f88:	200001b0 	.word	0x200001b0
 8002f8c:	20000198 	.word	0x20000198

08002f90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fc81 	bl	80038a4 <vPortFree>
            vPortFree( pxTCB );
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fc7e 	bl	80038a4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002fa8:	bf00      	nop
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe0 <prvResetNextTaskUnblockTime+0x30>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d104      	bne.n	8002fc8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002fbe:	4b09      	ldr	r3, [pc, #36]	@ (8002fe4 <prvResetNextTaskUnblockTime+0x34>)
 8002fc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002fc4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002fc6:	e005      	b.n	8002fd4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002fc8:	4b05      	ldr	r3, [pc, #20]	@ (8002fe0 <prvResetNextTaskUnblockTime+0x30>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a04      	ldr	r2, [pc, #16]	@ (8002fe4 <prvResetNextTaskUnblockTime+0x34>)
 8002fd2:	6013      	str	r3, [r2, #0]
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000168 	.word	0x20000168
 8002fe4:	200001d0 	.word	0x200001d0

08002fe8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	3b04      	subs	r3, #4
 8002ff8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003000:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	3b04      	subs	r3, #4
 8003006:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f023 0201 	bic.w	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	3b04      	subs	r3, #4
 8003016:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003018:	4a0c      	ldr	r2, [pc, #48]	@ (800304c <pxPortInitialiseStack+0x64>)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	3b14      	subs	r3, #20
 8003022:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	3b04      	subs	r3, #4
 800302e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f06f 0202 	mvn.w	r2, #2
 8003036:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	3b20      	subs	r3, #32
 800303c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800303e:	68fb      	ldr	r3, [r7, #12]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	08003051 	.word	0x08003051

08003050 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800305a:	4b13      	ldr	r3, [pc, #76]	@ (80030a8 <prvTaskExitError+0x58>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003062:	d00b      	beq.n	800307c <prvTaskExitError+0x2c>
    __asm volatile
 8003064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	60fb      	str	r3, [r7, #12]
}
 8003076:	bf00      	nop
 8003078:	bf00      	nop
 800307a:	e7fd      	b.n	8003078 <prvTaskExitError+0x28>
    __asm volatile
 800307c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	60bb      	str	r3, [r7, #8]
}
 800308e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003090:	bf00      	nop
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0fc      	beq.n	8003092 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003098:	bf00      	nop
 800309a:	bf00      	nop
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	2000000c 	.word	0x2000000c
 80030ac:	00000000 	.word	0x00000000

080030b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80030b0:	4b07      	ldr	r3, [pc, #28]	@ (80030d0 <pxCurrentTCBConst2>)
 80030b2:	6819      	ldr	r1, [r3, #0]
 80030b4:	6808      	ldr	r0, [r1, #0]
 80030b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ba:	f380 8809 	msr	PSP, r0
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f04f 0000 	mov.w	r0, #0
 80030c6:	f380 8811 	msr	BASEPRI, r0
 80030ca:	4770      	bx	lr
 80030cc:	f3af 8000 	nop.w

080030d0 <pxCurrentTCBConst2>:
 80030d0:	200000d8 	.word	0x200000d8
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop

080030d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80030d8:	4808      	ldr	r0, [pc, #32]	@ (80030fc <prvPortStartFirstTask+0x24>)
 80030da:	6800      	ldr	r0, [r0, #0]
 80030dc:	6800      	ldr	r0, [r0, #0]
 80030de:	f380 8808 	msr	MSP, r0
 80030e2:	f04f 0000 	mov.w	r0, #0
 80030e6:	f380 8814 	msr	CONTROL, r0
 80030ea:	b662      	cpsie	i
 80030ec:	b661      	cpsie	f
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	df00      	svc	0
 80030f8:	bf00      	nop
 80030fa:	0000      	.short	0x0000
 80030fc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8003100:	bf00      	nop
 8003102:	bf00      	nop

08003104 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08c      	sub	sp, #48	@ 0x30
 8003108:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800310a:	4b69      	ldr	r3, [pc, #420]	@ (80032b0 <xPortStartScheduler+0x1ac>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a69      	ldr	r2, [pc, #420]	@ (80032b4 <xPortStartScheduler+0x1b0>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d10b      	bne.n	800312c <xPortStartScheduler+0x28>
    __asm volatile
 8003114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003118:	f383 8811 	msr	BASEPRI, r3
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	f3bf 8f4f 	dsb	sy
 8003124:	623b      	str	r3, [r7, #32]
}
 8003126:	bf00      	nop
 8003128:	bf00      	nop
 800312a:	e7fd      	b.n	8003128 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800312c:	4b60      	ldr	r3, [pc, #384]	@ (80032b0 <xPortStartScheduler+0x1ac>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a61      	ldr	r2, [pc, #388]	@ (80032b8 <xPortStartScheduler+0x1b4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d10b      	bne.n	800314e <xPortStartScheduler+0x4a>
    __asm volatile
 8003136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003148:	bf00      	nop
 800314a:	bf00      	nop
 800314c:	e7fd      	b.n	800314a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800314e:	4b5b      	ldr	r3, [pc, #364]	@ (80032bc <xPortStartScheduler+0x1b8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8003154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003156:	332c      	adds	r3, #44	@ 0x2c
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a59      	ldr	r2, [pc, #356]	@ (80032c0 <xPortStartScheduler+0x1bc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00b      	beq.n	8003178 <xPortStartScheduler+0x74>
    __asm volatile
 8003160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003164:	f383 8811 	msr	BASEPRI, r3
 8003168:	f3bf 8f6f 	isb	sy
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	61fb      	str	r3, [r7, #28]
}
 8003172:	bf00      	nop
 8003174:	bf00      	nop
 8003176:	e7fd      	b.n	8003174 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8003178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800317a:	3338      	adds	r3, #56	@ 0x38
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a51      	ldr	r2, [pc, #324]	@ (80032c4 <xPortStartScheduler+0x1c0>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d00b      	beq.n	800319c <xPortStartScheduler+0x98>
    __asm volatile
 8003184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003188:	f383 8811 	msr	BASEPRI, r3
 800318c:	f3bf 8f6f 	isb	sy
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	61bb      	str	r3, [r7, #24]
}
 8003196:	bf00      	nop
 8003198:	bf00      	nop
 800319a:	e7fd      	b.n	8003198 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80031a0:	4b49      	ldr	r3, [pc, #292]	@ (80032c8 <xPortStartScheduler+0x1c4>)
 80031a2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80031a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80031ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ae:	22ff      	movs	r2, #255	@ 0xff
 80031b0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80031b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	4b41      	ldr	r3, [pc, #260]	@ (80032cc <xPortStartScheduler+0x1c8>)
 80031c6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80031c8:	4b40      	ldr	r3, [pc, #256]	@ (80032cc <xPortStartScheduler+0x1c8>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10b      	bne.n	80031e8 <xPortStartScheduler+0xe4>
    __asm volatile
 80031d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d4:	f383 8811 	msr	BASEPRI, r3
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	f3bf 8f4f 	dsb	sy
 80031e0:	617b      	str	r3, [r7, #20]
}
 80031e2:	bf00      	nop
 80031e4:	bf00      	nop
 80031e6:	e7fd      	b.n	80031e4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d013      	beq.n	800321e <xPortStartScheduler+0x11a>
    __asm volatile
 80031f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031fa:	f383 8811 	msr	BASEPRI, r3
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	613b      	str	r3, [r7, #16]
}
 8003208:	bf00      	nop
 800320a:	bf00      	nop
 800320c:	e7fd      	b.n	800320a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	3301      	adds	r3, #1
 8003212:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	b2db      	uxtb	r3, r3
 800321c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003226:	2b80      	cmp	r3, #128	@ 0x80
 8003228:	d0f1      	beq.n	800320e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b08      	cmp	r3, #8
 800322e:	d103      	bne.n	8003238 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8003230:	4b27      	ldr	r3, [pc, #156]	@ (80032d0 <xPortStartScheduler+0x1cc>)
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	e004      	b.n	8003242 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f1c3 0307 	rsb	r3, r3, #7
 800323e:	4a24      	ldr	r2, [pc, #144]	@ (80032d0 <xPortStartScheduler+0x1cc>)
 8003240:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003242:	4b23      	ldr	r3, [pc, #140]	@ (80032d0 <xPortStartScheduler+0x1cc>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	021b      	lsls	r3, r3, #8
 8003248:	4a21      	ldr	r2, [pc, #132]	@ (80032d0 <xPortStartScheduler+0x1cc>)
 800324a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800324c:	4b20      	ldr	r3, [pc, #128]	@ (80032d0 <xPortStartScheduler+0x1cc>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003254:	4a1e      	ldr	r2, [pc, #120]	@ (80032d0 <xPortStartScheduler+0x1cc>)
 8003256:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	b2da      	uxtb	r2, r3
 800325c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003260:	4b1c      	ldr	r3, [pc, #112]	@ (80032d4 <xPortStartScheduler+0x1d0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a1b      	ldr	r2, [pc, #108]	@ (80032d4 <xPortStartScheduler+0x1d0>)
 8003266:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800326a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800326c:	4b19      	ldr	r3, [pc, #100]	@ (80032d4 <xPortStartScheduler+0x1d0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a18      	ldr	r2, [pc, #96]	@ (80032d4 <xPortStartScheduler+0x1d0>)
 8003272:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003276:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8003278:	4b17      	ldr	r3, [pc, #92]	@ (80032d8 <xPortStartScheduler+0x1d4>)
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800327e:	f000 f96d 	bl	800355c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003282:	4b16      	ldr	r3, [pc, #88]	@ (80032dc <xPortStartScheduler+0x1d8>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003288:	f000 f98c 	bl	80035a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800328c:	4b14      	ldr	r3, [pc, #80]	@ (80032e0 <xPortStartScheduler+0x1dc>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a13      	ldr	r2, [pc, #76]	@ (80032e0 <xPortStartScheduler+0x1dc>)
 8003292:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003296:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003298:	f7ff ff1e 	bl	80030d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800329c:	f7ff fd86 	bl	8002dac <vTaskSwitchContext>
    prvTaskExitError();
 80032a0:	f7ff fed6 	bl	8003050 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3730      	adds	r7, #48	@ 0x30
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	e000ed00 	.word	0xe000ed00
 80032b4:	410fc271 	.word	0x410fc271
 80032b8:	410fc270 	.word	0x410fc270
 80032bc:	e000ed08 	.word	0xe000ed08
 80032c0:	080030b1 	.word	0x080030b1
 80032c4:	080034a1 	.word	0x080034a1
 80032c8:	e000e400 	.word	0xe000e400
 80032cc:	200001dc 	.word	0x200001dc
 80032d0:	200001e0 	.word	0x200001e0
 80032d4:	e000ed20 	.word	0xe000ed20
 80032d8:	e000ed1c 	.word	0xe000ed1c
 80032dc:	2000000c 	.word	0x2000000c
 80032e0:	e000ef34 	.word	0xe000ef34

080032e4 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80032ea:	4b38      	ldr	r3, [pc, #224]	@ (80033cc <vInitPrioGroupValue+0xe8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a38      	ldr	r2, [pc, #224]	@ (80033d0 <vInitPrioGroupValue+0xec>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d10b      	bne.n	800330c <vInitPrioGroupValue+0x28>
    __asm volatile
 80032f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f8:	f383 8811 	msr	BASEPRI, r3
 80032fc:	f3bf 8f6f 	isb	sy
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	60fb      	str	r3, [r7, #12]
}
 8003306:	bf00      	nop
 8003308:	bf00      	nop
 800330a:	e7fd      	b.n	8003308 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800330c:	4b2f      	ldr	r3, [pc, #188]	@ (80033cc <vInitPrioGroupValue+0xe8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a30      	ldr	r2, [pc, #192]	@ (80033d4 <vInitPrioGroupValue+0xf0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d10b      	bne.n	800332e <vInitPrioGroupValue+0x4a>
    __asm volatile
 8003316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800331a:	f383 8811 	msr	BASEPRI, r3
 800331e:	f3bf 8f6f 	isb	sy
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	613b      	str	r3, [r7, #16]
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	e7fd      	b.n	800332a <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800332e:	4b2a      	ldr	r3, [pc, #168]	@ (80033d8 <vInitPrioGroupValue+0xf4>)
 8003330:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	22ff      	movs	r2, #255	@ 0xff
 800333e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003350:	b2da      	uxtb	r2, r3
 8003352:	4b22      	ldr	r3, [pc, #136]	@ (80033dc <vInitPrioGroupValue+0xf8>)
 8003354:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003356:	4b22      	ldr	r3, [pc, #136]	@ (80033e0 <vInitPrioGroupValue+0xfc>)
 8003358:	2207      	movs	r2, #7
 800335a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800335c:	e009      	b.n	8003372 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800335e:	4b20      	ldr	r3, [pc, #128]	@ (80033e0 <vInitPrioGroupValue+0xfc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3b01      	subs	r3, #1
 8003364:	4a1e      	ldr	r2, [pc, #120]	@ (80033e0 <vInitPrioGroupValue+0xfc>)
 8003366:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	b2db      	uxtb	r3, r3
 8003370:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003372:	78fb      	ldrb	r3, [r7, #3]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800337a:	2b80      	cmp	r3, #128	@ 0x80
 800337c:	d0ef      	beq.n	800335e <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800337e:	4b18      	ldr	r3, [pc, #96]	@ (80033e0 <vInitPrioGroupValue+0xfc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f1c3 0307 	rsb	r3, r3, #7
 8003386:	2b04      	cmp	r3, #4
 8003388:	d00b      	beq.n	80033a2 <vInitPrioGroupValue+0xbe>
    __asm volatile
 800338a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338e:	f383 8811 	msr	BASEPRI, r3
 8003392:	f3bf 8f6f 	isb	sy
 8003396:	f3bf 8f4f 	dsb	sy
 800339a:	60bb      	str	r3, [r7, #8]
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	e7fd      	b.n	800339e <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80033a2:	4b0f      	ldr	r3, [pc, #60]	@ (80033e0 <vInitPrioGroupValue+0xfc>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	4a0d      	ldr	r2, [pc, #52]	@ (80033e0 <vInitPrioGroupValue+0xfc>)
 80033aa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80033ac:	4b0c      	ldr	r3, [pc, #48]	@ (80033e0 <vInitPrioGroupValue+0xfc>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80033b4:	4a0a      	ldr	r2, [pc, #40]	@ (80033e0 <vInitPrioGroupValue+0xfc>)
 80033b6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80033c0:	bf00      	nop
 80033c2:	371c      	adds	r7, #28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	e000ed00 	.word	0xe000ed00
 80033d0:	410fc271 	.word	0x410fc271
 80033d4:	410fc270 	.word	0x410fc270
 80033d8:	e000e400 	.word	0xe000e400
 80033dc:	200001dc 	.word	0x200001dc
 80033e0:	200001e0 	.word	0x200001e0

080033e4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
    __asm volatile
 80033ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	607b      	str	r3, [r7, #4]
}
 80033fc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80033fe:	4b10      	ldr	r3, [pc, #64]	@ (8003440 <vPortEnterCritical+0x5c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3301      	adds	r3, #1
 8003404:	4a0e      	ldr	r2, [pc, #56]	@ (8003440 <vPortEnterCritical+0x5c>)
 8003406:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003408:	4b0d      	ldr	r3, [pc, #52]	@ (8003440 <vPortEnterCritical+0x5c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d110      	bne.n	8003432 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003410:	4b0c      	ldr	r3, [pc, #48]	@ (8003444 <vPortEnterCritical+0x60>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00b      	beq.n	8003432 <vPortEnterCritical+0x4e>
    __asm volatile
 800341a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800341e:	f383 8811 	msr	BASEPRI, r3
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	603b      	str	r3, [r7, #0]
}
 800342c:	bf00      	nop
 800342e:	bf00      	nop
 8003430:	e7fd      	b.n	800342e <vPortEnterCritical+0x4a>
    }
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	2000000c 	.word	0x2000000c
 8003444:	e000ed04 	.word	0xe000ed04

08003448 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800344e:	4b12      	ldr	r3, [pc, #72]	@ (8003498 <vPortExitCritical+0x50>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10b      	bne.n	800346e <vPortExitCritical+0x26>
    __asm volatile
 8003456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800345a:	f383 8811 	msr	BASEPRI, r3
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	607b      	str	r3, [r7, #4]
}
 8003468:	bf00      	nop
 800346a:	bf00      	nop
 800346c:	e7fd      	b.n	800346a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800346e:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <vPortExitCritical+0x50>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3b01      	subs	r3, #1
 8003474:	4a08      	ldr	r2, [pc, #32]	@ (8003498 <vPortExitCritical+0x50>)
 8003476:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003478:	4b07      	ldr	r3, [pc, #28]	@ (8003498 <vPortExitCritical+0x50>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d105      	bne.n	800348c <vPortExitCritical+0x44>
 8003480:	2300      	movs	r3, #0
 8003482:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800348a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	2000000c 	.word	0x2000000c
 800349c:	00000000 	.word	0x00000000

080034a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80034a0:	f3ef 8009 	mrs	r0, PSP
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	4b15      	ldr	r3, [pc, #84]	@ (8003500 <pxCurrentTCBConst>)
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	f01e 0f10 	tst.w	lr, #16
 80034b0:	bf08      	it	eq
 80034b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80034b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034ba:	6010      	str	r0, [r2, #0]
 80034bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80034c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80034c4:	f380 8811 	msr	BASEPRI, r0
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	f3bf 8f6f 	isb	sy
 80034d0:	f7ff fc6c 	bl	8002dac <vTaskSwitchContext>
 80034d4:	f04f 0000 	mov.w	r0, #0
 80034d8:	f380 8811 	msr	BASEPRI, r0
 80034dc:	bc09      	pop	{r0, r3}
 80034de:	6819      	ldr	r1, [r3, #0]
 80034e0:	6808      	ldr	r0, [r1, #0]
 80034e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034e6:	f01e 0f10 	tst.w	lr, #16
 80034ea:	bf08      	it	eq
 80034ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80034f0:	f380 8809 	msr	PSP, r0
 80034f4:	f3bf 8f6f 	isb	sy
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	f3af 8000 	nop.w

08003500 <pxCurrentTCBConst>:
 8003500:	200000d8 	.word	0x200000d8
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop

08003508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
    __asm volatile
 800350e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003512:	f383 8811 	msr	BASEPRI, r3
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	607b      	str	r3, [r7, #4]
}
 8003520:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8003522:	f002 f957 	bl	80057d4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003526:	f7ff fb1f 	bl	8002b68 <xTaskIncrementTick>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d006      	beq.n	800353e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8003530:	f002 f9ae 	bl	8005890 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003534:	4b08      	ldr	r3, [pc, #32]	@ (8003558 <SysTick_Handler+0x50>)
 8003536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	e001      	b.n	8003542 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800353e:	f002 f98b 	bl	8005858 <SEGGER_SYSVIEW_RecordExitISR>
 8003542:	2300      	movs	r3, #0
 8003544:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	f383 8811 	msr	BASEPRI, r3
}
 800354c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	e000ed04 	.word	0xe000ed04

0800355c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003560:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <vPortSetupTimerInterrupt+0x34>)
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003566:	4b0b      	ldr	r3, [pc, #44]	@ (8003594 <vPortSetupTimerInterrupt+0x38>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800356c:	4b0a      	ldr	r3, [pc, #40]	@ (8003598 <vPortSetupTimerInterrupt+0x3c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a0a      	ldr	r2, [pc, #40]	@ (800359c <vPortSetupTimerInterrupt+0x40>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	099b      	lsrs	r3, r3, #6
 8003578:	4a09      	ldr	r2, [pc, #36]	@ (80035a0 <vPortSetupTimerInterrupt+0x44>)
 800357a:	3b01      	subs	r3, #1
 800357c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800357e:	4b04      	ldr	r3, [pc, #16]	@ (8003590 <vPortSetupTimerInterrupt+0x34>)
 8003580:	2207      	movs	r2, #7
 8003582:	601a      	str	r2, [r3, #0]
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	e000e010 	.word	0xe000e010
 8003594:	e000e018 	.word	0xe000e018
 8003598:	20000000 	.word	0x20000000
 800359c:	10624dd3 	.word	0x10624dd3
 80035a0:	e000e014 	.word	0xe000e014

080035a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80035a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80035b4 <vPortEnableVFP+0x10>
 80035a8:	6801      	ldr	r1, [r0, #0]
 80035aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80035ae:	6001      	str	r1, [r0, #0]
 80035b0:	4770      	bx	lr
 80035b2:	0000      	.short	0x0000
 80035b4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80035b8:	bf00      	nop
 80035ba:	bf00      	nop

080035bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80035c2:	f3ef 8305 	mrs	r3, IPSR
 80035c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2b0f      	cmp	r3, #15
 80035cc:	d915      	bls.n	80035fa <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80035ce:	4a18      	ldr	r2, [pc, #96]	@ (8003630 <vPortValidateInterruptPriority+0x74>)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4413      	add	r3, r2
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80035d8:	4b16      	ldr	r3, [pc, #88]	@ (8003634 <vPortValidateInterruptPriority+0x78>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	7afa      	ldrb	r2, [r7, #11]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d20b      	bcs.n	80035fa <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 80035e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e6:	f383 8811 	msr	BASEPRI, r3
 80035ea:	f3bf 8f6f 	isb	sy
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	607b      	str	r3, [r7, #4]
}
 80035f4:	bf00      	nop
 80035f6:	bf00      	nop
 80035f8:	e7fd      	b.n	80035f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80035fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003638 <vPortValidateInterruptPriority+0x7c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003602:	4b0e      	ldr	r3, [pc, #56]	@ (800363c <vPortValidateInterruptPriority+0x80>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d90b      	bls.n	8003622 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800360a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800360e:	f383 8811 	msr	BASEPRI, r3
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	603b      	str	r3, [r7, #0]
}
 800361c:	bf00      	nop
 800361e:	bf00      	nop
 8003620:	e7fd      	b.n	800361e <vPortValidateInterruptPriority+0x62>
    }
 8003622:	bf00      	nop
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	e000e3f0 	.word	0xe000e3f0
 8003634:	200001dc 	.word	0x200001dc
 8003638:	e000ed0c 	.word	0xe000ed0c
 800363c:	200001e0 	.word	0x200001e0

08003640 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08e      	sub	sp, #56	@ 0x38
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003648:	2300      	movs	r3, #0
 800364a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d022      	beq.n	8003698 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8003652:	2308      	movs	r3, #8
 8003654:	43db      	mvns	r3, r3
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	429a      	cmp	r2, r3
 800365a:	d81b      	bhi.n	8003694 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800365c:	2208      	movs	r2, #8
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	2b00      	cmp	r3, #0
 800366c:	d014      	beq.n	8003698 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	f1c3 0308 	rsb	r3, r3, #8
 8003678:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800367a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367c:	43db      	mvns	r3, r3
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	429a      	cmp	r2, r3
 8003682:	d804      	bhi.n	800368e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003688:	4413      	add	r3, r2
 800368a:	607b      	str	r3, [r7, #4]
 800368c:	e004      	b.n	8003698 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	607b      	str	r3, [r7, #4]
 8003692:	e001      	b.n	8003698 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8003698:	f7ff f930 	bl	80028fc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800369c:	4b7a      	ldr	r3, [pc, #488]	@ (8003888 <pvPortMalloc+0x248>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80036a4:	f000 f974 	bl	8003990 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f2c0 80d3 	blt.w	8003856 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80cf 	beq.w	8003856 <pvPortMalloc+0x216>
 80036b8:	4b74      	ldr	r3, [pc, #464]	@ (800388c <pvPortMalloc+0x24c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	429a      	cmp	r2, r3
 80036c0:	f200 80c9 	bhi.w	8003856 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80036c4:	4b72      	ldr	r3, [pc, #456]	@ (8003890 <pvPortMalloc+0x250>)
 80036c6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80036c8:	4b71      	ldr	r3, [pc, #452]	@ (8003890 <pvPortMalloc+0x250>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80036ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036d0:	4a70      	ldr	r2, [pc, #448]	@ (8003894 <pvPortMalloc+0x254>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d305      	bcc.n	80036e2 <pvPortMalloc+0xa2>
 80036d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036d8:	4a6f      	ldr	r2, [pc, #444]	@ (8003898 <pvPortMalloc+0x258>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d801      	bhi.n	80036e2 <pvPortMalloc+0xa2>
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <pvPortMalloc+0xa4>
 80036e2:	2300      	movs	r3, #0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d129      	bne.n	800373c <pvPortMalloc+0xfc>
    __asm volatile
 80036e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	623b      	str	r3, [r7, #32]
}
 80036fa:	bf00      	nop
 80036fc:	bf00      	nop
 80036fe:	e7fd      	b.n	80036fc <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8003700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003702:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800370a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800370c:	4a61      	ldr	r2, [pc, #388]	@ (8003894 <pvPortMalloc+0x254>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d305      	bcc.n	800371e <pvPortMalloc+0xde>
 8003712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003714:	4a60      	ldr	r2, [pc, #384]	@ (8003898 <pvPortMalloc+0x258>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d801      	bhi.n	800371e <pvPortMalloc+0xde>
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <pvPortMalloc+0xe0>
 800371e:	2300      	movs	r3, #0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10b      	bne.n	800373c <pvPortMalloc+0xfc>
    __asm volatile
 8003724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	61fb      	str	r3, [r7, #28]
}
 8003736:	bf00      	nop
 8003738:	bf00      	nop
 800373a:	e7fd      	b.n	8003738 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800373c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	429a      	cmp	r2, r3
 8003744:	d903      	bls.n	800374e <pvPortMalloc+0x10e>
 8003746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1d8      	bne.n	8003700 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800374e:	4b4e      	ldr	r3, [pc, #312]	@ (8003888 <pvPortMalloc+0x248>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003754:	429a      	cmp	r2, r3
 8003756:	d07e      	beq.n	8003856 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8003758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2208      	movs	r2, #8
 800375e:	4413      	add	r3, r2
 8003760:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8003762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003764:	4a4b      	ldr	r2, [pc, #300]	@ (8003894 <pvPortMalloc+0x254>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d305      	bcc.n	8003776 <pvPortMalloc+0x136>
 800376a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800376c:	4a4a      	ldr	r2, [pc, #296]	@ (8003898 <pvPortMalloc+0x258>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d801      	bhi.n	8003776 <pvPortMalloc+0x136>
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <pvPortMalloc+0x138>
 8003776:	2300      	movs	r3, #0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10b      	bne.n	8003794 <pvPortMalloc+0x154>
    __asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	61bb      	str	r3, [r7, #24]
}
 800378e:	bf00      	nop
 8003790:	bf00      	nop
 8003792:	e7fd      	b.n	8003790 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800379c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d90b      	bls.n	80037be <pvPortMalloc+0x17e>
    __asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	617b      	str	r3, [r7, #20]
}
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	e7fd      	b.n	80037ba <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80037be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	1ad2      	subs	r2, r2, r3
 80037c6:	2308      	movs	r3, #8
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d924      	bls.n	8003818 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80037ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4413      	add	r3, r2
 80037d4:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00b      	beq.n	80037f8 <pvPortMalloc+0x1b8>
    __asm volatile
 80037e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	613b      	str	r3, [r7, #16]
}
 80037f2:	bf00      	nop
 80037f4:	bf00      	nop
 80037f6:	e7fd      	b.n	80037f4 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80037f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	1ad2      	subs	r2, r2, r3
 8003800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003802:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800380a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003810:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8003812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003816:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003818:	4b1c      	ldr	r3, [pc, #112]	@ (800388c <pvPortMalloc+0x24c>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	4a1a      	ldr	r2, [pc, #104]	@ (800388c <pvPortMalloc+0x24c>)
 8003824:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003826:	4b19      	ldr	r3, [pc, #100]	@ (800388c <pvPortMalloc+0x24c>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4b1c      	ldr	r3, [pc, #112]	@ (800389c <pvPortMalloc+0x25c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d203      	bcs.n	800383a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003832:	4b16      	ldr	r3, [pc, #88]	@ (800388c <pvPortMalloc+0x24c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a19      	ldr	r2, [pc, #100]	@ (800389c <pvPortMalloc+0x25c>)
 8003838:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800383a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003844:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800384c:	4b14      	ldr	r3, [pc, #80]	@ (80038a0 <pvPortMalloc+0x260>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3301      	adds	r3, #1
 8003852:	4a13      	ldr	r2, [pc, #76]	@ (80038a0 <pvPortMalloc+0x260>)
 8003854:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003856:	f7ff f85f 	bl	8002918 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800385a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00b      	beq.n	800387c <pvPortMalloc+0x23c>
    __asm volatile
 8003864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	60fb      	str	r3, [r7, #12]
}
 8003876:	bf00      	nop
 8003878:	bf00      	nop
 800387a:	e7fd      	b.n	8003878 <pvPortMalloc+0x238>
    return pvReturn;
 800387c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800387e:	4618      	mov	r0, r3
 8003880:	3738      	adds	r7, #56	@ 0x38
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20012dec 	.word	0x20012dec
 800388c:	20012df0 	.word	0x20012df0
 8003890:	20012de4 	.word	0x20012de4
 8003894:	200001e4 	.word	0x200001e4
 8003898:	20012de3 	.word	0x20012de3
 800389c:	20012df4 	.word	0x20012df4
 80038a0:	20012df8 	.word	0x20012df8

080038a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b088      	sub	sp, #32
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d060      	beq.n	8003978 <vPortFree+0xd4>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80038b6:	2308      	movs	r3, #8
 80038b8:	425b      	negs	r3, r3
 80038ba:	69fa      	ldr	r2, [r7, #28]
 80038bc:	4413      	add	r3, r2
 80038be:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	4a2e      	ldr	r2, [pc, #184]	@ (8003980 <vPortFree+0xdc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d305      	bcc.n	80038d8 <vPortFree+0x34>
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	4a2d      	ldr	r2, [pc, #180]	@ (8003984 <vPortFree+0xe0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d801      	bhi.n	80038d8 <vPortFree+0x34>
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <vPortFree+0x36>
 80038d8:	2300      	movs	r3, #0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10b      	bne.n	80038f6 <vPortFree+0x52>
    __asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	617b      	str	r3, [r7, #20]
}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	e7fd      	b.n	80038f2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	db0b      	blt.n	8003916 <vPortFree+0x72>
    __asm volatile
 80038fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	613b      	str	r3, [r7, #16]
}
 8003910:	bf00      	nop
 8003912:	bf00      	nop
 8003914:	e7fd      	b.n	8003912 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00b      	beq.n	8003936 <vPortFree+0x92>
    __asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	60fb      	str	r3, [r7, #12]
}
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	e7fd      	b.n	8003932 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	da1c      	bge.n	8003978 <vPortFree+0xd4>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d118      	bne.n	8003978 <vPortFree+0xd4>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8003952:	f7fe ffd3 	bl	80028fc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	4b0b      	ldr	r3, [pc, #44]	@ (8003988 <vPortFree+0xe4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4413      	add	r3, r2
 8003960:	4a09      	ldr	r2, [pc, #36]	@ (8003988 <vPortFree+0xe4>)
 8003962:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003964:	69b8      	ldr	r0, [r7, #24]
 8003966:	f000 f86d 	bl	8003a44 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800396a:	4b08      	ldr	r3, [pc, #32]	@ (800398c <vPortFree+0xe8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3301      	adds	r3, #1
 8003970:	4a06      	ldr	r2, [pc, #24]	@ (800398c <vPortFree+0xe8>)
 8003972:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003974:	f7fe ffd0 	bl	8002918 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003978:	bf00      	nop
 800397a:	3720      	adds	r7, #32
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	200001e4 	.word	0x200001e4
 8003984:	20012de3 	.word	0x20012de3
 8003988:	20012df0 	.word	0x20012df0
 800398c:	20012dfc 	.word	0x20012dfc

08003990 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003996:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800399a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800399c:	4b24      	ldr	r3, [pc, #144]	@ (8003a30 <prvHeapInit+0xa0>)
 800399e:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00c      	beq.n	80039c4 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	3307      	adds	r3, #7
 80039ae:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0307 	bic.w	r3, r3, #7
 80039b6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	4a1c      	ldr	r2, [pc, #112]	@ (8003a30 <prvHeapInit+0xa0>)
 80039c0:	4413      	add	r3, r2
 80039c2:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003a34 <prvHeapInit+0xa4>)
 80039c8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80039ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003a34 <prvHeapInit+0xa4>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	4413      	add	r3, r2
 80039d6:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80039d8:	2208      	movs	r2, #8
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	1a9b      	subs	r3, r3, r2
 80039de:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f023 0307 	bic.w	r3, r3, #7
 80039e6:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a13      	ldr	r2, [pc, #76]	@ (8003a38 <prvHeapInit+0xa8>)
 80039ec:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80039ee:	4b12      	ldr	r3, [pc, #72]	@ (8003a38 <prvHeapInit+0xa8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2200      	movs	r2, #0
 80039f4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80039f6:	4b10      	ldr	r3, [pc, #64]	@ (8003a38 <prvHeapInit+0xa8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	1ad2      	subs	r2, r2, r3
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a38 <prvHeapInit+0xa8>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	4a08      	ldr	r2, [pc, #32]	@ (8003a3c <prvHeapInit+0xac>)
 8003a1a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	4a07      	ldr	r2, [pc, #28]	@ (8003a40 <prvHeapInit+0xb0>)
 8003a22:	6013      	str	r3, [r2, #0]
}
 8003a24:	bf00      	nop
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	200001e4 	.word	0x200001e4
 8003a34:	20012de4 	.word	0x20012de4
 8003a38:	20012dec 	.word	0x20012dec
 8003a3c:	20012df4 	.word	0x20012df4
 8003a40:	20012df0 	.word	0x20012df0

08003a44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003a4c:	4b36      	ldr	r3, [pc, #216]	@ (8003b28 <prvInsertBlockIntoFreeList+0xe4>)
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	e002      	b.n	8003a58 <prvInsertBlockIntoFreeList+0x14>
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d8f7      	bhi.n	8003a52 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	4a30      	ldr	r2, [pc, #192]	@ (8003b28 <prvInsertBlockIntoFreeList+0xe4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d018      	beq.n	8003a9c <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	4a2f      	ldr	r2, [pc, #188]	@ (8003b2c <prvInsertBlockIntoFreeList+0xe8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d305      	bcc.n	8003a7e <prvInsertBlockIntoFreeList+0x3a>
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	4a2e      	ldr	r2, [pc, #184]	@ (8003b30 <prvInsertBlockIntoFreeList+0xec>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d801      	bhi.n	8003a7e <prvInsertBlockIntoFreeList+0x3a>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <prvInsertBlockIntoFreeList+0x3c>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10b      	bne.n	8003a9c <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	60fb      	str	r3, [r7, #12]
}
 8003a96:	bf00      	nop
 8003a98:	bf00      	nop
 8003a9a:	e7fd      	b.n	8003a98 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d108      	bne.n	8003ac0 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	441a      	add	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	441a      	add	r2, r3
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d118      	bne.n	8003b06 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	4b16      	ldr	r3, [pc, #88]	@ (8003b34 <prvInsertBlockIntoFreeList+0xf0>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d00d      	beq.n	8003afc <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	441a      	add	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	e008      	b.n	8003b0e <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003afc:	4b0d      	ldr	r3, [pc, #52]	@ (8003b34 <prvInsertBlockIntoFreeList+0xf0>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	e003      	b.n	8003b0e <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d002      	beq.n	8003b1c <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b1c:	bf00      	nop
 8003b1e:	371c      	adds	r7, #28
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	20012de4 	.word	0x20012de4
 8003b2c:	200001e4 	.word	0x200001e4
 8003b30:	20012de3 	.word	0x20012de3
 8003b34:	20012dec 	.word	0x20012dec

08003b38 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003b3c:	4803      	ldr	r0, [pc, #12]	@ (8003b4c <_cbSendSystemDesc+0x14>)
 8003b3e:	f001 fdf3 	bl	8005728 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003b42:	4803      	ldr	r0, [pc, #12]	@ (8003b50 <_cbSendSystemDesc+0x18>)
 8003b44:	f001 fdf0 	bl	8005728 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003b48:	bf00      	nop
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	08006f18 	.word	0x08006f18
 8003b50:	08006f50 	.word	0x08006f50

08003b54 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003b58:	4b06      	ldr	r3, [pc, #24]	@ (8003b74 <SEGGER_SYSVIEW_Conf+0x20>)
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	4b05      	ldr	r3, [pc, #20]	@ (8003b74 <SEGGER_SYSVIEW_Conf+0x20>)
 8003b5e:	6819      	ldr	r1, [r3, #0]
 8003b60:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <SEGGER_SYSVIEW_Conf+0x24>)
 8003b62:	4a06      	ldr	r2, [pc, #24]	@ (8003b7c <SEGGER_SYSVIEW_Conf+0x28>)
 8003b64:	f001 fa66 	bl	8005034 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003b68:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003b6c:	f001 faa6 	bl	80050bc <SEGGER_SYSVIEW_SetRAMBase>
}
 8003b70:	bf00      	nop
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20000000 	.word	0x20000000
 8003b78:	08003b39 	.word	0x08003b39
 8003b7c:	08006ff0 	.word	0x08006ff0

08003b80 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003b86:	2300      	movs	r3, #0
 8003b88:	607b      	str	r3, [r7, #4]
 8003b8a:	e033      	b.n	8003bf4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003b8c:	491e      	ldr	r1, [pc, #120]	@ (8003c08 <_cbSendTaskList+0x88>)
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	491a      	ldr	r1, [pc, #104]	@ (8003c08 <_cbSendTaskList+0x88>)
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	3304      	adds	r3, #4
 8003bac:	6819      	ldr	r1, [r3, #0]
 8003bae:	4c16      	ldr	r4, [pc, #88]	@ (8003c08 <_cbSendTaskList+0x88>)
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4423      	add	r3, r4
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	681c      	ldr	r4, [r3, #0]
 8003bc0:	4d11      	ldr	r5, [pc, #68]	@ (8003c08 <_cbSendTaskList+0x88>)
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	442b      	add	r3, r5
 8003bce:	330c      	adds	r3, #12
 8003bd0:	681d      	ldr	r5, [r3, #0]
 8003bd2:	4e0d      	ldr	r6, [pc, #52]	@ (8003c08 <_cbSendTaskList+0x88>)
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4433      	add	r3, r6
 8003be0:	3310      	adds	r3, #16
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	462b      	mov	r3, r5
 8003be8:	4622      	mov	r2, r4
 8003bea:	f000 f8bd 	bl	8003d68 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	607b      	str	r3, [r7, #4]
 8003bf4:	4b05      	ldr	r3, [pc, #20]	@ (8003c0c <_cbSendTaskList+0x8c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d3c6      	bcc.n	8003b8c <_cbSendTaskList+0xc>
  }
}
 8003bfe:	bf00      	nop
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c08:	20012e00 	.word	0x20012e00
 8003c0c:	20012ea0 	.word	0x20012ea0

08003c10 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003c18:	f7fe ff90 	bl	8002b3c <xTaskGetTickCountFromISR>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2200      	movs	r2, #0
 8003c20:	469a      	mov	sl, r3
 8003c22:	4693      	mov	fp, r2
 8003c24:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003c28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	f04f 0a00 	mov.w	sl, #0
 8003c34:	f04f 0b00 	mov.w	fp, #0
 8003c38:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003c3c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003c40:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003c44:	4652      	mov	r2, sl
 8003c46:	465b      	mov	r3, fp
 8003c48:	1a14      	subs	r4, r2, r0
 8003c4a:	eb63 0501 	sbc.w	r5, r3, r1
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	f04f 0300 	mov.w	r3, #0
 8003c56:	00ab      	lsls	r3, r5, #2
 8003c58:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003c5c:	00a2      	lsls	r2, r4, #2
 8003c5e:	4614      	mov	r4, r2
 8003c60:	461d      	mov	r5, r3
 8003c62:	eb14 0800 	adds.w	r8, r4, r0
 8003c66:	eb45 0901 	adc.w	r9, r5, r1
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c7e:	4690      	mov	r8, r2
 8003c80:	4699      	mov	r9, r3
 8003c82:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003c86:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003c98 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003ca6:	2205      	movs	r2, #5
 8003ca8:	492b      	ldr	r1, [pc, #172]	@ (8003d58 <SYSVIEW_AddTask+0xc0>)
 8003caa:	68b8      	ldr	r0, [r7, #8]
 8003cac:	f002 fa40 	bl	8006130 <memcmp>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d04b      	beq.n	8003d4e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003cb6:	4b29      	ldr	r3, [pc, #164]	@ (8003d5c <SYSVIEW_AddTask+0xc4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b07      	cmp	r3, #7
 8003cbc:	d903      	bls.n	8003cc6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003cbe:	4828      	ldr	r0, [pc, #160]	@ (8003d60 <SYSVIEW_AddTask+0xc8>)
 8003cc0:	f002 f872 	bl	8005da8 <SEGGER_SYSVIEW_Warn>
    return;
 8003cc4:	e044      	b.n	8003d50 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003cc6:	4b25      	ldr	r3, [pc, #148]	@ (8003d5c <SYSVIEW_AddTask+0xc4>)
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	4926      	ldr	r1, [pc, #152]	@ (8003d64 <SYSVIEW_AddTask+0xcc>)
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003cda:	4b20      	ldr	r3, [pc, #128]	@ (8003d5c <SYSVIEW_AddTask+0xc4>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	4921      	ldr	r1, [pc, #132]	@ (8003d64 <SYSVIEW_AddTask+0xcc>)
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	3304      	adds	r3, #4
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d5c <SYSVIEW_AddTask+0xc4>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	491b      	ldr	r1, [pc, #108]	@ (8003d64 <SYSVIEW_AddTask+0xcc>)
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	440b      	add	r3, r1
 8003d00:	3308      	adds	r3, #8
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003d06:	4b15      	ldr	r3, [pc, #84]	@ (8003d5c <SYSVIEW_AddTask+0xc4>)
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	4916      	ldr	r1, [pc, #88]	@ (8003d64 <SYSVIEW_AddTask+0xcc>)
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	330c      	adds	r3, #12
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d5c <SYSVIEW_AddTask+0xc4>)
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	4910      	ldr	r1, [pc, #64]	@ (8003d64 <SYSVIEW_AddTask+0xcc>)
 8003d22:	4613      	mov	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	3310      	adds	r3, #16
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003d32:	4b0a      	ldr	r3, [pc, #40]	@ (8003d5c <SYSVIEW_AddTask+0xc4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3301      	adds	r3, #1
 8003d38:	4a08      	ldr	r2, [pc, #32]	@ (8003d5c <SYSVIEW_AddTask+0xc4>)
 8003d3a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f80e 	bl	8003d68 <SYSVIEW_SendTaskInfo>
 8003d4c:	e000      	b.n	8003d50 <SYSVIEW_AddTask+0xb8>
    return;
 8003d4e:	bf00      	nop

}
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	08006f60 	.word	0x08006f60
 8003d5c:	20012ea0 	.word	0x20012ea0
 8003d60:	08006f68 	.word	0x08006f68
 8003d64:	20012e00 	.word	0x20012e00

08003d68 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08a      	sub	sp, #40	@ 0x28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
 8003d74:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003d76:	f107 0310 	add.w	r3, r7, #16
 8003d7a:	2218      	movs	r2, #24
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f002 f9e6 	bl	8006150 <memset>
  TaskInfo.TaskID     = TaskID;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8003d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d96:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003d98:	f107 0310 	add.w	r3, r7, #16
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f001 fbcb 	bl	8005538 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003da2:	bf00      	nop
 8003da4:	3728      	adds	r7, #40	@ 0x28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003db2:	4b26      	ldr	r3, [pc, #152]	@ (8003e4c <_DoInit+0xa0>)
 8003db4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003db6:	22a8      	movs	r2, #168	@ 0xa8
 8003db8:	2100      	movs	r1, #0
 8003dba:	6838      	ldr	r0, [r7, #0]
 8003dbc:	f002 f9c8 	bl	8006150 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2203      	movs	r2, #3
 8003dca:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	4a20      	ldr	r2, [pc, #128]	@ (8003e50 <_DoInit+0xa4>)
 8003dd0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	4a1f      	ldr	r2, [pc, #124]	@ (8003e54 <_DoInit+0xa8>)
 8003dd6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dde:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2200      	movs	r2, #0
 8003de4:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2200      	movs	r2, #0
 8003dea:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	2200      	movs	r2, #0
 8003df0:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	4a16      	ldr	r2, [pc, #88]	@ (8003e50 <_DoInit+0xa4>)
 8003df6:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	4a17      	ldr	r2, [pc, #92]	@ (8003e58 <_DoInit+0xac>)
 8003dfc:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2210      	movs	r2, #16
 8003e02:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2200      	movs	r2, #0
 8003e08:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2200      	movs	r2, #0
 8003e14:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003e16:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	607b      	str	r3, [r7, #4]
 8003e1e:	e00c      	b.n	8003e3a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f1c3 030f 	rsb	r3, r3, #15
 8003e26:	4a0d      	ldr	r2, [pc, #52]	@ (8003e5c <_DoInit+0xb0>)
 8003e28:	5cd1      	ldrb	r1, [r2, r3]
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4413      	add	r3, r2
 8003e30:	460a      	mov	r2, r1
 8003e32:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3301      	adds	r3, #1
 8003e38:	607b      	str	r3, [r7, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b0f      	cmp	r3, #15
 8003e3e:	d9ef      	bls.n	8003e20 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003e40:	f3bf 8f5f 	dmb	sy
}
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20012ea4 	.word	0x20012ea4
 8003e50:	08006fb8 	.word	0x08006fb8
 8003e54:	20012f4c 	.word	0x20012f4c
 8003e58:	2001334c 	.word	0x2001334c
 8003e5c:	08006ff8 	.word	0x08006ff8

08003e60 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	@ 0x28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d905      	bls.n	8003e90 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e8e:	e007      	b.n	8003ea0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	69b9      	ldr	r1, [r7, #24]
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	1acb      	subs	r3, r1, r3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	bf28      	it	cs
 8003eae:	4613      	movcs	r3, r2
 8003eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	bf28      	it	cs
 8003eba:	4613      	movcs	r3, r2
 8003ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eca:	68b9      	ldr	r1, [r7, #8]
 8003ecc:	6978      	ldr	r0, [r7, #20]
 8003ece:	f002 f974 	bl	80061ba <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003ed2:	6a3a      	ldr	r2, [r7, #32]
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed6:	4413      	add	r3, r2
 8003ed8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ede:	4413      	add	r3, r2
 8003ee0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eee:	4413      	add	r3, r2
 8003ef0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d101      	bne.n	8003f00 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003efc:	2300      	movs	r3, #0
 8003efe:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f00:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	69fa      	ldr	r2, [r7, #28]
 8003f08:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1b2      	bne.n	8003e76 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003f10:	6a3b      	ldr	r3, [r7, #32]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3728      	adds	r7, #40	@ 0x28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b088      	sub	sp, #32
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	60f8      	str	r0, [r7, #12]
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d911      	bls.n	8003f62 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	4413      	add	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	6938      	ldr	r0, [r7, #16]
 8003f4e:	f002 f934 	bl	80061ba <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f52:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	441a      	add	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003f60:	e01f      	b.n	8003fa2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	68b9      	ldr	r1, [r7, #8]
 8003f74:	6938      	ldr	r0, [r7, #16]
 8003f76:	f002 f920 	bl	80061ba <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4619      	mov	r1, r3
 8003f92:	6938      	ldr	r0, [r7, #16]
 8003f94:	f002 f911 	bl	80061ba <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f98:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	60da      	str	r2, [r3, #12]
}
 8003fa2:	bf00      	nop
 8003fa4:	3720      	adds	r7, #32
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003faa:	b480      	push	{r7}
 8003fac:	b087      	sub	sp, #28
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d808      	bhi.n	8003fd8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	1ad2      	subs	r2, r2, r3
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	e004      	b.n	8003fe2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003fe2:	697b      	ldr	r3, [r7, #20]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	371c      	adds	r7, #28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08c      	sub	sp, #48	@ 0x30
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003ffc:	4b3e      	ldr	r3, [pc, #248]	@ (80040f8 <SEGGER_RTT_ReadNoLock+0x108>)
 8003ffe:	623b      	str	r3, [r7, #32]
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b53      	cmp	r3, #83	@ 0x53
 8004008:	d001      	beq.n	800400e <SEGGER_RTT_ReadNoLock+0x1e>
 800400a:	f7ff fecf 	bl	8003dac <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4613      	mov	r3, r2
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	4413      	add	r3, r2
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	3360      	adds	r3, #96	@ 0x60
 800401a:	4a37      	ldr	r2, [pc, #220]	@ (80040f8 <SEGGER_RTT_ReadNoLock+0x108>)
 800401c:	4413      	add	r3, r2
 800401e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004030:	2300      	movs	r3, #0
 8004032:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004034:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	429a      	cmp	r2, r3
 800403a:	d92b      	bls.n	8004094 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4293      	cmp	r3, r2
 800404c:	bf28      	it	cs
 800404e:	4613      	movcs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004058:	4413      	add	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	6939      	ldr	r1, [r7, #16]
 8004060:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004062:	f002 f8aa 	bl	80061ba <memcpy>
    NumBytesRead += NumBytesRem;
 8004066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	4413      	add	r3, r2
 800406c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800406e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	4413      	add	r3, r2
 8004074:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800407e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	4413      	add	r3, r2
 8004084:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800408c:	429a      	cmp	r2, r3
 800408e:	d101      	bne.n	8004094 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004090:	2300      	movs	r3, #0
 8004092:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4293      	cmp	r3, r2
 80040a2:	bf28      	it	cs
 80040a4:	4613      	movcs	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d019      	beq.n	80040e2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b4:	4413      	add	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	6939      	ldr	r1, [r7, #16]
 80040bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040be:	f002 f87c 	bl	80061ba <memcpy>
    NumBytesRead += NumBytesRem;
 80040c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	4413      	add	r3, r2
 80040c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80040ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	4413      	add	r3, r2
 80040d0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80040da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	4413      	add	r3, r2
 80040e0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80040e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040ec:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80040ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3730      	adds	r7, #48	@ 0x30
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20012ea4 	.word	0x20012ea4

080040fc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	4613      	mov	r3, r2
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	4413      	add	r3, r2
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	4a1f      	ldr	r2, [pc, #124]	@ (8004198 <SEGGER_RTT_WriteNoLock+0x9c>)
 800411a:	4413      	add	r3, r2
 800411c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d029      	beq.n	800417a <SEGGER_RTT_WriteNoLock+0x7e>
 8004126:	2b02      	cmp	r3, #2
 8004128:	d82e      	bhi.n	8004188 <SEGGER_RTT_WriteNoLock+0x8c>
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <SEGGER_RTT_WriteNoLock+0x38>
 800412e:	2b01      	cmp	r3, #1
 8004130:	d013      	beq.n	800415a <SEGGER_RTT_WriteNoLock+0x5e>
 8004132:	e029      	b.n	8004188 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004134:	6978      	ldr	r0, [r7, #20]
 8004136:	f7ff ff38 	bl	8003faa <_GetAvailWriteSpace>
 800413a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	429a      	cmp	r2, r3
 8004142:	d202      	bcs.n	800414a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004144:	2300      	movs	r3, #0
 8004146:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004148:	e021      	b.n	800418e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	69b9      	ldr	r1, [r7, #24]
 8004152:	6978      	ldr	r0, [r7, #20]
 8004154:	f7ff fee1 	bl	8003f1a <_WriteNoCheck>
    break;
 8004158:	e019      	b.n	800418e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800415a:	6978      	ldr	r0, [r7, #20]
 800415c:	f7ff ff25 	bl	8003faa <_GetAvailWriteSpace>
 8004160:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4293      	cmp	r3, r2
 8004168:	bf28      	it	cs
 800416a:	4613      	movcs	r3, r2
 800416c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	69b9      	ldr	r1, [r7, #24]
 8004172:	6978      	ldr	r0, [r7, #20]
 8004174:	f7ff fed1 	bl	8003f1a <_WriteNoCheck>
    break;
 8004178:	e009      	b.n	800418e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	69b9      	ldr	r1, [r7, #24]
 800417e:	6978      	ldr	r0, [r7, #20]
 8004180:	f7ff fe6e 	bl	8003e60 <_WriteBlocking>
 8004184:	61f8      	str	r0, [r7, #28]
    break;
 8004186:	e002      	b.n	800418e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004188:	2300      	movs	r3, #0
 800418a:	61fb      	str	r3, [r7, #28]
    break;
 800418c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800418e:	69fb      	ldr	r3, [r7, #28]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3720      	adds	r7, #32
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20012ea4 	.word	0x20012ea4

0800419c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80041a8:	4b0e      	ldr	r3, [pc, #56]	@ (80041e4 <SEGGER_RTT_Write+0x48>)
 80041aa:	61fb      	str	r3, [r7, #28]
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b53      	cmp	r3, #83	@ 0x53
 80041b4:	d001      	beq.n	80041ba <SEGGER_RTT_Write+0x1e>
 80041b6:	f7ff fdf9 	bl	8003dac <_DoInit>
  SEGGER_RTT_LOCK();
 80041ba:	f3ef 8311 	mrs	r3, BASEPRI
 80041be:	f04f 0120 	mov.w	r1, #32
 80041c2:	f381 8811 	msr	BASEPRI, r1
 80041c6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	68b9      	ldr	r1, [r7, #8]
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f7ff ff95 	bl	80040fc <SEGGER_RTT_WriteNoLock>
 80041d2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80041da:	697b      	ldr	r3, [r7, #20]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3720      	adds	r7, #32
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20012ea4 	.word	0x20012ea4

080041e8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80041f6:	4b3d      	ldr	r3, [pc, #244]	@ (80042ec <SEGGER_RTT_AllocUpBuffer+0x104>)
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b53      	cmp	r3, #83	@ 0x53
 8004202:	d001      	beq.n	8004208 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004204:	f7ff fdd2 	bl	8003dac <_DoInit>
  SEGGER_RTT_LOCK();
 8004208:	f3ef 8311 	mrs	r3, BASEPRI
 800420c:	f04f 0120 	mov.w	r1, #32
 8004210:	f381 8811 	msr	BASEPRI, r1
 8004214:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004216:	4b35      	ldr	r3, [pc, #212]	@ (80042ec <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004218:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800421e:	6939      	ldr	r1, [r7, #16]
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	4613      	mov	r3, r2
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	4413      	add	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	440b      	add	r3, r1
 800422e:	3304      	adds	r3, #4
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d008      	beq.n	8004248 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	3301      	adds	r3, #1
 800423a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	429a      	cmp	r2, r3
 8004244:	dbeb      	blt.n	800421e <SEGGER_RTT_AllocUpBuffer+0x36>
 8004246:	e000      	b.n	800424a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004248:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	429a      	cmp	r2, r3
 8004252:	da3f      	bge.n	80042d4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004254:	6939      	ldr	r1, [r7, #16]
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	4613      	mov	r3, r2
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	4413      	add	r3, r2
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	440b      	add	r3, r1
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004268:	6939      	ldr	r1, [r7, #16]
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	4613      	mov	r3, r2
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	4413      	add	r3, r2
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	440b      	add	r3, r1
 8004278:	3304      	adds	r3, #4
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800427e:	6939      	ldr	r1, [r7, #16]
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	4613      	mov	r3, r2
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	4413      	add	r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	440b      	add	r3, r1
 800428c:	3320      	adds	r3, #32
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004292:	6939      	ldr	r1, [r7, #16]
 8004294:	69fa      	ldr	r2, [r7, #28]
 8004296:	4613      	mov	r3, r2
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	4413      	add	r3, r2
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	440b      	add	r3, r1
 80042a0:	3328      	adds	r3, #40	@ 0x28
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80042a6:	6939      	ldr	r1, [r7, #16]
 80042a8:	69fa      	ldr	r2, [r7, #28]
 80042aa:	4613      	mov	r3, r2
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	4413      	add	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	440b      	add	r3, r1
 80042b4:	3324      	adds	r3, #36	@ 0x24
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80042ba:	6939      	ldr	r1, [r7, #16]
 80042bc:	69fa      	ldr	r2, [r7, #28]
 80042be:	4613      	mov	r3, r2
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	4413      	add	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	440b      	add	r3, r1
 80042c8:	332c      	adds	r3, #44	@ 0x2c
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80042ce:	f3bf 8f5f 	dmb	sy
 80042d2:	e002      	b.n	80042da <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80042d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80042d8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80042e0:	69fb      	ldr	r3, [r7, #28]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3720      	adds	r7, #32
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20012ea4 	.word	0x20012ea4

080042f0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08a      	sub	sp, #40	@ 0x28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80042fe:	4b21      	ldr	r3, [pc, #132]	@ (8004384 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004300:	623b      	str	r3, [r7, #32]
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b53      	cmp	r3, #83	@ 0x53
 800430a:	d001      	beq.n	8004310 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800430c:	f7ff fd4e 	bl	8003dac <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004310:	4b1c      	ldr	r3, [pc, #112]	@ (8004384 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004312:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d82c      	bhi.n	8004374 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800431a:	f3ef 8311 	mrs	r3, BASEPRI
 800431e:	f04f 0120 	mov.w	r1, #32
 8004322:	f381 8811 	msr	BASEPRI, r1
 8004326:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4613      	mov	r3, r2
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	4413      	add	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	3360      	adds	r3, #96	@ 0x60
 8004334:	69fa      	ldr	r2, [r7, #28]
 8004336:	4413      	add	r3, r2
 8004338:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00e      	beq.n	800435e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2200      	movs	r2, #0
 8004356:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2200      	movs	r2, #0
 800435c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004362:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004364:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800436e:	2300      	movs	r3, #0
 8004370:	627b      	str	r3, [r7, #36]	@ 0x24
 8004372:	e002      	b.n	800437a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004374:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004378:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800437a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800437c:	4618      	mov	r0, r3
 800437e:	3728      	adds	r7, #40	@ 0x28
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20012ea4 	.word	0x20012ea4

08004388 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d105      	bne.n	80043a6 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	60fa      	str	r2, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	701a      	strb	r2, [r3, #0]
 80043a4:	e022      	b.n	80043ec <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	60fa      	str	r2, [r7, #12]
 80043b0:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b80      	cmp	r3, #128	@ 0x80
 80043b6:	d90a      	bls.n	80043ce <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80043b8:	2380      	movs	r3, #128	@ 0x80
 80043ba:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 80043bc:	e007      	b.n	80043ce <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	1c53      	adds	r3, r2, #1
 80043c2:	60bb      	str	r3, [r7, #8]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	1c59      	adds	r1, r3, #1
 80043c8:	60f9      	str	r1, [r7, #12]
 80043ca:	7812      	ldrb	r2, [r2, #0]
 80043cc:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	1e5a      	subs	r2, r3, #1
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <_EncodeStr+0x58>
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1ee      	bne.n	80043be <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 80043ec:	68fb      	ldr	r3, [r7, #12]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3307      	adds	r3, #7
}
 8004406:	4618      	mov	r0, r3
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
	...

08004414 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800441a:	4b34      	ldr	r3, [pc, #208]	@ (80044ec <_HandleIncomingPacket+0xd8>)
 800441c:	7e1b      	ldrb	r3, [r3, #24]
 800441e:	4618      	mov	r0, r3
 8004420:	1cfb      	adds	r3, r7, #3
 8004422:	2201      	movs	r2, #1
 8004424:	4619      	mov	r1, r3
 8004426:	f7ff fde3 	bl	8003ff0 <SEGGER_RTT_ReadNoLock>
 800442a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d057      	beq.n	80044e2 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	2b80      	cmp	r3, #128	@ 0x80
 8004436:	d031      	beq.n	800449c <_HandleIncomingPacket+0x88>
 8004438:	2b80      	cmp	r3, #128	@ 0x80
 800443a:	dc40      	bgt.n	80044be <_HandleIncomingPacket+0xaa>
 800443c:	2b07      	cmp	r3, #7
 800443e:	dc15      	bgt.n	800446c <_HandleIncomingPacket+0x58>
 8004440:	2b00      	cmp	r3, #0
 8004442:	dd3c      	ble.n	80044be <_HandleIncomingPacket+0xaa>
 8004444:	3b01      	subs	r3, #1
 8004446:	2b06      	cmp	r3, #6
 8004448:	d839      	bhi.n	80044be <_HandleIncomingPacket+0xaa>
 800444a:	a201      	add	r2, pc, #4	@ (adr r2, 8004450 <_HandleIncomingPacket+0x3c>)
 800444c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004450:	08004473 	.word	0x08004473
 8004454:	08004479 	.word	0x08004479
 8004458:	0800447f 	.word	0x0800447f
 800445c:	08004485 	.word	0x08004485
 8004460:	0800448b 	.word	0x0800448b
 8004464:	08004491 	.word	0x08004491
 8004468:	08004497 	.word	0x08004497
 800446c:	2b7f      	cmp	r3, #127	@ 0x7f
 800446e:	d033      	beq.n	80044d8 <_HandleIncomingPacket+0xc4>
 8004470:	e025      	b.n	80044be <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004472:	f000 fee7 	bl	8005244 <SEGGER_SYSVIEW_Start>
      break;
 8004476:	e034      	b.n	80044e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004478:	f000 ff9e 	bl	80053b8 <SEGGER_SYSVIEW_Stop>
      break;
 800447c:	e031      	b.n	80044e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800447e:	f001 f977 	bl	8005770 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004482:	e02e      	b.n	80044e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004484:	f001 f93c 	bl	8005700 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004488:	e02b      	b.n	80044e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800448a:	f000 ffbb 	bl	8005404 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800448e:	e028      	b.n	80044e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004490:	f001 fc38 	bl	8005d04 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004494:	e025      	b.n	80044e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004496:	f001 fc17 	bl	8005cc8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800449a:	e022      	b.n	80044e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800449c:	4b13      	ldr	r3, [pc, #76]	@ (80044ec <_HandleIncomingPacket+0xd8>)
 800449e:	7e1b      	ldrb	r3, [r3, #24]
 80044a0:	4618      	mov	r0, r3
 80044a2:	1cfb      	adds	r3, r7, #3
 80044a4:	2201      	movs	r2, #1
 80044a6:	4619      	mov	r1, r3
 80044a8:	f7ff fda2 	bl	8003ff0 <SEGGER_RTT_ReadNoLock>
 80044ac:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d013      	beq.n	80044dc <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f001 fb7c 	bl	8005bb4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80044bc:	e00e      	b.n	80044dc <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80044be:	78fb      	ldrb	r3, [r7, #3]
 80044c0:	b25b      	sxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	da0c      	bge.n	80044e0 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80044c6:	4b09      	ldr	r3, [pc, #36]	@ (80044ec <_HandleIncomingPacket+0xd8>)
 80044c8:	7e1b      	ldrb	r3, [r3, #24]
 80044ca:	4618      	mov	r0, r3
 80044cc:	1cfb      	adds	r3, r7, #3
 80044ce:	2201      	movs	r2, #1
 80044d0:	4619      	mov	r1, r3
 80044d2:	f7ff fd8d 	bl	8003ff0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80044d6:	e003      	b.n	80044e0 <_HandleIncomingPacket+0xcc>
      break;
 80044d8:	bf00      	nop
 80044da:	e002      	b.n	80044e2 <_HandleIncomingPacket+0xce>
      break;
 80044dc:	bf00      	nop
 80044de:	e000      	b.n	80044e2 <_HandleIncomingPacket+0xce>
      break;
 80044e0:	bf00      	nop
    }
  }
}
 80044e2:	bf00      	nop
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20014364 	.word	0x20014364

080044f0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08c      	sub	sp, #48	@ 0x30
 80044f4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80044f6:	2301      	movs	r3, #1
 80044f8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80044fa:	1d3b      	adds	r3, r7, #4
 80044fc:	3301      	adds	r3, #1
 80044fe:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004504:	4b31      	ldr	r3, [pc, #196]	@ (80045cc <_TrySendOverflowPacket+0xdc>)
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	62bb      	str	r3, [r7, #40]	@ 0x28
 800450a:	e00b      	b.n	8004524 <_TrySendOverflowPacket+0x34>
 800450c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450e:	b2da      	uxtb	r2, r3
 8004510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004512:	1c59      	adds	r1, r3, #1
 8004514:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004516:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	701a      	strb	r2, [r3, #0]
 800451e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004520:	09db      	lsrs	r3, r3, #7
 8004522:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004526:	2b7f      	cmp	r3, #127	@ 0x7f
 8004528:	d8f0      	bhi.n	800450c <_TrySendOverflowPacket+0x1c>
 800452a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800452c:	1c5a      	adds	r2, r3, #1
 800452e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004530:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]
 8004536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004538:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800453a:	4b25      	ldr	r3, [pc, #148]	@ (80045d0 <_TrySendOverflowPacket+0xe0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8004540:	4b22      	ldr	r3, [pc, #136]	@ (80045cc <_TrySendOverflowPacket+0xdc>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	627b      	str	r3, [r7, #36]	@ 0x24
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	623b      	str	r3, [r7, #32]
 8004552:	e00b      	b.n	800456c <_TrySendOverflowPacket+0x7c>
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	b2da      	uxtb	r2, r3
 8004558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455a:	1c59      	adds	r1, r3, #1
 800455c:	6279      	str	r1, [r7, #36]	@ 0x24
 800455e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	701a      	strb	r2, [r3, #0]
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	09db      	lsrs	r3, r3, #7
 800456a:	623b      	str	r3, [r7, #32]
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004570:	d8f0      	bhi.n	8004554 <_TrySendOverflowPacket+0x64>
 8004572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	627a      	str	r2, [r7, #36]	@ 0x24
 8004578:	6a3a      	ldr	r2, [r7, #32]
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]
 800457e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004580:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004582:	4b12      	ldr	r3, [pc, #72]	@ (80045cc <_TrySendOverflowPacket+0xdc>)
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	4618      	mov	r0, r3
 8004588:	1d3b      	adds	r3, r7, #4
 800458a:	69fa      	ldr	r2, [r7, #28]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	461a      	mov	r2, r3
 8004590:	1d3b      	adds	r3, r7, #4
 8004592:	4619      	mov	r1, r3
 8004594:	f7fb fe1c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004598:	4603      	mov	r3, r0
 800459a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d009      	beq.n	80045b6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80045a2:	4a0a      	ldr	r2, [pc, #40]	@ (80045cc <_TrySendOverflowPacket+0xdc>)
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80045a8:	4b08      	ldr	r3, [pc, #32]	@ (80045cc <_TrySendOverflowPacket+0xdc>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	4b06      	ldr	r3, [pc, #24]	@ (80045cc <_TrySendOverflowPacket+0xdc>)
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	e004      	b.n	80045c0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80045b6:	4b05      	ldr	r3, [pc, #20]	@ (80045cc <_TrySendOverflowPacket+0xdc>)
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	3301      	adds	r3, #1
 80045bc:	4a03      	ldr	r2, [pc, #12]	@ (80045cc <_TrySendOverflowPacket+0xdc>)
 80045be:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80045c0:	693b      	ldr	r3, [r7, #16]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3730      	adds	r7, #48	@ 0x30
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20014364 	.word	0x20014364
 80045d0:	e0001004 	.word	0xe0001004

080045d4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	@ 0x28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80045e0:	4b98      	ldr	r3, [pc, #608]	@ (8004844 <_SendPacket+0x270>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d010      	beq.n	800460a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80045e8:	4b96      	ldr	r3, [pc, #600]	@ (8004844 <_SendPacket+0x270>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 812d 	beq.w	800484c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80045f2:	4b94      	ldr	r3, [pc, #592]	@ (8004844 <_SendPacket+0x270>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d109      	bne.n	800460e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80045fa:	f7ff ff79 	bl	80044f0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80045fe:	4b91      	ldr	r3, [pc, #580]	@ (8004844 <_SendPacket+0x270>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	2b01      	cmp	r3, #1
 8004604:	f040 8124 	bne.w	8004850 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004608:	e001      	b.n	800460e <_SendPacket+0x3a>
    goto Send;
 800460a:	bf00      	nop
 800460c:	e000      	b.n	8004610 <_SendPacket+0x3c>
Send:
 800460e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b1f      	cmp	r3, #31
 8004614:	d809      	bhi.n	800462a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004616:	4b8b      	ldr	r3, [pc, #556]	@ (8004844 <_SendPacket+0x270>)
 8004618:	69da      	ldr	r2, [r3, #28]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	fa22 f303 	lsr.w	r3, r2, r3
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	f040 8115 	bne.w	8004854 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b17      	cmp	r3, #23
 800462e:	d807      	bhi.n	8004640 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3b01      	subs	r3, #1
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	b2da      	uxtb	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	e0c4      	b.n	80047ca <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	2b7f      	cmp	r3, #127	@ 0x7f
 800464c:	d912      	bls.n	8004674 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	09da      	lsrs	r2, r3, #7
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3b01      	subs	r3, #1
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	b2d2      	uxtb	r2, r2
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	3a01      	subs	r2, #1
 8004666:	60fa      	str	r2, [r7, #12]
 8004668:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800466c:	b2da      	uxtb	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	701a      	strb	r2, [r3, #0]
 8004672:	e006      	b.n	8004682 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3b01      	subs	r3, #1
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	b2da      	uxtb	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b7e      	cmp	r3, #126	@ 0x7e
 8004686:	d807      	bhi.n	8004698 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3b01      	subs	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	b2da      	uxtb	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	e098      	b.n	80047ca <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800469e:	d212      	bcs.n	80046c6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	09da      	lsrs	r2, r3, #7
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	3a01      	subs	r2, #1
 80046b8:	60fa      	str	r2, [r7, #12]
 80046ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	701a      	strb	r2, [r3, #0]
 80046c4:	e081      	b.n	80047ca <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046cc:	d21d      	bcs.n	800470a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	0b9a      	lsrs	r2, r3, #14
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	09db      	lsrs	r3, r3, #7
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	3a01      	subs	r2, #1
 80046e8:	60fa      	str	r2, [r7, #12]
 80046ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	3a01      	subs	r2, #1
 80046fc:	60fa      	str	r2, [r7, #12]
 80046fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004702:	b2da      	uxtb	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	701a      	strb	r2, [r3, #0]
 8004708:	e05f      	b.n	80047ca <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004710:	d228      	bcs.n	8004764 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	0d5a      	lsrs	r2, r3, #21
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3b01      	subs	r3, #1
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	b2d2      	uxtb	r2, r2
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	0b9b      	lsrs	r3, r3, #14
 8004726:	b2db      	uxtb	r3, r3
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	3a01      	subs	r2, #1
 800472c:	60fa      	str	r2, [r7, #12]
 800472e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004732:	b2da      	uxtb	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	09db      	lsrs	r3, r3, #7
 800473c:	b2db      	uxtb	r3, r3
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	3a01      	subs	r2, #1
 8004742:	60fa      	str	r2, [r7, #12]
 8004744:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004748:	b2da      	uxtb	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	3a01      	subs	r2, #1
 8004756:	60fa      	str	r2, [r7, #12]
 8004758:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800475c:	b2da      	uxtb	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	e032      	b.n	80047ca <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	0f1a      	lsrs	r2, r3, #28
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	3b01      	subs	r3, #1
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	0d5b      	lsrs	r3, r3, #21
 8004778:	b2db      	uxtb	r3, r3
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	3a01      	subs	r2, #1
 800477e:	60fa      	str	r2, [r7, #12]
 8004780:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004784:	b2da      	uxtb	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	0b9b      	lsrs	r3, r3, #14
 800478e:	b2db      	uxtb	r3, r3
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	3a01      	subs	r2, #1
 8004794:	60fa      	str	r2, [r7, #12]
 8004796:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800479a:	b2da      	uxtb	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	09db      	lsrs	r3, r3, #7
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	3a01      	subs	r2, #1
 80047aa:	60fa      	str	r2, [r7, #12]
 80047ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	3a01      	subs	r2, #1
 80047be:	60fa      	str	r2, [r7, #12]
 80047c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80047ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004848 <_SendPacket+0x274>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80047d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004844 <_SendPacket+0x270>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	623b      	str	r3, [r7, #32]
 80047e2:	e00b      	b.n	80047fc <_SendPacket+0x228>
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ea:	1c59      	adds	r1, r3, #1
 80047ec:	6279      	str	r1, [r7, #36]	@ 0x24
 80047ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	09db      	lsrs	r3, r3, #7
 80047fa:	623b      	str	r3, [r7, #32]
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8004800:	d8f0      	bhi.n	80047e4 <_SendPacket+0x210>
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	627a      	str	r2, [r7, #36]	@ 0x24
 8004808:	6a3a      	ldr	r2, [r7, #32]
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]
 800480e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004810:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004812:	4b0c      	ldr	r3, [pc, #48]	@ (8004844 <_SendPacket+0x270>)
 8004814:	785b      	ldrb	r3, [r3, #1]
 8004816:	4618      	mov	r0, r3
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	461a      	mov	r2, r3
 8004820:	68f9      	ldr	r1, [r7, #12]
 8004822:	f7fb fcd5 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004826:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800482e:	4a05      	ldr	r2, [pc, #20]	@ (8004844 <_SendPacket+0x270>)
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	60d3      	str	r3, [r2, #12]
 8004834:	e00f      	b.n	8004856 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004836:	4b03      	ldr	r3, [pc, #12]	@ (8004844 <_SendPacket+0x270>)
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	3301      	adds	r3, #1
 800483c:	b2da      	uxtb	r2, r3
 800483e:	4b01      	ldr	r3, [pc, #4]	@ (8004844 <_SendPacket+0x270>)
 8004840:	701a      	strb	r2, [r3, #0]
 8004842:	e008      	b.n	8004856 <_SendPacket+0x282>
 8004844:	20014364 	.word	0x20014364
 8004848:	e0001004 	.word	0xe0001004
    goto SendDone;
 800484c:	bf00      	nop
 800484e:	e002      	b.n	8004856 <_SendPacket+0x282>
      goto SendDone;
 8004850:	bf00      	nop
 8004852:	e000      	b.n	8004856 <_SendPacket+0x282>
      goto SendDone;
 8004854:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004856:	4b14      	ldr	r3, [pc, #80]	@ (80048a8 <_SendPacket+0x2d4>)
 8004858:	7e1b      	ldrb	r3, [r3, #24]
 800485a:	4619      	mov	r1, r3
 800485c:	4a13      	ldr	r2, [pc, #76]	@ (80048ac <_SendPacket+0x2d8>)
 800485e:	460b      	mov	r3, r1
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	440b      	add	r3, r1
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	4413      	add	r3, r2
 8004868:	336c      	adds	r3, #108	@ 0x6c
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	4b0e      	ldr	r3, [pc, #56]	@ (80048a8 <_SendPacket+0x2d4>)
 800486e:	7e1b      	ldrb	r3, [r3, #24]
 8004870:	4618      	mov	r0, r3
 8004872:	490e      	ldr	r1, [pc, #56]	@ (80048ac <_SendPacket+0x2d8>)
 8004874:	4603      	mov	r3, r0
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	4403      	add	r3, r0
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	440b      	add	r3, r1
 800487e:	3370      	adds	r3, #112	@ 0x70
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d00b      	beq.n	800489e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004886:	4b08      	ldr	r3, [pc, #32]	@ (80048a8 <_SendPacket+0x2d4>)
 8004888:	789b      	ldrb	r3, [r3, #2]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d107      	bne.n	800489e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800488e:	4b06      	ldr	r3, [pc, #24]	@ (80048a8 <_SendPacket+0x2d4>)
 8004890:	2201      	movs	r2, #1
 8004892:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004894:	f7ff fdbe 	bl	8004414 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004898:	4b03      	ldr	r3, [pc, #12]	@ (80048a8 <_SendPacket+0x2d4>)
 800489a:	2200      	movs	r2, #0
 800489c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800489e:	bf00      	nop
 80048a0:	3728      	adds	r7, #40	@ 0x28
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20014364 	.word	0x20014364
 80048ac:	20012ea4 	.word	0x20012ea4

080048b0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08a      	sub	sp, #40	@ 0x28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	3301      	adds	r3, #1
 80048c6:	2b80      	cmp	r3, #128	@ 0x80
 80048c8:	d80a      	bhi.n	80048e0 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	1c59      	adds	r1, r3, #1
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6051      	str	r1, [r2, #4]
 80048d4:	78fa      	ldrb	r2, [r7, #3]
 80048d6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	2b80      	cmp	r3, #128	@ 0x80
 80048e6:	d15a      	bne.n	800499e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	627b      	str	r3, [r7, #36]	@ 0x24
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	623b      	str	r3, [r7, #32]
 8004908:	e00b      	b.n	8004922 <_StoreChar+0x72>
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	b2da      	uxtb	r2, r3
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004910:	1c59      	adds	r1, r3, #1
 8004912:	6279      	str	r1, [r7, #36]	@ 0x24
 8004914:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004918:	b2d2      	uxtb	r2, r2
 800491a:	701a      	strb	r2, [r3, #0]
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	09db      	lsrs	r3, r3, #7
 8004920:	623b      	str	r3, [r7, #32]
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	2b7f      	cmp	r3, #127	@ 0x7f
 8004926:	d8f0      	bhi.n	800490a <_StoreChar+0x5a>
 8004928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	627a      	str	r2, [r7, #36]	@ 0x24
 800492e:	6a3a      	ldr	r2, [r7, #32]
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	701a      	strb	r2, [r3, #0]
 8004934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004936:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	61fb      	str	r3, [r7, #28]
 800493c:	2300      	movs	r3, #0
 800493e:	61bb      	str	r3, [r7, #24]
 8004940:	e00b      	b.n	800495a <_StoreChar+0xaa>
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	b2da      	uxtb	r2, r3
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	1c59      	adds	r1, r3, #1
 800494a:	61f9      	str	r1, [r7, #28]
 800494c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	701a      	strb	r2, [r3, #0]
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	09db      	lsrs	r3, r3, #7
 8004958:	61bb      	str	r3, [r7, #24]
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b7f      	cmp	r3, #127	@ 0x7f
 800495e:	d8f0      	bhi.n	8004942 <_StoreChar+0x92>
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	61fa      	str	r2, [r7, #28]
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	701a      	strb	r2, [r3, #0]
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	221a      	movs	r2, #26
 8004976:	6939      	ldr	r1, [r7, #16]
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff fe2b 	bl	80045d4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff fd39 	bl	80043fa <_PreparePacket>
 8004988:	4602      	mov	r2, r0
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	611a      	str	r2, [r3, #16]
  }
}
 800499e:	bf00      	nop
 80049a0:	3728      	adds	r7, #40	@ 0x28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
	...

080049a8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08a      	sub	sp, #40	@ 0x28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
 80049b4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80049ba:	2301      	movs	r3, #1
 80049bc:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80049be:	2301      	movs	r3, #1
 80049c0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80049c2:	e007      	b.n	80049d4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80049c4:	6a3a      	ldr	r2, [r7, #32]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049cc:	623b      	str	r3, [r7, #32]
    Width++;
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	3301      	adds	r3, #1
 80049d2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80049d4:	6a3a      	ldr	r2, [r7, #32]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d2f3      	bcs.n	80049c4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d901      	bls.n	80049e8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80049e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d000      	beq.n	80049f4 <_PrintUnsigned+0x4c>
 80049f2:	e01f      	b.n	8004a34 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 80049f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d01c      	beq.n	8004a34 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80049fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <_PrintUnsigned+0x68>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d102      	bne.n	8004a10 <_PrintUnsigned+0x68>
        c = '0';
 8004a0a:	2330      	movs	r3, #48	@ 0x30
 8004a0c:	76fb      	strb	r3, [r7, #27]
 8004a0e:	e001      	b.n	8004a14 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8004a10:	2320      	movs	r3, #32
 8004a12:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004a14:	e007      	b.n	8004a26 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8004a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8004a1c:	7efb      	ldrb	r3, [r7, #27]
 8004a1e:	4619      	mov	r1, r3
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f7ff ff45 	bl	80048b0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <_PrintUnsigned+0x8c>
 8004a2c:	69fa      	ldr	r2, [r7, #28]
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d3f0      	bcc.n	8004a16 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d903      	bls.n	8004a42 <_PrintUnsigned+0x9a>
      NumDigits--;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	e009      	b.n	8004a56 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4a:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d200      	bcs.n	8004a56 <_PrintUnsigned+0xae>
        break;
 8004a54:	e005      	b.n	8004a62 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8004a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	fb02 f303 	mul.w	r3, r2, r3
 8004a5e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004a60:	e7e8      	b.n	8004a34 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6a:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a70:	fb02 f303 	mul.w	r3, r2, r3
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004a7a:	4a15      	ldr	r2, [pc, #84]	@ (8004ad0 <_PrintUnsigned+0x128>)
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	4413      	add	r3, r2
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	4619      	mov	r1, r3
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f7ff ff13 	bl	80048b0 <_StoreChar>
    Digit /= Base;
 8004a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a92:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8004a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1e3      	bne.n	8004a62 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d011      	beq.n	8004ac8 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00e      	beq.n	8004ac8 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004aaa:	e006      	b.n	8004aba <_PrintUnsigned+0x112>
        FieldWidth--;
 8004aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8004ab2:	2120      	movs	r1, #32
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f7ff fefb 	bl	80048b0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <_PrintUnsigned+0x120>
 8004ac0:	69fa      	ldr	r2, [r7, #28]
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d3f1      	bcc.n	8004aac <_PrintUnsigned+0x104>
      }
    }
  }
}
 8004ac8:	bf00      	nop
 8004aca:	3728      	adds	r7, #40	@ 0x28
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	08007018 	.word	0x08007018

08004ad4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bfb8      	it	lt
 8004ae8:	425b      	neglt	r3, r3
 8004aea:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004aec:	2301      	movs	r3, #1
 8004aee:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004af0:	e007      	b.n	8004b02 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	fb92 f3f3 	sdiv	r3, r2, r3
 8004afa:	613b      	str	r3, [r7, #16]
    Width++;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	3301      	adds	r3, #1
 8004b00:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	daf3      	bge.n	8004af2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d901      	bls.n	8004b16 <_PrintInt+0x42>
    Width = NumDigits;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <_PrintInt+0x5e>
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	db04      	blt.n	8004b2c <_PrintInt+0x58>
 8004b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <_PrintInt+0x5e>
    FieldWidth--;
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <_PrintInt+0x6e>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d016      	beq.n	8004b70 <_PrintInt+0x9c>
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d111      	bne.n	8004b70 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00e      	beq.n	8004b70 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b52:	e006      	b.n	8004b62 <_PrintInt+0x8e>
        FieldWidth--;
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004b5a:	2120      	movs	r1, #32
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f7ff fea7 	bl	80048b0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <_PrintInt+0x9c>
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d3f1      	bcc.n	8004b54 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	da07      	bge.n	8004b86 <_PrintInt+0xb2>
    v = -v;
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	425b      	negs	r3, r3
 8004b7a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004b7c:	212d      	movs	r1, #45	@ 0x2d
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f7ff fe96 	bl	80048b0 <_StoreChar>
 8004b84:	e008      	b.n	8004b98 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004b90:	212b      	movs	r1, #43	@ 0x2b
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f7ff fe8c 	bl	80048b0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d019      	beq.n	8004bd6 <_PrintInt+0x102>
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d114      	bne.n	8004bd6 <_PrintInt+0x102>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d111      	bne.n	8004bd6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00e      	beq.n	8004bd6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004bb8:	e006      	b.n	8004bc8 <_PrintInt+0xf4>
        FieldWidth--;
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004bc0:	2130      	movs	r1, #48	@ 0x30
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f7ff fe74 	bl	80048b0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <_PrintInt+0x102>
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d3f1      	bcc.n	8004bba <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004bd6:	68b9      	ldr	r1, [r7, #8]
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bda:	9301      	str	r3, [sp, #4]
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f7ff fedf 	bl	80049a8 <_PrintUnsigned>
}
 8004bea:	bf00      	nop
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b098      	sub	sp, #96	@ 0x60
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c00:	f3ef 8311 	mrs	r3, BASEPRI
 8004c04:	f04f 0120 	mov.w	r1, #32
 8004c08:	f381 8811 	msr	BASEPRI, r1
 8004c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c0e:	48b7      	ldr	r0, [pc, #732]	@ (8004eec <_VPrintTarget+0x2f8>)
 8004c10:	f7ff fbf3 	bl	80043fa <_PreparePacket>
 8004c14:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004c16:	4bb5      	ldr	r3, [pc, #724]	@ (8004eec <_VPrintTarget+0x2f8>)
 8004c18:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c20:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	3301      	adds	r3, #1
 8004c26:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	3301      	adds	r3, #1
 8004c38:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004c3a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 81a8 	beq.w	8004f94 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8004c44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004c48:	2b25      	cmp	r3, #37	@ 0x25
 8004c4a:	f040 8195 	bne.w	8004f78 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8004c52:	2301      	movs	r3, #1
 8004c54:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8004c5e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004c62:	3b23      	subs	r3, #35	@ 0x23
 8004c64:	2b0d      	cmp	r3, #13
 8004c66:	d83f      	bhi.n	8004ce8 <_VPrintTarget+0xf4>
 8004c68:	a201      	add	r2, pc, #4	@ (adr r2, 8004c70 <_VPrintTarget+0x7c>)
 8004c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6e:	bf00      	nop
 8004c70:	08004cd9 	.word	0x08004cd9
 8004c74:	08004ce9 	.word	0x08004ce9
 8004c78:	08004ce9 	.word	0x08004ce9
 8004c7c:	08004ce9 	.word	0x08004ce9
 8004c80:	08004ce9 	.word	0x08004ce9
 8004c84:	08004ce9 	.word	0x08004ce9
 8004c88:	08004ce9 	.word	0x08004ce9
 8004c8c:	08004ce9 	.word	0x08004ce9
 8004c90:	08004cc9 	.word	0x08004cc9
 8004c94:	08004ce9 	.word	0x08004ce9
 8004c98:	08004ca9 	.word	0x08004ca9
 8004c9c:	08004ce9 	.word	0x08004ce9
 8004ca0:	08004ce9 	.word	0x08004ce9
 8004ca4:	08004cb9 	.word	0x08004cb9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004ca8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	e01a      	b.n	8004cee <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004cb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cba:	f043 0302 	orr.w	r3, r3, #2
 8004cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	e012      	b.n	8004cee <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004cc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cca:	f043 0304 	orr.w	r3, r3, #4
 8004cce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	e00a      	b.n	8004cee <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004cd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cda:	f043 0308 	orr.w	r3, r3, #8
 8004cde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	e002      	b.n	8004cee <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cec:	bf00      	nop
        }
      } while (v);
 8004cee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1b0      	bne.n	8004c56 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8004d00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004d04:	2b2f      	cmp	r3, #47	@ 0x2f
 8004d06:	d912      	bls.n	8004d2e <_VPrintTarget+0x13a>
 8004d08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004d0c:	2b39      	cmp	r3, #57	@ 0x39
 8004d0e:	d80e      	bhi.n	8004d2e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	3301      	adds	r3, #1
 8004d14:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004d16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	461a      	mov	r2, r3
 8004d22:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004d26:	4413      	add	r3, r2
 8004d28:	3b30      	subs	r3, #48	@ 0x30
 8004d2a:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8004d2c:	e7e4      	b.n	8004cf8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8004d3a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004d3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d40:	d11d      	bne.n	8004d7e <_VPrintTarget+0x18a>
        sFormat++;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3301      	adds	r3, #1
 8004d46:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8004d50:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004d54:	2b2f      	cmp	r3, #47	@ 0x2f
 8004d56:	d912      	bls.n	8004d7e <_VPrintTarget+0x18a>
 8004d58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004d5c:	2b39      	cmp	r3, #57	@ 0x39
 8004d5e:	d80e      	bhi.n	8004d7e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	3301      	adds	r3, #1
 8004d64:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004d66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	461a      	mov	r2, r3
 8004d72:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004d76:	4413      	add	r3, r2
 8004d78:	3b30      	subs	r3, #48	@ 0x30
 8004d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8004d7c:	e7e4      	b.n	8004d48 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004d86:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004d8a:	2b6c      	cmp	r3, #108	@ 0x6c
 8004d8c:	d003      	beq.n	8004d96 <_VPrintTarget+0x1a2>
 8004d8e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004d92:	2b68      	cmp	r3, #104	@ 0x68
 8004d94:	d107      	bne.n	8004da6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3301      	adds	r3, #1
 8004da2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004da4:	e7ef      	b.n	8004d86 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004da6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004daa:	2b25      	cmp	r3, #37	@ 0x25
 8004dac:	f000 80d8 	beq.w	8004f60 <_VPrintTarget+0x36c>
 8004db0:	2b25      	cmp	r3, #37	@ 0x25
 8004db2:	f2c0 80dc 	blt.w	8004f6e <_VPrintTarget+0x37a>
 8004db6:	2b78      	cmp	r3, #120	@ 0x78
 8004db8:	f300 80d9 	bgt.w	8004f6e <_VPrintTarget+0x37a>
 8004dbc:	2b58      	cmp	r3, #88	@ 0x58
 8004dbe:	f2c0 80d6 	blt.w	8004f6e <_VPrintTarget+0x37a>
 8004dc2:	3b58      	subs	r3, #88	@ 0x58
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	f200 80d2 	bhi.w	8004f6e <_VPrintTarget+0x37a>
 8004dca:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd0 <_VPrintTarget+0x1dc>)
 8004dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd0:	08004ec7 	.word	0x08004ec7
 8004dd4:	08004f6f 	.word	0x08004f6f
 8004dd8:	08004f6f 	.word	0x08004f6f
 8004ddc:	08004f6f 	.word	0x08004f6f
 8004de0:	08004f6f 	.word	0x08004f6f
 8004de4:	08004f6f 	.word	0x08004f6f
 8004de8:	08004f6f 	.word	0x08004f6f
 8004dec:	08004f6f 	.word	0x08004f6f
 8004df0:	08004f6f 	.word	0x08004f6f
 8004df4:	08004f6f 	.word	0x08004f6f
 8004df8:	08004f6f 	.word	0x08004f6f
 8004dfc:	08004e55 	.word	0x08004e55
 8004e00:	08004e7b 	.word	0x08004e7b
 8004e04:	08004f6f 	.word	0x08004f6f
 8004e08:	08004f6f 	.word	0x08004f6f
 8004e0c:	08004f6f 	.word	0x08004f6f
 8004e10:	08004f6f 	.word	0x08004f6f
 8004e14:	08004f6f 	.word	0x08004f6f
 8004e18:	08004f6f 	.word	0x08004f6f
 8004e1c:	08004f6f 	.word	0x08004f6f
 8004e20:	08004f6f 	.word	0x08004f6f
 8004e24:	08004f6f 	.word	0x08004f6f
 8004e28:	08004f6f 	.word	0x08004f6f
 8004e2c:	08004f6f 	.word	0x08004f6f
 8004e30:	08004f3b 	.word	0x08004f3b
 8004e34:	08004f6f 	.word	0x08004f6f
 8004e38:	08004f6f 	.word	0x08004f6f
 8004e3c:	08004ef1 	.word	0x08004ef1
 8004e40:	08004f6f 	.word	0x08004f6f
 8004e44:	08004ea1 	.word	0x08004ea1
 8004e48:	08004f6f 	.word	0x08004f6f
 8004e4c:	08004f6f 	.word	0x08004f6f
 8004e50:	08004ec7 	.word	0x08004ec7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	1d19      	adds	r1, r3, #4
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6011      	str	r1, [r2, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8004e62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8004e68:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004e6c:	f107 0310 	add.w	r3, r7, #16
 8004e70:	4611      	mov	r1, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff fd1c 	bl	80048b0 <_StoreChar>
        break;
 8004e78:	e07a      	b.n	8004f70 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	1d19      	adds	r1, r3, #4
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6011      	str	r1, [r2, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004e88:	f107 0010 	add.w	r0, r7, #16
 8004e8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e8e:	9301      	str	r3, [sp, #4]
 8004e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e96:	220a      	movs	r2, #10
 8004e98:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004e9a:	f7ff fe1b 	bl	8004ad4 <_PrintInt>
        break;
 8004e9e:	e067      	b.n	8004f70 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	1d19      	adds	r1, r3, #4
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6011      	str	r1, [r2, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004eae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004eb0:	f107 0010 	add.w	r0, r7, #16
 8004eb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004eb6:	9301      	str	r3, [sp, #4]
 8004eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ebe:	220a      	movs	r2, #10
 8004ec0:	f7ff fd72 	bl	80049a8 <_PrintUnsigned>
        break;
 8004ec4:	e054      	b.n	8004f70 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	1d19      	adds	r1, r3, #4
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6011      	str	r1, [r2, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004ed4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ed6:	f107 0010 	add.w	r0, r7, #16
 8004eda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004edc:	9301      	str	r3, [sp, #4]
 8004ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ee4:	2210      	movs	r2, #16
 8004ee6:	f7ff fd5f 	bl	80049a8 <_PrintUnsigned>
        break;
 8004eea:	e041      	b.n	8004f70 <_VPrintTarget+0x37c>
 8004eec:	20014394 	.word	0x20014394
      case 's':
        s = va_arg(*pParamList, const char*);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	1d19      	adds	r1, r3, #4
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6011      	str	r1, [r2, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8004efe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <_VPrintTarget+0x314>
          s = "(null)";
 8004f04:	4b4a      	ldr	r3, [pc, #296]	@ (8005030 <_VPrintTarget+0x43c>)
 8004f06:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8004f08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8004f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f12:	3301      	adds	r3, #1
 8004f14:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8004f16:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00b      	beq.n	8004f36 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8004f1e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004f22:	f107 0310 	add.w	r3, r7, #16
 8004f26:	4611      	mov	r1, r2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7ff fcc1 	bl	80048b0 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f32:	d9e9      	bls.n	8004f08 <_VPrintTarget+0x314>
        break;
 8004f34:	e01c      	b.n	8004f70 <_VPrintTarget+0x37c>
            break;
 8004f36:	bf00      	nop
        break;
 8004f38:	e01a      	b.n	8004f70 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	1d19      	adds	r1, r3, #4
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6011      	str	r1, [r2, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004f48:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004f4a:	f107 0010 	add.w	r0, r7, #16
 8004f4e:	2300      	movs	r3, #0
 8004f50:	9301      	str	r3, [sp, #4]
 8004f52:	2308      	movs	r3, #8
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	2308      	movs	r3, #8
 8004f58:	2210      	movs	r2, #16
 8004f5a:	f7ff fd25 	bl	80049a8 <_PrintUnsigned>
        break;
 8004f5e:	e007      	b.n	8004f70 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004f60:	f107 0310 	add.w	r3, r7, #16
 8004f64:	2125      	movs	r1, #37	@ 0x25
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff fca2 	bl	80048b0 <_StoreChar>
        break;
 8004f6c:	e000      	b.n	8004f70 <_VPrintTarget+0x37c>
      default:
        break;
 8004f6e:	bf00      	nop
      }
      sFormat++;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3301      	adds	r3, #1
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	e007      	b.n	8004f88 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8004f78:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004f7c:	f107 0310 	add.w	r3, r7, #16
 8004f80:	4611      	mov	r1, r2
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff fc94 	bl	80048b0 <_StoreChar>
    }
  } while (*sFormat);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f47f ae4d 	bne.w	8004c2c <_VPrintTarget+0x38>
 8004f92:	e000      	b.n	8004f96 <_VPrintTarget+0x3a2>
      break;
 8004f94:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d041      	beq.n	8005020 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004f9c:	6a3a      	ldr	r2, [r7, #32]
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fac:	e00b      	b.n	8004fc6 <_VPrintTarget+0x3d2>
 8004fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fb4:	1c59      	adds	r1, r3, #1
 8004fb6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004fb8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fbc:	b2d2      	uxtb	r2, r2
 8004fbe:	701a      	strb	r2, [r3, #0]
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc2:	09db      	lsrs	r3, r3, #7
 8004fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fca:	d8f0      	bhi.n	8004fae <_VPrintTarget+0x3ba>
 8004fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004fd2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	701a      	strb	r2, [r3, #0]
 8004fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fda:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fe4:	e00b      	b.n	8004ffe <_VPrintTarget+0x40a>
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fec:	1c59      	adds	r1, r3, #1
 8004fee:	6379      	str	r1, [r7, #52]	@ 0x34
 8004ff0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffa:	09db      	lsrs	r3, r3, #7
 8004ffc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005000:	2b7f      	cmp	r3, #127	@ 0x7f
 8005002:	d8f0      	bhi.n	8004fe6 <_VPrintTarget+0x3f2>
 8005004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	637a      	str	r2, [r7, #52]	@ 0x34
 800500a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005012:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	6979      	ldr	r1, [r7, #20]
 8005018:	221a      	movs	r2, #26
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff fada 	bl	80045d4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005022:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005026:	bf00      	nop
 8005028:	3758      	adds	r7, #88	@ 0x58
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	08006fc4 	.word	0x08006fc4

08005034 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af02      	add	r7, sp, #8
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005042:	2300      	movs	r3, #0
 8005044:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005048:	4917      	ldr	r1, [pc, #92]	@ (80050a8 <SEGGER_SYSVIEW_Init+0x74>)
 800504a:	4818      	ldr	r0, [pc, #96]	@ (80050ac <SEGGER_SYSVIEW_Init+0x78>)
 800504c:	f7ff f8cc 	bl	80041e8 <SEGGER_RTT_AllocUpBuffer>
 8005050:	4603      	mov	r3, r0
 8005052:	b2da      	uxtb	r2, r3
 8005054:	4b16      	ldr	r3, [pc, #88]	@ (80050b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005056:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005058:	4b15      	ldr	r3, [pc, #84]	@ (80050b0 <SEGGER_SYSVIEW_Init+0x7c>)
 800505a:	785a      	ldrb	r2, [r3, #1]
 800505c:	4b14      	ldr	r3, [pc, #80]	@ (80050b0 <SEGGER_SYSVIEW_Init+0x7c>)
 800505e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005060:	4b13      	ldr	r3, [pc, #76]	@ (80050b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005062:	7e1b      	ldrb	r3, [r3, #24]
 8005064:	4618      	mov	r0, r3
 8005066:	2300      	movs	r3, #0
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	2308      	movs	r3, #8
 800506c:	4a11      	ldr	r2, [pc, #68]	@ (80050b4 <SEGGER_SYSVIEW_Init+0x80>)
 800506e:	490f      	ldr	r1, [pc, #60]	@ (80050ac <SEGGER_SYSVIEW_Init+0x78>)
 8005070:	f7ff f93e 	bl	80042f0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005074:	4b0e      	ldr	r3, [pc, #56]	@ (80050b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005076:	2200      	movs	r2, #0
 8005078:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800507a:	4b0f      	ldr	r3, [pc, #60]	@ (80050b8 <SEGGER_SYSVIEW_Init+0x84>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a0c      	ldr	r2, [pc, #48]	@ (80050b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005080:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005082:	4a0b      	ldr	r2, [pc, #44]	@ (80050b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005088:	4a09      	ldr	r2, [pc, #36]	@ (80050b0 <SEGGER_SYSVIEW_Init+0x7c>)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800508e:	4a08      	ldr	r2, [pc, #32]	@ (80050b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005094:	4a06      	ldr	r2, [pc, #24]	@ (80050b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800509a:	4b05      	ldr	r3, [pc, #20]	@ (80050b0 <SEGGER_SYSVIEW_Init+0x7c>)
 800509c:	2200      	movs	r2, #0
 800509e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80050a0:	bf00      	nop
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	2001335c 	.word	0x2001335c
 80050ac:	08006fcc 	.word	0x08006fcc
 80050b0:	20014364 	.word	0x20014364
 80050b4:	2001435c 	.word	0x2001435c
 80050b8:	e0001004 	.word	0xe0001004

080050bc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80050c4:	4a04      	ldr	r2, [pc, #16]	@ (80050d8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6113      	str	r3, [r2, #16]
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	20014364 	.word	0x20014364

080050dc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050e4:	f3ef 8311 	mrs	r3, BASEPRI
 80050e8:	f04f 0120 	mov.w	r1, #32
 80050ec:	f381 8811 	msr	BASEPRI, r1
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	4808      	ldr	r0, [pc, #32]	@ (8005114 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80050f4:	f7ff f981 	bl	80043fa <_PreparePacket>
 80050f8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	68b9      	ldr	r1, [r7, #8]
 80050fe:	68b8      	ldr	r0, [r7, #8]
 8005100:	f7ff fa68 	bl	80045d4 <_SendPacket>
  RECORD_END();
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f383 8811 	msr	BASEPRI, r3
}
 800510a:	bf00      	nop
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20014394 	.word	0x20014394

08005118 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005118:	b580      	push	{r7, lr}
 800511a:	b088      	sub	sp, #32
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005122:	f3ef 8311 	mrs	r3, BASEPRI
 8005126:	f04f 0120 	mov.w	r1, #32
 800512a:	f381 8811 	msr	BASEPRI, r1
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	4816      	ldr	r0, [pc, #88]	@ (800518c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005132:	f7ff f962 	bl	80043fa <_PreparePacket>
 8005136:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	61fb      	str	r3, [r7, #28]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	e00b      	b.n	800515e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	b2da      	uxtb	r2, r3
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	1c59      	adds	r1, r3, #1
 800514e:	61f9      	str	r1, [r7, #28]
 8005150:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005154:	b2d2      	uxtb	r2, r2
 8005156:	701a      	strb	r2, [r3, #0]
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	09db      	lsrs	r3, r3, #7
 800515c:	61bb      	str	r3, [r7, #24]
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b7f      	cmp	r3, #127	@ 0x7f
 8005162:	d8f0      	bhi.n	8005146 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	61fa      	str	r2, [r7, #28]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	701a      	strb	r2, [r3, #0]
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	68f9      	ldr	r1, [r7, #12]
 8005178:	6938      	ldr	r0, [r7, #16]
 800517a:	f7ff fa2b 	bl	80045d4 <_SendPacket>
  RECORD_END();
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f383 8811 	msr	BASEPRI, r3
}
 8005184:	bf00      	nop
 8005186:	3720      	adds	r7, #32
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20014394 	.word	0x20014394

08005190 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005190:	b580      	push	{r7, lr}
 8005192:	b08c      	sub	sp, #48	@ 0x30
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800519c:	f3ef 8311 	mrs	r3, BASEPRI
 80051a0:	f04f 0120 	mov.w	r1, #32
 80051a4:	f381 8811 	msr	BASEPRI, r1
 80051a8:	61fb      	str	r3, [r7, #28]
 80051aa:	4825      	ldr	r0, [pc, #148]	@ (8005240 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80051ac:	f7ff f925 	bl	80043fa <_PreparePacket>
 80051b0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051be:	e00b      	b.n	80051d8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80051c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051c6:	1c59      	adds	r1, r3, #1
 80051c8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80051ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]
 80051d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d4:	09db      	lsrs	r3, r3, #7
 80051d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051da:	2b7f      	cmp	r3, #127	@ 0x7f
 80051dc:	d8f0      	bhi.n	80051c0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80051de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	623b      	str	r3, [r7, #32]
 80051f6:	e00b      	b.n	8005210 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fe:	1c59      	adds	r1, r3, #1
 8005200:	6279      	str	r1, [r7, #36]	@ 0x24
 8005202:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	09db      	lsrs	r3, r3, #7
 800520e:	623b      	str	r3, [r7, #32]
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	2b7f      	cmp	r3, #127	@ 0x7f
 8005214:	d8f0      	bhi.n	80051f8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	627a      	str	r2, [r7, #36]	@ 0x24
 800521c:	6a3a      	ldr	r2, [r7, #32]
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	6979      	ldr	r1, [r7, #20]
 800522a:	69b8      	ldr	r0, [r7, #24]
 800522c:	f7ff f9d2 	bl	80045d4 <_SendPacket>
  RECORD_END();
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f383 8811 	msr	BASEPRI, r3
}
 8005236:	bf00      	nop
 8005238:	3730      	adds	r7, #48	@ 0x30
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	20014394 	.word	0x20014394

08005244 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005244:	b580      	push	{r7, lr}
 8005246:	b08c      	sub	sp, #48	@ 0x30
 8005248:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800524a:	4b58      	ldr	r3, [pc, #352]	@ (80053ac <SEGGER_SYSVIEW_Start+0x168>)
 800524c:	2201      	movs	r2, #1
 800524e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005250:	f3ef 8311 	mrs	r3, BASEPRI
 8005254:	f04f 0120 	mov.w	r1, #32
 8005258:	f381 8811 	msr	BASEPRI, r1
 800525c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800525e:	4b53      	ldr	r3, [pc, #332]	@ (80053ac <SEGGER_SYSVIEW_Start+0x168>)
 8005260:	785b      	ldrb	r3, [r3, #1]
 8005262:	220a      	movs	r2, #10
 8005264:	4952      	ldr	r1, [pc, #328]	@ (80053b0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005266:	4618      	mov	r0, r3
 8005268:	f7fa ffb2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005272:	200a      	movs	r0, #10
 8005274:	f7ff ff32 	bl	80050dc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005278:	f3ef 8311 	mrs	r3, BASEPRI
 800527c:	f04f 0120 	mov.w	r1, #32
 8005280:	f381 8811 	msr	BASEPRI, r1
 8005284:	60bb      	str	r3, [r7, #8]
 8005286:	484b      	ldr	r0, [pc, #300]	@ (80053b4 <SEGGER_SYSVIEW_Start+0x170>)
 8005288:	f7ff f8b7 	bl	80043fa <_PreparePacket>
 800528c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005296:	4b45      	ldr	r3, [pc, #276]	@ (80053ac <SEGGER_SYSVIEW_Start+0x168>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800529c:	e00b      	b.n	80052b6 <SEGGER_SYSVIEW_Start+0x72>
 800529e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a4:	1c59      	adds	r1, r3, #1
 80052a6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80052a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	701a      	strb	r2, [r3, #0]
 80052b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b2:	09db      	lsrs	r3, r3, #7
 80052b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80052ba:	d8f0      	bhi.n	800529e <SEGGER_SYSVIEW_Start+0x5a>
 80052bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	701a      	strb	r2, [r3, #0]
 80052c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ca:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80052d0:	4b36      	ldr	r3, [pc, #216]	@ (80053ac <SEGGER_SYSVIEW_Start+0x168>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	623b      	str	r3, [r7, #32]
 80052d6:	e00b      	b.n	80052f0 <SEGGER_SYSVIEW_Start+0xac>
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052de:	1c59      	adds	r1, r3, #1
 80052e0:	6279      	str	r1, [r7, #36]	@ 0x24
 80052e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052e6:	b2d2      	uxtb	r2, r2
 80052e8:	701a      	strb	r2, [r3, #0]
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	09db      	lsrs	r3, r3, #7
 80052ee:	623b      	str	r3, [r7, #32]
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80052f4:	d8f0      	bhi.n	80052d8 <SEGGER_SYSVIEW_Start+0x94>
 80052f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80052fc:	6a3a      	ldr	r2, [r7, #32]
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	61fb      	str	r3, [r7, #28]
 800530a:	4b28      	ldr	r3, [pc, #160]	@ (80053ac <SEGGER_SYSVIEW_Start+0x168>)
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	61bb      	str	r3, [r7, #24]
 8005310:	e00b      	b.n	800532a <SEGGER_SYSVIEW_Start+0xe6>
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	b2da      	uxtb	r2, r3
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	1c59      	adds	r1, r3, #1
 800531a:	61f9      	str	r1, [r7, #28]
 800531c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	701a      	strb	r2, [r3, #0]
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	09db      	lsrs	r3, r3, #7
 8005328:	61bb      	str	r3, [r7, #24]
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	2b7f      	cmp	r3, #127	@ 0x7f
 800532e:	d8f0      	bhi.n	8005312 <SEGGER_SYSVIEW_Start+0xce>
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	61fa      	str	r2, [r7, #28]
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	701a      	strb	r2, [r3, #0]
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	2300      	movs	r3, #0
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	e00b      	b.n	8005362 <SEGGER_SYSVIEW_Start+0x11e>
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	b2da      	uxtb	r2, r3
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	1c59      	adds	r1, r3, #1
 8005352:	6179      	str	r1, [r7, #20]
 8005354:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	701a      	strb	r2, [r3, #0]
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	09db      	lsrs	r3, r3, #7
 8005360:	613b      	str	r3, [r7, #16]
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	2b7f      	cmp	r3, #127	@ 0x7f
 8005366:	d8f0      	bhi.n	800534a <SEGGER_SYSVIEW_Start+0x106>
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	617a      	str	r2, [r7, #20]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	701a      	strb	r2, [r3, #0]
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005378:	2218      	movs	r2, #24
 800537a:	6839      	ldr	r1, [r7, #0]
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff f929 	bl	80045d4 <_SendPacket>
      RECORD_END();
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005388:	4b08      	ldr	r3, [pc, #32]	@ (80053ac <SEGGER_SYSVIEW_Start+0x168>)
 800538a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005390:	4b06      	ldr	r3, [pc, #24]	@ (80053ac <SEGGER_SYSVIEW_Start+0x168>)
 8005392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005394:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005396:	f000 f9eb 	bl	8005770 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800539a:	f000 f9b1 	bl	8005700 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800539e:	f000 fcb1 	bl	8005d04 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80053a2:	bf00      	nop
 80053a4:	3730      	adds	r7, #48	@ 0x30
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20014364 	.word	0x20014364
 80053b0:	0800700c 	.word	0x0800700c
 80053b4:	20014394 	.word	0x20014394

080053b8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80053be:	f3ef 8311 	mrs	r3, BASEPRI
 80053c2:	f04f 0120 	mov.w	r1, #32
 80053c6:	f381 8811 	msr	BASEPRI, r1
 80053ca:	607b      	str	r3, [r7, #4]
 80053cc:	480b      	ldr	r0, [pc, #44]	@ (80053fc <SEGGER_SYSVIEW_Stop+0x44>)
 80053ce:	f7ff f814 	bl	80043fa <_PreparePacket>
 80053d2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80053d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005400 <SEGGER_SYSVIEW_Stop+0x48>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d007      	beq.n	80053ec <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80053dc:	220b      	movs	r2, #11
 80053de:	6839      	ldr	r1, [r7, #0]
 80053e0:	6838      	ldr	r0, [r7, #0]
 80053e2:	f7ff f8f7 	bl	80045d4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80053e6:	4b06      	ldr	r3, [pc, #24]	@ (8005400 <SEGGER_SYSVIEW_Stop+0x48>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f383 8811 	msr	BASEPRI, r3
}
 80053f2:	bf00      	nop
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	20014394 	.word	0x20014394
 8005400:	20014364 	.word	0x20014364

08005404 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005404:	b580      	push	{r7, lr}
 8005406:	b08c      	sub	sp, #48	@ 0x30
 8005408:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800540a:	f3ef 8311 	mrs	r3, BASEPRI
 800540e:	f04f 0120 	mov.w	r1, #32
 8005412:	f381 8811 	msr	BASEPRI, r1
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	4845      	ldr	r0, [pc, #276]	@ (8005530 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800541a:	f7fe ffee 	bl	80043fa <_PreparePacket>
 800541e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005428:	4b42      	ldr	r3, [pc, #264]	@ (8005534 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800542e:	e00b      	b.n	8005448 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005432:	b2da      	uxtb	r2, r3
 8005434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005436:	1c59      	adds	r1, r3, #1
 8005438:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800543a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	701a      	strb	r2, [r3, #0]
 8005442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005444:	09db      	lsrs	r3, r3, #7
 8005446:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544a:	2b7f      	cmp	r3, #127	@ 0x7f
 800544c:	d8f0      	bhi.n	8005430 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800544e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005454:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	701a      	strb	r2, [r3, #0]
 800545a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800545c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	627b      	str	r3, [r7, #36]	@ 0x24
 8005462:	4b34      	ldr	r3, [pc, #208]	@ (8005534 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	623b      	str	r3, [r7, #32]
 8005468:	e00b      	b.n	8005482 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	b2da      	uxtb	r2, r3
 800546e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005470:	1c59      	adds	r1, r3, #1
 8005472:	6279      	str	r1, [r7, #36]	@ 0x24
 8005474:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	701a      	strb	r2, [r3, #0]
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	09db      	lsrs	r3, r3, #7
 8005480:	623b      	str	r3, [r7, #32]
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	2b7f      	cmp	r3, #127	@ 0x7f
 8005486:	d8f0      	bhi.n	800546a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	627a      	str	r2, [r7, #36]	@ 0x24
 800548e:	6a3a      	ldr	r2, [r7, #32]
 8005490:	b2d2      	uxtb	r2, r2
 8005492:	701a      	strb	r2, [r3, #0]
 8005494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005496:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	61fb      	str	r3, [r7, #28]
 800549c:	4b25      	ldr	r3, [pc, #148]	@ (8005534 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	61bb      	str	r3, [r7, #24]
 80054a2:	e00b      	b.n	80054bc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	1c59      	adds	r1, r3, #1
 80054ac:	61f9      	str	r1, [r7, #28]
 80054ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	701a      	strb	r2, [r3, #0]
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	09db      	lsrs	r3, r3, #7
 80054ba:	61bb      	str	r3, [r7, #24]
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	2b7f      	cmp	r3, #127	@ 0x7f
 80054c0:	d8f0      	bhi.n	80054a4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	61fa      	str	r2, [r7, #28]
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	701a      	strb	r2, [r3, #0]
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	2300      	movs	r3, #0
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	e00b      	b.n	80054f4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	1c59      	adds	r1, r3, #1
 80054e4:	6179      	str	r1, [r7, #20]
 80054e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	09db      	lsrs	r3, r3, #7
 80054f2:	613b      	str	r3, [r7, #16]
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80054f8:	d8f0      	bhi.n	80054dc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	617a      	str	r2, [r7, #20]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800550a:	2218      	movs	r2, #24
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	68b8      	ldr	r0, [r7, #8]
 8005510:	f7ff f860 	bl	80045d4 <_SendPacket>
  RECORD_END();
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800551a:	4b06      	ldr	r3, [pc, #24]	@ (8005534 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800551c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005522:	4b04      	ldr	r3, [pc, #16]	@ (8005534 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005526:	4798      	blx	r3
  }
}
 8005528:	bf00      	nop
 800552a:	3730      	adds	r7, #48	@ 0x30
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	20014394 	.word	0x20014394
 8005534:	20014364 	.word	0x20014364

08005538 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005538:	b580      	push	{r7, lr}
 800553a:	b092      	sub	sp, #72	@ 0x48
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005540:	f3ef 8311 	mrs	r3, BASEPRI
 8005544:	f04f 0120 	mov.w	r1, #32
 8005548:	f381 8811 	msr	BASEPRI, r1
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	486a      	ldr	r0, [pc, #424]	@ (80056f8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005550:	f7fe ff53 	bl	80043fa <_PreparePacket>
 8005554:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	647b      	str	r3, [r7, #68]	@ 0x44
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	4b66      	ldr	r3, [pc, #408]	@ (80056fc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	643b      	str	r3, [r7, #64]	@ 0x40
 800556a:	e00b      	b.n	8005584 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800556c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800556e:	b2da      	uxtb	r2, r3
 8005570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005572:	1c59      	adds	r1, r3, #1
 8005574:	6479      	str	r1, [r7, #68]	@ 0x44
 8005576:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005580:	09db      	lsrs	r3, r3, #7
 8005582:	643b      	str	r3, [r7, #64]	@ 0x40
 8005584:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005586:	2b7f      	cmp	r3, #127	@ 0x7f
 8005588:	d8f0      	bhi.n	800556c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800558a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005590:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005598:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055a4:	e00b      	b.n	80055be <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80055a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ac:	1c59      	adds	r1, r3, #1
 80055ae:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80055b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	701a      	strb	r2, [r3, #0]
 80055b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ba:	09db      	lsrs	r3, r3, #7
 80055bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80055c2:	d8f0      	bhi.n	80055a6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80055c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80055ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	701a      	strb	r2, [r3, #0]
 80055d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055d2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2220      	movs	r2, #32
 80055da:	4619      	mov	r1, r3
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f7fe fed3 	bl	8004388 <_EncodeStr>
 80055e2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80055e4:	2209      	movs	r2, #9
 80055e6:	68f9      	ldr	r1, [r7, #12]
 80055e8:	6938      	ldr	r0, [r7, #16]
 80055ea:	f7fe fff3 	bl	80045d4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4b40      	ldr	r3, [pc, #256]	@ (80056fc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	633b      	str	r3, [r7, #48]	@ 0x30
 8005602:	e00b      	b.n	800561c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005606:	b2da      	uxtb	r2, r3
 8005608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800560a:	1c59      	adds	r1, r3, #1
 800560c:	6379      	str	r1, [r7, #52]	@ 0x34
 800560e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	701a      	strb	r2, [r3, #0]
 8005616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005618:	09db      	lsrs	r3, r3, #7
 800561a:	633b      	str	r3, [r7, #48]	@ 0x30
 800561c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005620:	d8f0      	bhi.n	8005604 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	637a      	str	r2, [r7, #52]	@ 0x34
 8005628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800562a:	b2d2      	uxtb	r2, r2
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005630:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800563c:	e00b      	b.n	8005656 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800563e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005640:	b2da      	uxtb	r2, r3
 8005642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005644:	1c59      	adds	r1, r3, #1
 8005646:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005648:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005652:	09db      	lsrs	r3, r3, #7
 8005654:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005658:	2b7f      	cmp	r3, #127	@ 0x7f
 800565a:	d8f0      	bhi.n	800563e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800565c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005662:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800566a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	623b      	str	r3, [r7, #32]
 8005676:	e00b      	b.n	8005690 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	b2da      	uxtb	r2, r3
 800567c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567e:	1c59      	adds	r1, r3, #1
 8005680:	6279      	str	r1, [r7, #36]	@ 0x24
 8005682:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	09db      	lsrs	r3, r3, #7
 800568e:	623b      	str	r3, [r7, #32]
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	2b7f      	cmp	r3, #127	@ 0x7f
 8005694:	d8f0      	bhi.n	8005678 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	627a      	str	r2, [r7, #36]	@ 0x24
 800569c:	6a3a      	ldr	r2, [r7, #32]
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	701a      	strb	r2, [r3, #0]
 80056a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	61fb      	str	r3, [r7, #28]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	61bb      	str	r3, [r7, #24]
 80056b0:	e00b      	b.n	80056ca <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	1c59      	adds	r1, r3, #1
 80056ba:	61f9      	str	r1, [r7, #28]
 80056bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056c0:	b2d2      	uxtb	r2, r2
 80056c2:	701a      	strb	r2, [r3, #0]
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	09db      	lsrs	r3, r3, #7
 80056c8:	61bb      	str	r3, [r7, #24]
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80056ce:	d8f0      	bhi.n	80056b2 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	61fa      	str	r2, [r7, #28]
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	701a      	strb	r2, [r3, #0]
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80056e0:	2215      	movs	r2, #21
 80056e2:	68f9      	ldr	r1, [r7, #12]
 80056e4:	6938      	ldr	r0, [r7, #16]
 80056e6:	f7fe ff75 	bl	80045d4 <_SendPacket>
  RECORD_END();
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f383 8811 	msr	BASEPRI, r3
}
 80056f0:	bf00      	nop
 80056f2:	3748      	adds	r7, #72	@ 0x48
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	20014394 	.word	0x20014394
 80056fc:	20014364 	.word	0x20014364

08005700 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005700:	b580      	push	{r7, lr}
 8005702:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005704:	4b07      	ldr	r3, [pc, #28]	@ (8005724 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d008      	beq.n	800571e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800570c:	4b05      	ldr	r3, [pc, #20]	@ (8005724 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005716:	4b03      	ldr	r3, [pc, #12]	@ (8005724 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	4798      	blx	r3
  }
}
 800571e:	bf00      	nop
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	20014364 	.word	0x20014364

08005728 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005730:	f3ef 8311 	mrs	r3, BASEPRI
 8005734:	f04f 0120 	mov.w	r1, #32
 8005738:	f381 8811 	msr	BASEPRI, r1
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	480b      	ldr	r0, [pc, #44]	@ (800576c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005740:	f7fe fe5b 	bl	80043fa <_PreparePacket>
 8005744:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005746:	2280      	movs	r2, #128	@ 0x80
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	6938      	ldr	r0, [r7, #16]
 800574c:	f7fe fe1c 	bl	8004388 <_EncodeStr>
 8005750:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005752:	220e      	movs	r2, #14
 8005754:	68f9      	ldr	r1, [r7, #12]
 8005756:	6938      	ldr	r0, [r7, #16]
 8005758:	f7fe ff3c 	bl	80045d4 <_SendPacket>
  RECORD_END();
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f383 8811 	msr	BASEPRI, r3
}
 8005762:	bf00      	nop
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	20014394 	.word	0x20014394

08005770 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005770:	b590      	push	{r4, r7, lr}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005776:	4b15      	ldr	r3, [pc, #84]	@ (80057cc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d01a      	beq.n	80057b4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800577e:	4b13      	ldr	r3, [pc, #76]	@ (80057cc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d015      	beq.n	80057b4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005788:	4b10      	ldr	r3, [pc, #64]	@ (80057cc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4798      	blx	r3
 8005790:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005794:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005796:	e9d7 0100 	ldrd	r0, r1, [r7]
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	f04f 0300 	mov.w	r3, #0
 80057a2:	000a      	movs	r2, r1
 80057a4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80057a6:	4613      	mov	r3, r2
 80057a8:	461a      	mov	r2, r3
 80057aa:	4621      	mov	r1, r4
 80057ac:	200d      	movs	r0, #13
 80057ae:	f7ff fcef 	bl	8005190 <SEGGER_SYSVIEW_RecordU32x2>
 80057b2:	e006      	b.n	80057c2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80057b4:	4b06      	ldr	r3, [pc, #24]	@ (80057d0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4619      	mov	r1, r3
 80057ba:	200c      	movs	r0, #12
 80057bc:	f7ff fcac 	bl	8005118 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80057c0:	bf00      	nop
 80057c2:	bf00      	nop
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd90      	pop	{r4, r7, pc}
 80057ca:	bf00      	nop
 80057cc:	20014364 	.word	0x20014364
 80057d0:	e0001004 	.word	0xe0001004

080057d4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80057da:	f3ef 8311 	mrs	r3, BASEPRI
 80057de:	f04f 0120 	mov.w	r1, #32
 80057e2:	f381 8811 	msr	BASEPRI, r1
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	4819      	ldr	r0, [pc, #100]	@ (8005850 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80057ea:	f7fe fe06 	bl	80043fa <_PreparePacket>
 80057ee:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80057f4:	4b17      	ldr	r3, [pc, #92]	@ (8005854 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057fc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	617b      	str	r3, [r7, #20]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	613b      	str	r3, [r7, #16]
 8005806:	e00b      	b.n	8005820 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	b2da      	uxtb	r2, r3
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	1c59      	adds	r1, r3, #1
 8005810:	6179      	str	r1, [r7, #20]
 8005812:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005816:	b2d2      	uxtb	r2, r2
 8005818:	701a      	strb	r2, [r3, #0]
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	09db      	lsrs	r3, r3, #7
 800581e:	613b      	str	r3, [r7, #16]
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	2b7f      	cmp	r3, #127	@ 0x7f
 8005824:	d8f0      	bhi.n	8005808 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	617a      	str	r2, [r7, #20]
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	b2d2      	uxtb	r2, r2
 8005830:	701a      	strb	r2, [r3, #0]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005836:	2202      	movs	r2, #2
 8005838:	6879      	ldr	r1, [r7, #4]
 800583a:	68b8      	ldr	r0, [r7, #8]
 800583c:	f7fe feca 	bl	80045d4 <_SendPacket>
  RECORD_END();
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f383 8811 	msr	BASEPRI, r3
}
 8005846:	bf00      	nop
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20014394 	.word	0x20014394
 8005854:	e000ed04 	.word	0xe000ed04

08005858 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800585e:	f3ef 8311 	mrs	r3, BASEPRI
 8005862:	f04f 0120 	mov.w	r1, #32
 8005866:	f381 8811 	msr	BASEPRI, r1
 800586a:	607b      	str	r3, [r7, #4]
 800586c:	4807      	ldr	r0, [pc, #28]	@ (800588c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800586e:	f7fe fdc4 	bl	80043fa <_PreparePacket>
 8005872:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005874:	2203      	movs	r2, #3
 8005876:	6839      	ldr	r1, [r7, #0]
 8005878:	6838      	ldr	r0, [r7, #0]
 800587a:	f7fe feab 	bl	80045d4 <_SendPacket>
  RECORD_END();
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f383 8811 	msr	BASEPRI, r3
}
 8005884:	bf00      	nop
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	20014394 	.word	0x20014394

08005890 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005896:	f3ef 8311 	mrs	r3, BASEPRI
 800589a:	f04f 0120 	mov.w	r1, #32
 800589e:	f381 8811 	msr	BASEPRI, r1
 80058a2:	607b      	str	r3, [r7, #4]
 80058a4:	4807      	ldr	r0, [pc, #28]	@ (80058c4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80058a6:	f7fe fda8 	bl	80043fa <_PreparePacket>
 80058aa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80058ac:	2212      	movs	r2, #18
 80058ae:	6839      	ldr	r1, [r7, #0]
 80058b0:	6838      	ldr	r0, [r7, #0]
 80058b2:	f7fe fe8f 	bl	80045d4 <_SendPacket>
  RECORD_END();
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f383 8811 	msr	BASEPRI, r3
}
 80058bc:	bf00      	nop
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	20014394 	.word	0x20014394

080058c8 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b088      	sub	sp, #32
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80058d0:	f3ef 8311 	mrs	r3, BASEPRI
 80058d4:	f04f 0120 	mov.w	r1, #32
 80058d8:	f381 8811 	msr	BASEPRI, r1
 80058dc:	617b      	str	r3, [r7, #20]
 80058de:	4817      	ldr	r0, [pc, #92]	@ (800593c <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 80058e0:	f7fe fd8b 	bl	80043fa <_PreparePacket>
 80058e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	61fb      	str	r3, [r7, #28]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	e00b      	b.n	800590c <SEGGER_SYSVIEW_RecordEndCall+0x44>
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	1c59      	adds	r1, r3, #1
 80058fc:	61f9      	str	r1, [r7, #28]
 80058fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	701a      	strb	r2, [r3, #0]
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	09db      	lsrs	r3, r3, #7
 800590a:	61bb      	str	r3, [r7, #24]
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005910:	d8f0      	bhi.n	80058f4 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	61fa      	str	r2, [r7, #28]
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005922:	221c      	movs	r2, #28
 8005924:	68f9      	ldr	r1, [r7, #12]
 8005926:	6938      	ldr	r0, [r7, #16]
 8005928:	f7fe fe54 	bl	80045d4 <_SendPacket>
  RECORD_END();
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f383 8811 	msr	BASEPRI, r3
}
 8005932:	bf00      	nop
 8005934:	3720      	adds	r7, #32
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20014394 	.word	0x20014394

08005940 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8005940:	b580      	push	{r7, lr}
 8005942:	b08a      	sub	sp, #40	@ 0x28
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800594a:	f3ef 8311 	mrs	r3, BASEPRI
 800594e:	f04f 0120 	mov.w	r1, #32
 8005952:	f381 8811 	msr	BASEPRI, r1
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	4824      	ldr	r0, [pc, #144]	@ (80059ec <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 800595a:	f7fe fd4e 	bl	80043fa <_PreparePacket>
 800595e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	627b      	str	r3, [r7, #36]	@ 0x24
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	623b      	str	r3, [r7, #32]
 800596c:	e00b      	b.n	8005986 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	b2da      	uxtb	r2, r3
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	1c59      	adds	r1, r3, #1
 8005976:	6279      	str	r1, [r7, #36]	@ 0x24
 8005978:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	701a      	strb	r2, [r3, #0]
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	09db      	lsrs	r3, r3, #7
 8005984:	623b      	str	r3, [r7, #32]
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	2b7f      	cmp	r3, #127	@ 0x7f
 800598a:	d8f0      	bhi.n	800596e <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 800598c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	627a      	str	r2, [r7, #36]	@ 0x24
 8005992:	6a3a      	ldr	r2, [r7, #32]
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	701a      	strb	r2, [r3, #0]
 8005998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	61fb      	str	r3, [r7, #28]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	61bb      	str	r3, [r7, #24]
 80059a4:	e00b      	b.n	80059be <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	1c59      	adds	r1, r3, #1
 80059ae:	61f9      	str	r1, [r7, #28]
 80059b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	09db      	lsrs	r3, r3, #7
 80059bc:	61bb      	str	r3, [r7, #24]
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80059c2:	d8f0      	bhi.n	80059a6 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	61fa      	str	r2, [r7, #28]
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80059d4:	221c      	movs	r2, #28
 80059d6:	68f9      	ldr	r1, [r7, #12]
 80059d8:	6938      	ldr	r0, [r7, #16]
 80059da:	f7fe fdfb 	bl	80045d4 <_SendPacket>
  RECORD_END();
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f383 8811 	msr	BASEPRI, r3
}
 80059e4:	bf00      	nop
 80059e6:	3728      	adds	r7, #40	@ 0x28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	20014394 	.word	0x20014394

080059f0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80059f6:	f3ef 8311 	mrs	r3, BASEPRI
 80059fa:	f04f 0120 	mov.w	r1, #32
 80059fe:	f381 8811 	msr	BASEPRI, r1
 8005a02:	607b      	str	r3, [r7, #4]
 8005a04:	4807      	ldr	r0, [pc, #28]	@ (8005a24 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005a06:	f7fe fcf8 	bl	80043fa <_PreparePacket>
 8005a0a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005a0c:	2211      	movs	r2, #17
 8005a0e:	6839      	ldr	r1, [r7, #0]
 8005a10:	6838      	ldr	r0, [r7, #0]
 8005a12:	f7fe fddf 	bl	80045d4 <_SendPacket>
  RECORD_END();
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f383 8811 	msr	BASEPRI, r3
}
 8005a1c:	bf00      	nop
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	20014394 	.word	0x20014394

08005a28 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a30:	f3ef 8311 	mrs	r3, BASEPRI
 8005a34:	f04f 0120 	mov.w	r1, #32
 8005a38:	f381 8811 	msr	BASEPRI, r1
 8005a3c:	617b      	str	r3, [r7, #20]
 8005a3e:	4819      	ldr	r0, [pc, #100]	@ (8005aa4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005a40:	f7fe fcdb 	bl	80043fa <_PreparePacket>
 8005a44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005a4a:	4b17      	ldr	r3, [pc, #92]	@ (8005aa8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	61fb      	str	r3, [r7, #28]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	61bb      	str	r3, [r7, #24]
 8005a5c:	e00b      	b.n	8005a76 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	1c59      	adds	r1, r3, #1
 8005a66:	61f9      	str	r1, [r7, #28]
 8005a68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a6c:	b2d2      	uxtb	r2, r2
 8005a6e:	701a      	strb	r2, [r3, #0]
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	09db      	lsrs	r3, r3, #7
 8005a74:	61bb      	str	r3, [r7, #24]
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a7a:	d8f0      	bhi.n	8005a5e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	61fa      	str	r2, [r7, #28]
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	701a      	strb	r2, [r3, #0]
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005a8c:	2208      	movs	r2, #8
 8005a8e:	68f9      	ldr	r1, [r7, #12]
 8005a90:	6938      	ldr	r0, [r7, #16]
 8005a92:	f7fe fd9f 	bl	80045d4 <_SendPacket>
  RECORD_END();
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f383 8811 	msr	BASEPRI, r3
}
 8005a9c:	bf00      	nop
 8005a9e:	3720      	adds	r7, #32
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	20014394 	.word	0x20014394
 8005aa8:	20014364 	.word	0x20014364

08005aac <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b088      	sub	sp, #32
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ab4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ab8:	f04f 0120 	mov.w	r1, #32
 8005abc:	f381 8811 	msr	BASEPRI, r1
 8005ac0:	617b      	str	r3, [r7, #20]
 8005ac2:	4819      	ldr	r0, [pc, #100]	@ (8005b28 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005ac4:	f7fe fc99 	bl	80043fa <_PreparePacket>
 8005ac8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005ace:	4b17      	ldr	r3, [pc, #92]	@ (8005b2c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	61fb      	str	r3, [r7, #28]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	61bb      	str	r3, [r7, #24]
 8005ae0:	e00b      	b.n	8005afa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	1c59      	adds	r1, r3, #1
 8005aea:	61f9      	str	r1, [r7, #28]
 8005aec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	701a      	strb	r2, [r3, #0]
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	09db      	lsrs	r3, r3, #7
 8005af8:	61bb      	str	r3, [r7, #24]
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005afe:	d8f0      	bhi.n	8005ae2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	61fa      	str	r2, [r7, #28]
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	b2d2      	uxtb	r2, r2
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005b10:	2204      	movs	r2, #4
 8005b12:	68f9      	ldr	r1, [r7, #12]
 8005b14:	6938      	ldr	r0, [r7, #16]
 8005b16:	f7fe fd5d 	bl	80045d4 <_SendPacket>
  RECORD_END();
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f383 8811 	msr	BASEPRI, r3
}
 8005b20:	bf00      	nop
 8005b22:	3720      	adds	r7, #32
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	20014394 	.word	0x20014394
 8005b2c:	20014364 	.word	0x20014364

08005b30 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005b38:	f3ef 8311 	mrs	r3, BASEPRI
 8005b3c:	f04f 0120 	mov.w	r1, #32
 8005b40:	f381 8811 	msr	BASEPRI, r1
 8005b44:	617b      	str	r3, [r7, #20]
 8005b46:	4819      	ldr	r0, [pc, #100]	@ (8005bac <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005b48:	f7fe fc57 	bl	80043fa <_PreparePacket>
 8005b4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005b52:	4b17      	ldr	r3, [pc, #92]	@ (8005bb0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	61fb      	str	r3, [r7, #28]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	61bb      	str	r3, [r7, #24]
 8005b64:	e00b      	b.n	8005b7e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	1c59      	adds	r1, r3, #1
 8005b6e:	61f9      	str	r1, [r7, #28]
 8005b70:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b74:	b2d2      	uxtb	r2, r2
 8005b76:	701a      	strb	r2, [r3, #0]
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	09db      	lsrs	r3, r3, #7
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b82:	d8f0      	bhi.n	8005b66 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	61fa      	str	r2, [r7, #28]
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	701a      	strb	r2, [r3, #0]
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005b94:	2206      	movs	r2, #6
 8005b96:	68f9      	ldr	r1, [r7, #12]
 8005b98:	6938      	ldr	r0, [r7, #16]
 8005b9a:	f7fe fd1b 	bl	80045d4 <_SendPacket>
  RECORD_END();
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f383 8811 	msr	BASEPRI, r3
}
 8005ba4:	bf00      	nop
 8005ba6:	3720      	adds	r7, #32
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	20014394 	.word	0x20014394
 8005bb0:	20014364 	.word	0x20014364

08005bb4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08c      	sub	sp, #48	@ 0x30
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005bbe:	4b40      	ldr	r3, [pc, #256]	@ (8005cc0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d077      	beq.n	8005cb6 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8005cc0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005bcc:	2300      	movs	r3, #0
 8005bce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bd0:	e008      	b.n	8005be4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d007      	beq.n	8005bee <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be0:	3301      	adds	r3, #1
 8005be2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005be4:	79fb      	ldrb	r3, [r7, #7]
 8005be6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d3f2      	bcc.n	8005bd2 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005bec:	e000      	b.n	8005bf0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005bee:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d055      	beq.n	8005ca2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005bf6:	f3ef 8311 	mrs	r3, BASEPRI
 8005bfa:	f04f 0120 	mov.w	r1, #32
 8005bfe:	f381 8811 	msr	BASEPRI, r1
 8005c02:	617b      	str	r3, [r7, #20]
 8005c04:	482f      	ldr	r0, [pc, #188]	@ (8005cc4 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005c06:	f7fe fbf8 	bl	80043fa <_PreparePacket>
 8005c0a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c14:	79fb      	ldrb	r3, [r7, #7]
 8005c16:	623b      	str	r3, [r7, #32]
 8005c18:	e00b      	b.n	8005c32 <SEGGER_SYSVIEW_SendModule+0x7e>
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c20:	1c59      	adds	r1, r3, #1
 8005c22:	6279      	str	r1, [r7, #36]	@ 0x24
 8005c24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c28:	b2d2      	uxtb	r2, r2
 8005c2a:	701a      	strb	r2, [r3, #0]
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	09db      	lsrs	r3, r3, #7
 8005c30:	623b      	str	r3, [r7, #32]
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c36:	d8f0      	bhi.n	8005c1a <SEGGER_SYSVIEW_SendModule+0x66>
 8005c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c3e:	6a3a      	ldr	r2, [r7, #32]
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	701a      	strb	r2, [r3, #0]
 8005c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c46:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	61fb      	str	r3, [r7, #28]
 8005c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	61bb      	str	r3, [r7, #24]
 8005c52:	e00b      	b.n	8005c6c <SEGGER_SYSVIEW_SendModule+0xb8>
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	1c59      	adds	r1, r3, #1
 8005c5c:	61f9      	str	r1, [r7, #28]
 8005c5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c62:	b2d2      	uxtb	r2, r2
 8005c64:	701a      	strb	r2, [r3, #0]
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	09db      	lsrs	r3, r3, #7
 8005c6a:	61bb      	str	r3, [r7, #24]
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c70:	d8f0      	bhi.n	8005c54 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	61fa      	str	r2, [r7, #28]
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2280      	movs	r2, #128	@ 0x80
 8005c88:	4619      	mov	r1, r3
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f7fe fb7c 	bl	8004388 <_EncodeStr>
 8005c90:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005c92:	2216      	movs	r2, #22
 8005c94:	68f9      	ldr	r1, [r7, #12]
 8005c96:	6938      	ldr	r0, [r7, #16]
 8005c98:	f7fe fc9c 	bl	80045d4 <_SendPacket>
      RECORD_END();
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d006      	beq.n	8005cb6 <SEGGER_SYSVIEW_SendModule+0x102>
 8005ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	4798      	blx	r3
    }
  }
}
 8005cb6:	bf00      	nop
 8005cb8:	3730      	adds	r7, #48	@ 0x30
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	2001438c 	.word	0x2001438c
 8005cc4:	20014394 	.word	0x20014394

08005cc8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005cce:	4b0c      	ldr	r3, [pc, #48]	@ (8005d00 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00f      	beq.n	8005cf6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8005d00 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1f2      	bne.n	8005cdc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005cf6:	bf00      	nop
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	2001438c 	.word	0x2001438c

08005d04 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005d0a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d0e:	f04f 0120 	mov.w	r1, #32
 8005d12:	f381 8811 	msr	BASEPRI, r1
 8005d16:	60fb      	str	r3, [r7, #12]
 8005d18:	4817      	ldr	r0, [pc, #92]	@ (8005d78 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005d1a:	f7fe fb6e 	bl	80043fa <_PreparePacket>
 8005d1e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	4b14      	ldr	r3, [pc, #80]	@ (8005d7c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	613b      	str	r3, [r7, #16]
 8005d2e:	e00b      	b.n	8005d48 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	1c59      	adds	r1, r3, #1
 8005d38:	6179      	str	r1, [r7, #20]
 8005d3a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d3e:	b2d2      	uxtb	r2, r2
 8005d40:	701a      	strb	r2, [r3, #0]
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	09db      	lsrs	r3, r3, #7
 8005d46:	613b      	str	r3, [r7, #16]
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d4c:	d8f0      	bhi.n	8005d30 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	617a      	str	r2, [r7, #20]
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005d5e:	221b      	movs	r2, #27
 8005d60:	6879      	ldr	r1, [r7, #4]
 8005d62:	68b8      	ldr	r0, [r7, #8]
 8005d64:	f7fe fc36 	bl	80045d4 <_SendPacket>
  RECORD_END();
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f383 8811 	msr	BASEPRI, r3
}
 8005d6e:	bf00      	nop
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20014394 	.word	0x20014394
 8005d7c:	20014390 	.word	0x20014390

08005d80 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005d80:	b40f      	push	{r0, r1, r2, r3}
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b082      	sub	sp, #8
 8005d86:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005d88:	f107 0314 	add.w	r3, r7, #20
 8005d8c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005d8e:	1d3b      	adds	r3, r7, #4
 8005d90:	461a      	mov	r2, r3
 8005d92:	2100      	movs	r1, #0
 8005d94:	6938      	ldr	r0, [r7, #16]
 8005d96:	f7fe ff2d 	bl	8004bf4 <_VPrintTarget>
  va_end(ParamList);
}
 8005d9a:	bf00      	nop
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005da4:	b004      	add	sp, #16
 8005da6:	4770      	bx	lr

08005da8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08a      	sub	sp, #40	@ 0x28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005db0:	f3ef 8311 	mrs	r3, BASEPRI
 8005db4:	f04f 0120 	mov.w	r1, #32
 8005db8:	f381 8811 	msr	BASEPRI, r1
 8005dbc:	617b      	str	r3, [r7, #20]
 8005dbe:	4827      	ldr	r0, [pc, #156]	@ (8005e5c <SEGGER_SYSVIEW_Warn+0xb4>)
 8005dc0:	f7fe fb1b 	bl	80043fa <_PreparePacket>
 8005dc4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005dc6:	2280      	movs	r2, #128	@ 0x80
 8005dc8:	6879      	ldr	r1, [r7, #4]
 8005dca:	6938      	ldr	r0, [r7, #16]
 8005dcc:	f7fe fadc 	bl	8004388 <_EncodeStr>
 8005dd0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	623b      	str	r3, [r7, #32]
 8005dda:	e00b      	b.n	8005df4 <SEGGER_SYSVIEW_Warn+0x4c>
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de2:	1c59      	adds	r1, r3, #1
 8005de4:	6279      	str	r1, [r7, #36]	@ 0x24
 8005de6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	09db      	lsrs	r3, r3, #7
 8005df2:	623b      	str	r3, [r7, #32]
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005df8:	d8f0      	bhi.n	8005ddc <SEGGER_SYSVIEW_Warn+0x34>
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e00:	6a3a      	ldr	r2, [r7, #32]
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]
 8005e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	61fb      	str	r3, [r7, #28]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	61bb      	str	r3, [r7, #24]
 8005e12:	e00b      	b.n	8005e2c <SEGGER_SYSVIEW_Warn+0x84>
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	1c59      	adds	r1, r3, #1
 8005e1c:	61f9      	str	r1, [r7, #28]
 8005e1e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	09db      	lsrs	r3, r3, #7
 8005e2a:	61bb      	str	r3, [r7, #24]
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e30:	d8f0      	bhi.n	8005e14 <SEGGER_SYSVIEW_Warn+0x6c>
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	61fa      	str	r2, [r7, #28]
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	b2d2      	uxtb	r2, r2
 8005e3c:	701a      	strb	r2, [r3, #0]
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005e42:	221a      	movs	r2, #26
 8005e44:	68f9      	ldr	r1, [r7, #12]
 8005e46:	6938      	ldr	r0, [r7, #16]
 8005e48:	f7fe fbc4 	bl	80045d4 <_SendPacket>
  RECORD_END();
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f383 8811 	msr	BASEPRI, r3
}
 8005e52:	bf00      	nop
 8005e54:	3728      	adds	r7, #40	@ 0x28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20014394 	.word	0x20014394

08005e60 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	2000      	movs	r0, #0
 8005e74:	f7fe f992 	bl	800419c <SEGGER_RTT_Write>
  return len;
 8005e78:	683b      	ldr	r3, [r7, #0]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <sniprintf>:
 8005e84:	b40c      	push	{r2, r3}
 8005e86:	b530      	push	{r4, r5, lr}
 8005e88:	4b18      	ldr	r3, [pc, #96]	@ (8005eec <sniprintf+0x68>)
 8005e8a:	1e0c      	subs	r4, r1, #0
 8005e8c:	681d      	ldr	r5, [r3, #0]
 8005e8e:	b09d      	sub	sp, #116	@ 0x74
 8005e90:	da08      	bge.n	8005ea4 <sniprintf+0x20>
 8005e92:	238b      	movs	r3, #139	@ 0x8b
 8005e94:	602b      	str	r3, [r5, #0]
 8005e96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e9a:	b01d      	add	sp, #116	@ 0x74
 8005e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ea0:	b002      	add	sp, #8
 8005ea2:	4770      	bx	lr
 8005ea4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005ea8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005eac:	f04f 0300 	mov.w	r3, #0
 8005eb0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005eb2:	bf14      	ite	ne
 8005eb4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8005eb8:	4623      	moveq	r3, r4
 8005eba:	9304      	str	r3, [sp, #16]
 8005ebc:	9307      	str	r3, [sp, #28]
 8005ebe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ec2:	9002      	str	r0, [sp, #8]
 8005ec4:	9006      	str	r0, [sp, #24]
 8005ec6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005eca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005ecc:	ab21      	add	r3, sp, #132	@ 0x84
 8005ece:	a902      	add	r1, sp, #8
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	9301      	str	r3, [sp, #4]
 8005ed4:	f000 f9da 	bl	800628c <_svfiprintf_r>
 8005ed8:	1c43      	adds	r3, r0, #1
 8005eda:	bfbc      	itt	lt
 8005edc:	238b      	movlt	r3, #139	@ 0x8b
 8005ede:	602b      	strlt	r3, [r5, #0]
 8005ee0:	2c00      	cmp	r4, #0
 8005ee2:	d0da      	beq.n	8005e9a <sniprintf+0x16>
 8005ee4:	9b02      	ldr	r3, [sp, #8]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	e7d6      	b.n	8005e9a <sniprintf+0x16>
 8005eec:	2000001c 	.word	0x2000001c

08005ef0 <std>:
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	b510      	push	{r4, lr}
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	e9c0 3300 	strd	r3, r3, [r0]
 8005efa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005efe:	6083      	str	r3, [r0, #8]
 8005f00:	8181      	strh	r1, [r0, #12]
 8005f02:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f04:	81c2      	strh	r2, [r0, #14]
 8005f06:	6183      	str	r3, [r0, #24]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	2208      	movs	r2, #8
 8005f0c:	305c      	adds	r0, #92	@ 0x5c
 8005f0e:	f000 f91f 	bl	8006150 <memset>
 8005f12:	4b0d      	ldr	r3, [pc, #52]	@ (8005f48 <std+0x58>)
 8005f14:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f16:	4b0d      	ldr	r3, [pc, #52]	@ (8005f4c <std+0x5c>)
 8005f18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f50 <std+0x60>)
 8005f1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f54 <std+0x64>)
 8005f20:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f22:	4b0d      	ldr	r3, [pc, #52]	@ (8005f58 <std+0x68>)
 8005f24:	6224      	str	r4, [r4, #32]
 8005f26:	429c      	cmp	r4, r3
 8005f28:	d006      	beq.n	8005f38 <std+0x48>
 8005f2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f2e:	4294      	cmp	r4, r2
 8005f30:	d002      	beq.n	8005f38 <std+0x48>
 8005f32:	33d0      	adds	r3, #208	@ 0xd0
 8005f34:	429c      	cmp	r4, r3
 8005f36:	d105      	bne.n	8005f44 <std+0x54>
 8005f38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f40:	f000 b938 	b.w	80061b4 <__retarget_lock_init_recursive>
 8005f44:	bd10      	pop	{r4, pc}
 8005f46:	bf00      	nop
 8005f48:	08006a51 	.word	0x08006a51
 8005f4c:	08006a73 	.word	0x08006a73
 8005f50:	08006aab 	.word	0x08006aab
 8005f54:	08006acf 	.word	0x08006acf
 8005f58:	20014478 	.word	0x20014478

08005f5c <stdio_exit_handler>:
 8005f5c:	4a02      	ldr	r2, [pc, #8]	@ (8005f68 <stdio_exit_handler+0xc>)
 8005f5e:	4903      	ldr	r1, [pc, #12]	@ (8005f6c <stdio_exit_handler+0x10>)
 8005f60:	4803      	ldr	r0, [pc, #12]	@ (8005f70 <stdio_exit_handler+0x14>)
 8005f62:	f000 b869 	b.w	8006038 <_fwalk_sglue>
 8005f66:	bf00      	nop
 8005f68:	20000010 	.word	0x20000010
 8005f6c:	080069e9 	.word	0x080069e9
 8005f70:	20000020 	.word	0x20000020

08005f74 <cleanup_stdio>:
 8005f74:	6841      	ldr	r1, [r0, #4]
 8005f76:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa8 <cleanup_stdio+0x34>)
 8005f78:	4299      	cmp	r1, r3
 8005f7a:	b510      	push	{r4, lr}
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	d001      	beq.n	8005f84 <cleanup_stdio+0x10>
 8005f80:	f000 fd32 	bl	80069e8 <_fflush_r>
 8005f84:	68a1      	ldr	r1, [r4, #8]
 8005f86:	4b09      	ldr	r3, [pc, #36]	@ (8005fac <cleanup_stdio+0x38>)
 8005f88:	4299      	cmp	r1, r3
 8005f8a:	d002      	beq.n	8005f92 <cleanup_stdio+0x1e>
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f000 fd2b 	bl	80069e8 <_fflush_r>
 8005f92:	68e1      	ldr	r1, [r4, #12]
 8005f94:	4b06      	ldr	r3, [pc, #24]	@ (8005fb0 <cleanup_stdio+0x3c>)
 8005f96:	4299      	cmp	r1, r3
 8005f98:	d004      	beq.n	8005fa4 <cleanup_stdio+0x30>
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fa0:	f000 bd22 	b.w	80069e8 <_fflush_r>
 8005fa4:	bd10      	pop	{r4, pc}
 8005fa6:	bf00      	nop
 8005fa8:	20014478 	.word	0x20014478
 8005fac:	200144e0 	.word	0x200144e0
 8005fb0:	20014548 	.word	0x20014548

08005fb4 <global_stdio_init.part.0>:
 8005fb4:	b510      	push	{r4, lr}
 8005fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe4 <global_stdio_init.part.0+0x30>)
 8005fb8:	4c0b      	ldr	r4, [pc, #44]	@ (8005fe8 <global_stdio_init.part.0+0x34>)
 8005fba:	4a0c      	ldr	r2, [pc, #48]	@ (8005fec <global_stdio_init.part.0+0x38>)
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2104      	movs	r1, #4
 8005fc4:	f7ff ff94 	bl	8005ef0 <std>
 8005fc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005fcc:	2201      	movs	r2, #1
 8005fce:	2109      	movs	r1, #9
 8005fd0:	f7ff ff8e 	bl	8005ef0 <std>
 8005fd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005fd8:	2202      	movs	r2, #2
 8005fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fde:	2112      	movs	r1, #18
 8005fe0:	f7ff bf86 	b.w	8005ef0 <std>
 8005fe4:	200145b0 	.word	0x200145b0
 8005fe8:	20014478 	.word	0x20014478
 8005fec:	08005f5d 	.word	0x08005f5d

08005ff0 <__sfp_lock_acquire>:
 8005ff0:	4801      	ldr	r0, [pc, #4]	@ (8005ff8 <__sfp_lock_acquire+0x8>)
 8005ff2:	f000 b8e0 	b.w	80061b6 <__retarget_lock_acquire_recursive>
 8005ff6:	bf00      	nop
 8005ff8:	200145b5 	.word	0x200145b5

08005ffc <__sfp_lock_release>:
 8005ffc:	4801      	ldr	r0, [pc, #4]	@ (8006004 <__sfp_lock_release+0x8>)
 8005ffe:	f000 b8db 	b.w	80061b8 <__retarget_lock_release_recursive>
 8006002:	bf00      	nop
 8006004:	200145b5 	.word	0x200145b5

08006008 <__sinit>:
 8006008:	b510      	push	{r4, lr}
 800600a:	4604      	mov	r4, r0
 800600c:	f7ff fff0 	bl	8005ff0 <__sfp_lock_acquire>
 8006010:	6a23      	ldr	r3, [r4, #32]
 8006012:	b11b      	cbz	r3, 800601c <__sinit+0x14>
 8006014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006018:	f7ff bff0 	b.w	8005ffc <__sfp_lock_release>
 800601c:	4b04      	ldr	r3, [pc, #16]	@ (8006030 <__sinit+0x28>)
 800601e:	6223      	str	r3, [r4, #32]
 8006020:	4b04      	ldr	r3, [pc, #16]	@ (8006034 <__sinit+0x2c>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1f5      	bne.n	8006014 <__sinit+0xc>
 8006028:	f7ff ffc4 	bl	8005fb4 <global_stdio_init.part.0>
 800602c:	e7f2      	b.n	8006014 <__sinit+0xc>
 800602e:	bf00      	nop
 8006030:	08005f75 	.word	0x08005f75
 8006034:	200145b0 	.word	0x200145b0

08006038 <_fwalk_sglue>:
 8006038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800603c:	4607      	mov	r7, r0
 800603e:	4688      	mov	r8, r1
 8006040:	4614      	mov	r4, r2
 8006042:	2600      	movs	r6, #0
 8006044:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006048:	f1b9 0901 	subs.w	r9, r9, #1
 800604c:	d505      	bpl.n	800605a <_fwalk_sglue+0x22>
 800604e:	6824      	ldr	r4, [r4, #0]
 8006050:	2c00      	cmp	r4, #0
 8006052:	d1f7      	bne.n	8006044 <_fwalk_sglue+0xc>
 8006054:	4630      	mov	r0, r6
 8006056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800605a:	89ab      	ldrh	r3, [r5, #12]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d907      	bls.n	8006070 <_fwalk_sglue+0x38>
 8006060:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006064:	3301      	adds	r3, #1
 8006066:	d003      	beq.n	8006070 <_fwalk_sglue+0x38>
 8006068:	4629      	mov	r1, r5
 800606a:	4638      	mov	r0, r7
 800606c:	47c0      	blx	r8
 800606e:	4306      	orrs	r6, r0
 8006070:	3568      	adds	r5, #104	@ 0x68
 8006072:	e7e9      	b.n	8006048 <_fwalk_sglue+0x10>

08006074 <_puts_r>:
 8006074:	6a03      	ldr	r3, [r0, #32]
 8006076:	b570      	push	{r4, r5, r6, lr}
 8006078:	6884      	ldr	r4, [r0, #8]
 800607a:	4605      	mov	r5, r0
 800607c:	460e      	mov	r6, r1
 800607e:	b90b      	cbnz	r3, 8006084 <_puts_r+0x10>
 8006080:	f7ff ffc2 	bl	8006008 <__sinit>
 8006084:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006086:	07db      	lsls	r3, r3, #31
 8006088:	d405      	bmi.n	8006096 <_puts_r+0x22>
 800608a:	89a3      	ldrh	r3, [r4, #12]
 800608c:	0598      	lsls	r0, r3, #22
 800608e:	d402      	bmi.n	8006096 <_puts_r+0x22>
 8006090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006092:	f000 f890 	bl	80061b6 <__retarget_lock_acquire_recursive>
 8006096:	89a3      	ldrh	r3, [r4, #12]
 8006098:	0719      	lsls	r1, r3, #28
 800609a:	d502      	bpl.n	80060a2 <_puts_r+0x2e>
 800609c:	6923      	ldr	r3, [r4, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d135      	bne.n	800610e <_puts_r+0x9a>
 80060a2:	4621      	mov	r1, r4
 80060a4:	4628      	mov	r0, r5
 80060a6:	f000 fd83 	bl	8006bb0 <__swsetup_r>
 80060aa:	b380      	cbz	r0, 800610e <_puts_r+0x9a>
 80060ac:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80060b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060b2:	07da      	lsls	r2, r3, #31
 80060b4:	d405      	bmi.n	80060c2 <_puts_r+0x4e>
 80060b6:	89a3      	ldrh	r3, [r4, #12]
 80060b8:	059b      	lsls	r3, r3, #22
 80060ba:	d402      	bmi.n	80060c2 <_puts_r+0x4e>
 80060bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060be:	f000 f87b 	bl	80061b8 <__retarget_lock_release_recursive>
 80060c2:	4628      	mov	r0, r5
 80060c4:	bd70      	pop	{r4, r5, r6, pc}
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	da04      	bge.n	80060d4 <_puts_r+0x60>
 80060ca:	69a2      	ldr	r2, [r4, #24]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	dc17      	bgt.n	8006100 <_puts_r+0x8c>
 80060d0:	290a      	cmp	r1, #10
 80060d2:	d015      	beq.n	8006100 <_puts_r+0x8c>
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	6022      	str	r2, [r4, #0]
 80060da:	7019      	strb	r1, [r3, #0]
 80060dc:	68a3      	ldr	r3, [r4, #8]
 80060de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80060e2:	3b01      	subs	r3, #1
 80060e4:	60a3      	str	r3, [r4, #8]
 80060e6:	2900      	cmp	r1, #0
 80060e8:	d1ed      	bne.n	80060c6 <_puts_r+0x52>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	da11      	bge.n	8006112 <_puts_r+0x9e>
 80060ee:	4622      	mov	r2, r4
 80060f0:	210a      	movs	r1, #10
 80060f2:	4628      	mov	r0, r5
 80060f4:	f000 fd1d 	bl	8006b32 <__swbuf_r>
 80060f8:	3001      	adds	r0, #1
 80060fa:	d0d7      	beq.n	80060ac <_puts_r+0x38>
 80060fc:	250a      	movs	r5, #10
 80060fe:	e7d7      	b.n	80060b0 <_puts_r+0x3c>
 8006100:	4622      	mov	r2, r4
 8006102:	4628      	mov	r0, r5
 8006104:	f000 fd15 	bl	8006b32 <__swbuf_r>
 8006108:	3001      	adds	r0, #1
 800610a:	d1e7      	bne.n	80060dc <_puts_r+0x68>
 800610c:	e7ce      	b.n	80060ac <_puts_r+0x38>
 800610e:	3e01      	subs	r6, #1
 8006110:	e7e4      	b.n	80060dc <_puts_r+0x68>
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	6022      	str	r2, [r4, #0]
 8006118:	220a      	movs	r2, #10
 800611a:	701a      	strb	r2, [r3, #0]
 800611c:	e7ee      	b.n	80060fc <_puts_r+0x88>
	...

08006120 <puts>:
 8006120:	4b02      	ldr	r3, [pc, #8]	@ (800612c <puts+0xc>)
 8006122:	4601      	mov	r1, r0
 8006124:	6818      	ldr	r0, [r3, #0]
 8006126:	f7ff bfa5 	b.w	8006074 <_puts_r>
 800612a:	bf00      	nop
 800612c:	2000001c 	.word	0x2000001c

08006130 <memcmp>:
 8006130:	b510      	push	{r4, lr}
 8006132:	3901      	subs	r1, #1
 8006134:	4402      	add	r2, r0
 8006136:	4290      	cmp	r0, r2
 8006138:	d101      	bne.n	800613e <memcmp+0xe>
 800613a:	2000      	movs	r0, #0
 800613c:	e005      	b.n	800614a <memcmp+0x1a>
 800613e:	7803      	ldrb	r3, [r0, #0]
 8006140:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006144:	42a3      	cmp	r3, r4
 8006146:	d001      	beq.n	800614c <memcmp+0x1c>
 8006148:	1b18      	subs	r0, r3, r4
 800614a:	bd10      	pop	{r4, pc}
 800614c:	3001      	adds	r0, #1
 800614e:	e7f2      	b.n	8006136 <memcmp+0x6>

08006150 <memset>:
 8006150:	4402      	add	r2, r0
 8006152:	4603      	mov	r3, r0
 8006154:	4293      	cmp	r3, r2
 8006156:	d100      	bne.n	800615a <memset+0xa>
 8006158:	4770      	bx	lr
 800615a:	f803 1b01 	strb.w	r1, [r3], #1
 800615e:	e7f9      	b.n	8006154 <memset+0x4>

08006160 <__errno>:
 8006160:	4b01      	ldr	r3, [pc, #4]	@ (8006168 <__errno+0x8>)
 8006162:	6818      	ldr	r0, [r3, #0]
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	2000001c 	.word	0x2000001c

0800616c <__libc_init_array>:
 800616c:	b570      	push	{r4, r5, r6, lr}
 800616e:	4d0d      	ldr	r5, [pc, #52]	@ (80061a4 <__libc_init_array+0x38>)
 8006170:	4c0d      	ldr	r4, [pc, #52]	@ (80061a8 <__libc_init_array+0x3c>)
 8006172:	1b64      	subs	r4, r4, r5
 8006174:	10a4      	asrs	r4, r4, #2
 8006176:	2600      	movs	r6, #0
 8006178:	42a6      	cmp	r6, r4
 800617a:	d109      	bne.n	8006190 <__libc_init_array+0x24>
 800617c:	4d0b      	ldr	r5, [pc, #44]	@ (80061ac <__libc_init_array+0x40>)
 800617e:	4c0c      	ldr	r4, [pc, #48]	@ (80061b0 <__libc_init_array+0x44>)
 8006180:	f000 fea0 	bl	8006ec4 <_init>
 8006184:	1b64      	subs	r4, r4, r5
 8006186:	10a4      	asrs	r4, r4, #2
 8006188:	2600      	movs	r6, #0
 800618a:	42a6      	cmp	r6, r4
 800618c:	d105      	bne.n	800619a <__libc_init_array+0x2e>
 800618e:	bd70      	pop	{r4, r5, r6, pc}
 8006190:	f855 3b04 	ldr.w	r3, [r5], #4
 8006194:	4798      	blx	r3
 8006196:	3601      	adds	r6, #1
 8006198:	e7ee      	b.n	8006178 <__libc_init_array+0xc>
 800619a:	f855 3b04 	ldr.w	r3, [r5], #4
 800619e:	4798      	blx	r3
 80061a0:	3601      	adds	r6, #1
 80061a2:	e7f2      	b.n	800618a <__libc_init_array+0x1e>
 80061a4:	08007064 	.word	0x08007064
 80061a8:	08007064 	.word	0x08007064
 80061ac:	08007064 	.word	0x08007064
 80061b0:	08007068 	.word	0x08007068

080061b4 <__retarget_lock_init_recursive>:
 80061b4:	4770      	bx	lr

080061b6 <__retarget_lock_acquire_recursive>:
 80061b6:	4770      	bx	lr

080061b8 <__retarget_lock_release_recursive>:
 80061b8:	4770      	bx	lr

080061ba <memcpy>:
 80061ba:	440a      	add	r2, r1
 80061bc:	4291      	cmp	r1, r2
 80061be:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80061c2:	d100      	bne.n	80061c6 <memcpy+0xc>
 80061c4:	4770      	bx	lr
 80061c6:	b510      	push	{r4, lr}
 80061c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061d0:	4291      	cmp	r1, r2
 80061d2:	d1f9      	bne.n	80061c8 <memcpy+0xe>
 80061d4:	bd10      	pop	{r4, pc}

080061d6 <__ssputs_r>:
 80061d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061da:	688e      	ldr	r6, [r1, #8]
 80061dc:	461f      	mov	r7, r3
 80061de:	42be      	cmp	r6, r7
 80061e0:	680b      	ldr	r3, [r1, #0]
 80061e2:	4682      	mov	sl, r0
 80061e4:	460c      	mov	r4, r1
 80061e6:	4690      	mov	r8, r2
 80061e8:	d82d      	bhi.n	8006246 <__ssputs_r+0x70>
 80061ea:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061ee:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80061f2:	d026      	beq.n	8006242 <__ssputs_r+0x6c>
 80061f4:	6965      	ldr	r5, [r4, #20]
 80061f6:	6909      	ldr	r1, [r1, #16]
 80061f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061fc:	eba3 0901 	sub.w	r9, r3, r1
 8006200:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006204:	1c7b      	adds	r3, r7, #1
 8006206:	444b      	add	r3, r9
 8006208:	106d      	asrs	r5, r5, #1
 800620a:	429d      	cmp	r5, r3
 800620c:	bf38      	it	cc
 800620e:	461d      	movcc	r5, r3
 8006210:	0553      	lsls	r3, r2, #21
 8006212:	d527      	bpl.n	8006264 <__ssputs_r+0x8e>
 8006214:	4629      	mov	r1, r5
 8006216:	f000 f957 	bl	80064c8 <_malloc_r>
 800621a:	4606      	mov	r6, r0
 800621c:	b360      	cbz	r0, 8006278 <__ssputs_r+0xa2>
 800621e:	6921      	ldr	r1, [r4, #16]
 8006220:	464a      	mov	r2, r9
 8006222:	f7ff ffca 	bl	80061ba <memcpy>
 8006226:	89a3      	ldrh	r3, [r4, #12]
 8006228:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800622c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006230:	81a3      	strh	r3, [r4, #12]
 8006232:	6126      	str	r6, [r4, #16]
 8006234:	6165      	str	r5, [r4, #20]
 8006236:	444e      	add	r6, r9
 8006238:	eba5 0509 	sub.w	r5, r5, r9
 800623c:	6026      	str	r6, [r4, #0]
 800623e:	60a5      	str	r5, [r4, #8]
 8006240:	463e      	mov	r6, r7
 8006242:	42be      	cmp	r6, r7
 8006244:	d900      	bls.n	8006248 <__ssputs_r+0x72>
 8006246:	463e      	mov	r6, r7
 8006248:	6820      	ldr	r0, [r4, #0]
 800624a:	4632      	mov	r2, r6
 800624c:	4641      	mov	r1, r8
 800624e:	f000 fd67 	bl	8006d20 <memmove>
 8006252:	68a3      	ldr	r3, [r4, #8]
 8006254:	1b9b      	subs	r3, r3, r6
 8006256:	60a3      	str	r3, [r4, #8]
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	4433      	add	r3, r6
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	2000      	movs	r0, #0
 8006260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006264:	462a      	mov	r2, r5
 8006266:	f000 fc36 	bl	8006ad6 <_realloc_r>
 800626a:	4606      	mov	r6, r0
 800626c:	2800      	cmp	r0, #0
 800626e:	d1e0      	bne.n	8006232 <__ssputs_r+0x5c>
 8006270:	6921      	ldr	r1, [r4, #16]
 8006272:	4650      	mov	r0, sl
 8006274:	f000 fdd4 	bl	8006e20 <_free_r>
 8006278:	230c      	movs	r3, #12
 800627a:	f8ca 3000 	str.w	r3, [sl]
 800627e:	89a3      	ldrh	r3, [r4, #12]
 8006280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006284:	81a3      	strh	r3, [r4, #12]
 8006286:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800628a:	e7e9      	b.n	8006260 <__ssputs_r+0x8a>

0800628c <_svfiprintf_r>:
 800628c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006290:	4698      	mov	r8, r3
 8006292:	898b      	ldrh	r3, [r1, #12]
 8006294:	061b      	lsls	r3, r3, #24
 8006296:	b09d      	sub	sp, #116	@ 0x74
 8006298:	4607      	mov	r7, r0
 800629a:	460d      	mov	r5, r1
 800629c:	4614      	mov	r4, r2
 800629e:	d510      	bpl.n	80062c2 <_svfiprintf_r+0x36>
 80062a0:	690b      	ldr	r3, [r1, #16]
 80062a2:	b973      	cbnz	r3, 80062c2 <_svfiprintf_r+0x36>
 80062a4:	2140      	movs	r1, #64	@ 0x40
 80062a6:	f000 f90f 	bl	80064c8 <_malloc_r>
 80062aa:	6028      	str	r0, [r5, #0]
 80062ac:	6128      	str	r0, [r5, #16]
 80062ae:	b930      	cbnz	r0, 80062be <_svfiprintf_r+0x32>
 80062b0:	230c      	movs	r3, #12
 80062b2:	603b      	str	r3, [r7, #0]
 80062b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062b8:	b01d      	add	sp, #116	@ 0x74
 80062ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062be:	2340      	movs	r3, #64	@ 0x40
 80062c0:	616b      	str	r3, [r5, #20]
 80062c2:	2300      	movs	r3, #0
 80062c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80062c6:	2320      	movs	r3, #32
 80062c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80062cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80062d0:	2330      	movs	r3, #48	@ 0x30
 80062d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006470 <_svfiprintf_r+0x1e4>
 80062d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062da:	f04f 0901 	mov.w	r9, #1
 80062de:	4623      	mov	r3, r4
 80062e0:	469a      	mov	sl, r3
 80062e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062e6:	b10a      	cbz	r2, 80062ec <_svfiprintf_r+0x60>
 80062e8:	2a25      	cmp	r2, #37	@ 0x25
 80062ea:	d1f9      	bne.n	80062e0 <_svfiprintf_r+0x54>
 80062ec:	ebba 0b04 	subs.w	fp, sl, r4
 80062f0:	d00b      	beq.n	800630a <_svfiprintf_r+0x7e>
 80062f2:	465b      	mov	r3, fp
 80062f4:	4622      	mov	r2, r4
 80062f6:	4629      	mov	r1, r5
 80062f8:	4638      	mov	r0, r7
 80062fa:	f7ff ff6c 	bl	80061d6 <__ssputs_r>
 80062fe:	3001      	adds	r0, #1
 8006300:	f000 80a7 	beq.w	8006452 <_svfiprintf_r+0x1c6>
 8006304:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006306:	445a      	add	r2, fp
 8006308:	9209      	str	r2, [sp, #36]	@ 0x24
 800630a:	f89a 3000 	ldrb.w	r3, [sl]
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 809f 	beq.w	8006452 <_svfiprintf_r+0x1c6>
 8006314:	2300      	movs	r3, #0
 8006316:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800631a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800631e:	f10a 0a01 	add.w	sl, sl, #1
 8006322:	9304      	str	r3, [sp, #16]
 8006324:	9307      	str	r3, [sp, #28]
 8006326:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800632a:	931a      	str	r3, [sp, #104]	@ 0x68
 800632c:	4654      	mov	r4, sl
 800632e:	2205      	movs	r2, #5
 8006330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006334:	484e      	ldr	r0, [pc, #312]	@ (8006470 <_svfiprintf_r+0x1e4>)
 8006336:	f7f9 ff9b 	bl	8000270 <memchr>
 800633a:	9a04      	ldr	r2, [sp, #16]
 800633c:	b9d8      	cbnz	r0, 8006376 <_svfiprintf_r+0xea>
 800633e:	06d0      	lsls	r0, r2, #27
 8006340:	bf44      	itt	mi
 8006342:	2320      	movmi	r3, #32
 8006344:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006348:	0711      	lsls	r1, r2, #28
 800634a:	bf44      	itt	mi
 800634c:	232b      	movmi	r3, #43	@ 0x2b
 800634e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006352:	f89a 3000 	ldrb.w	r3, [sl]
 8006356:	2b2a      	cmp	r3, #42	@ 0x2a
 8006358:	d015      	beq.n	8006386 <_svfiprintf_r+0xfa>
 800635a:	9a07      	ldr	r2, [sp, #28]
 800635c:	4654      	mov	r4, sl
 800635e:	2000      	movs	r0, #0
 8006360:	f04f 0c0a 	mov.w	ip, #10
 8006364:	4621      	mov	r1, r4
 8006366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800636a:	3b30      	subs	r3, #48	@ 0x30
 800636c:	2b09      	cmp	r3, #9
 800636e:	d94b      	bls.n	8006408 <_svfiprintf_r+0x17c>
 8006370:	b1b0      	cbz	r0, 80063a0 <_svfiprintf_r+0x114>
 8006372:	9207      	str	r2, [sp, #28]
 8006374:	e014      	b.n	80063a0 <_svfiprintf_r+0x114>
 8006376:	eba0 0308 	sub.w	r3, r0, r8
 800637a:	fa09 f303 	lsl.w	r3, r9, r3
 800637e:	4313      	orrs	r3, r2
 8006380:	9304      	str	r3, [sp, #16]
 8006382:	46a2      	mov	sl, r4
 8006384:	e7d2      	b.n	800632c <_svfiprintf_r+0xa0>
 8006386:	9b03      	ldr	r3, [sp, #12]
 8006388:	1d19      	adds	r1, r3, #4
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	9103      	str	r1, [sp, #12]
 800638e:	2b00      	cmp	r3, #0
 8006390:	bfbb      	ittet	lt
 8006392:	425b      	neglt	r3, r3
 8006394:	f042 0202 	orrlt.w	r2, r2, #2
 8006398:	9307      	strge	r3, [sp, #28]
 800639a:	9307      	strlt	r3, [sp, #28]
 800639c:	bfb8      	it	lt
 800639e:	9204      	strlt	r2, [sp, #16]
 80063a0:	7823      	ldrb	r3, [r4, #0]
 80063a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80063a4:	d10a      	bne.n	80063bc <_svfiprintf_r+0x130>
 80063a6:	7863      	ldrb	r3, [r4, #1]
 80063a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80063aa:	d132      	bne.n	8006412 <_svfiprintf_r+0x186>
 80063ac:	9b03      	ldr	r3, [sp, #12]
 80063ae:	1d1a      	adds	r2, r3, #4
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	9203      	str	r2, [sp, #12]
 80063b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80063b8:	3402      	adds	r4, #2
 80063ba:	9305      	str	r3, [sp, #20]
 80063bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006480 <_svfiprintf_r+0x1f4>
 80063c0:	7821      	ldrb	r1, [r4, #0]
 80063c2:	2203      	movs	r2, #3
 80063c4:	4650      	mov	r0, sl
 80063c6:	f7f9 ff53 	bl	8000270 <memchr>
 80063ca:	b138      	cbz	r0, 80063dc <_svfiprintf_r+0x150>
 80063cc:	9b04      	ldr	r3, [sp, #16]
 80063ce:	eba0 000a 	sub.w	r0, r0, sl
 80063d2:	2240      	movs	r2, #64	@ 0x40
 80063d4:	4082      	lsls	r2, r0
 80063d6:	4313      	orrs	r3, r2
 80063d8:	3401      	adds	r4, #1
 80063da:	9304      	str	r3, [sp, #16]
 80063dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063e0:	4824      	ldr	r0, [pc, #144]	@ (8006474 <_svfiprintf_r+0x1e8>)
 80063e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063e6:	2206      	movs	r2, #6
 80063e8:	f7f9 ff42 	bl	8000270 <memchr>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d036      	beq.n	800645e <_svfiprintf_r+0x1d2>
 80063f0:	4b21      	ldr	r3, [pc, #132]	@ (8006478 <_svfiprintf_r+0x1ec>)
 80063f2:	bb1b      	cbnz	r3, 800643c <_svfiprintf_r+0x1b0>
 80063f4:	9b03      	ldr	r3, [sp, #12]
 80063f6:	3307      	adds	r3, #7
 80063f8:	f023 0307 	bic.w	r3, r3, #7
 80063fc:	3308      	adds	r3, #8
 80063fe:	9303      	str	r3, [sp, #12]
 8006400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006402:	4433      	add	r3, r6
 8006404:	9309      	str	r3, [sp, #36]	@ 0x24
 8006406:	e76a      	b.n	80062de <_svfiprintf_r+0x52>
 8006408:	fb0c 3202 	mla	r2, ip, r2, r3
 800640c:	460c      	mov	r4, r1
 800640e:	2001      	movs	r0, #1
 8006410:	e7a8      	b.n	8006364 <_svfiprintf_r+0xd8>
 8006412:	2300      	movs	r3, #0
 8006414:	3401      	adds	r4, #1
 8006416:	9305      	str	r3, [sp, #20]
 8006418:	4619      	mov	r1, r3
 800641a:	f04f 0c0a 	mov.w	ip, #10
 800641e:	4620      	mov	r0, r4
 8006420:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006424:	3a30      	subs	r2, #48	@ 0x30
 8006426:	2a09      	cmp	r2, #9
 8006428:	d903      	bls.n	8006432 <_svfiprintf_r+0x1a6>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d0c6      	beq.n	80063bc <_svfiprintf_r+0x130>
 800642e:	9105      	str	r1, [sp, #20]
 8006430:	e7c4      	b.n	80063bc <_svfiprintf_r+0x130>
 8006432:	fb0c 2101 	mla	r1, ip, r1, r2
 8006436:	4604      	mov	r4, r0
 8006438:	2301      	movs	r3, #1
 800643a:	e7f0      	b.n	800641e <_svfiprintf_r+0x192>
 800643c:	ab03      	add	r3, sp, #12
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	462a      	mov	r2, r5
 8006442:	4b0e      	ldr	r3, [pc, #56]	@ (800647c <_svfiprintf_r+0x1f0>)
 8006444:	a904      	add	r1, sp, #16
 8006446:	4638      	mov	r0, r7
 8006448:	f3af 8000 	nop.w
 800644c:	1c42      	adds	r2, r0, #1
 800644e:	4606      	mov	r6, r0
 8006450:	d1d6      	bne.n	8006400 <_svfiprintf_r+0x174>
 8006452:	89ab      	ldrh	r3, [r5, #12]
 8006454:	065b      	lsls	r3, r3, #25
 8006456:	f53f af2d 	bmi.w	80062b4 <_svfiprintf_r+0x28>
 800645a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800645c:	e72c      	b.n	80062b8 <_svfiprintf_r+0x2c>
 800645e:	ab03      	add	r3, sp, #12
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	462a      	mov	r2, r5
 8006464:	4b05      	ldr	r3, [pc, #20]	@ (800647c <_svfiprintf_r+0x1f0>)
 8006466:	a904      	add	r1, sp, #16
 8006468:	4638      	mov	r0, r7
 800646a:	f000 f91b 	bl	80066a4 <_printf_i>
 800646e:	e7ed      	b.n	800644c <_svfiprintf_r+0x1c0>
 8006470:	08007028 	.word	0x08007028
 8006474:	08007032 	.word	0x08007032
 8006478:	00000000 	.word	0x00000000
 800647c:	080061d7 	.word	0x080061d7
 8006480:	0800702e 	.word	0x0800702e

08006484 <sbrk_aligned>:
 8006484:	b570      	push	{r4, r5, r6, lr}
 8006486:	4e0f      	ldr	r6, [pc, #60]	@ (80064c4 <sbrk_aligned+0x40>)
 8006488:	460c      	mov	r4, r1
 800648a:	6831      	ldr	r1, [r6, #0]
 800648c:	4605      	mov	r5, r0
 800648e:	b911      	cbnz	r1, 8006496 <sbrk_aligned+0x12>
 8006490:	f000 fc94 	bl	8006dbc <_sbrk_r>
 8006494:	6030      	str	r0, [r6, #0]
 8006496:	4621      	mov	r1, r4
 8006498:	4628      	mov	r0, r5
 800649a:	f000 fc8f 	bl	8006dbc <_sbrk_r>
 800649e:	1c43      	adds	r3, r0, #1
 80064a0:	d103      	bne.n	80064aa <sbrk_aligned+0x26>
 80064a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80064a6:	4620      	mov	r0, r4
 80064a8:	bd70      	pop	{r4, r5, r6, pc}
 80064aa:	1cc4      	adds	r4, r0, #3
 80064ac:	f024 0403 	bic.w	r4, r4, #3
 80064b0:	42a0      	cmp	r0, r4
 80064b2:	d0f8      	beq.n	80064a6 <sbrk_aligned+0x22>
 80064b4:	1a21      	subs	r1, r4, r0
 80064b6:	4628      	mov	r0, r5
 80064b8:	f000 fc80 	bl	8006dbc <_sbrk_r>
 80064bc:	3001      	adds	r0, #1
 80064be:	d1f2      	bne.n	80064a6 <sbrk_aligned+0x22>
 80064c0:	e7ef      	b.n	80064a2 <sbrk_aligned+0x1e>
 80064c2:	bf00      	nop
 80064c4:	200145b8 	.word	0x200145b8

080064c8 <_malloc_r>:
 80064c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064cc:	1ccd      	adds	r5, r1, #3
 80064ce:	f025 0503 	bic.w	r5, r5, #3
 80064d2:	3508      	adds	r5, #8
 80064d4:	2d0c      	cmp	r5, #12
 80064d6:	bf38      	it	cc
 80064d8:	250c      	movcc	r5, #12
 80064da:	2d00      	cmp	r5, #0
 80064dc:	4606      	mov	r6, r0
 80064de:	db01      	blt.n	80064e4 <_malloc_r+0x1c>
 80064e0:	42a9      	cmp	r1, r5
 80064e2:	d904      	bls.n	80064ee <_malloc_r+0x26>
 80064e4:	230c      	movs	r3, #12
 80064e6:	6033      	str	r3, [r6, #0]
 80064e8:	2000      	movs	r0, #0
 80064ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80065c4 <_malloc_r+0xfc>
 80064f2:	f000 faa1 	bl	8006a38 <__malloc_lock>
 80064f6:	f8d8 3000 	ldr.w	r3, [r8]
 80064fa:	461c      	mov	r4, r3
 80064fc:	bb44      	cbnz	r4, 8006550 <_malloc_r+0x88>
 80064fe:	4629      	mov	r1, r5
 8006500:	4630      	mov	r0, r6
 8006502:	f7ff ffbf 	bl	8006484 <sbrk_aligned>
 8006506:	1c43      	adds	r3, r0, #1
 8006508:	4604      	mov	r4, r0
 800650a:	d158      	bne.n	80065be <_malloc_r+0xf6>
 800650c:	f8d8 4000 	ldr.w	r4, [r8]
 8006510:	4627      	mov	r7, r4
 8006512:	2f00      	cmp	r7, #0
 8006514:	d143      	bne.n	800659e <_malloc_r+0xd6>
 8006516:	2c00      	cmp	r4, #0
 8006518:	d04b      	beq.n	80065b2 <_malloc_r+0xea>
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	4639      	mov	r1, r7
 800651e:	4630      	mov	r0, r6
 8006520:	eb04 0903 	add.w	r9, r4, r3
 8006524:	f000 fc4a 	bl	8006dbc <_sbrk_r>
 8006528:	4581      	cmp	r9, r0
 800652a:	d142      	bne.n	80065b2 <_malloc_r+0xea>
 800652c:	6821      	ldr	r1, [r4, #0]
 800652e:	1a6d      	subs	r5, r5, r1
 8006530:	4629      	mov	r1, r5
 8006532:	4630      	mov	r0, r6
 8006534:	f7ff ffa6 	bl	8006484 <sbrk_aligned>
 8006538:	3001      	adds	r0, #1
 800653a:	d03a      	beq.n	80065b2 <_malloc_r+0xea>
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	442b      	add	r3, r5
 8006540:	6023      	str	r3, [r4, #0]
 8006542:	f8d8 3000 	ldr.w	r3, [r8]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	bb62      	cbnz	r2, 80065a4 <_malloc_r+0xdc>
 800654a:	f8c8 7000 	str.w	r7, [r8]
 800654e:	e00f      	b.n	8006570 <_malloc_r+0xa8>
 8006550:	6822      	ldr	r2, [r4, #0]
 8006552:	1b52      	subs	r2, r2, r5
 8006554:	d420      	bmi.n	8006598 <_malloc_r+0xd0>
 8006556:	2a0b      	cmp	r2, #11
 8006558:	d917      	bls.n	800658a <_malloc_r+0xc2>
 800655a:	1961      	adds	r1, r4, r5
 800655c:	42a3      	cmp	r3, r4
 800655e:	6025      	str	r5, [r4, #0]
 8006560:	bf18      	it	ne
 8006562:	6059      	strne	r1, [r3, #4]
 8006564:	6863      	ldr	r3, [r4, #4]
 8006566:	bf08      	it	eq
 8006568:	f8c8 1000 	streq.w	r1, [r8]
 800656c:	5162      	str	r2, [r4, r5]
 800656e:	604b      	str	r3, [r1, #4]
 8006570:	4630      	mov	r0, r6
 8006572:	f000 fa67 	bl	8006a44 <__malloc_unlock>
 8006576:	f104 000b 	add.w	r0, r4, #11
 800657a:	1d23      	adds	r3, r4, #4
 800657c:	f020 0007 	bic.w	r0, r0, #7
 8006580:	1ac2      	subs	r2, r0, r3
 8006582:	bf1c      	itt	ne
 8006584:	1a1b      	subne	r3, r3, r0
 8006586:	50a3      	strne	r3, [r4, r2]
 8006588:	e7af      	b.n	80064ea <_malloc_r+0x22>
 800658a:	6862      	ldr	r2, [r4, #4]
 800658c:	42a3      	cmp	r3, r4
 800658e:	bf0c      	ite	eq
 8006590:	f8c8 2000 	streq.w	r2, [r8]
 8006594:	605a      	strne	r2, [r3, #4]
 8006596:	e7eb      	b.n	8006570 <_malloc_r+0xa8>
 8006598:	4623      	mov	r3, r4
 800659a:	6864      	ldr	r4, [r4, #4]
 800659c:	e7ae      	b.n	80064fc <_malloc_r+0x34>
 800659e:	463c      	mov	r4, r7
 80065a0:	687f      	ldr	r7, [r7, #4]
 80065a2:	e7b6      	b.n	8006512 <_malloc_r+0x4a>
 80065a4:	461a      	mov	r2, r3
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	42a3      	cmp	r3, r4
 80065aa:	d1fb      	bne.n	80065a4 <_malloc_r+0xdc>
 80065ac:	2300      	movs	r3, #0
 80065ae:	6053      	str	r3, [r2, #4]
 80065b0:	e7de      	b.n	8006570 <_malloc_r+0xa8>
 80065b2:	230c      	movs	r3, #12
 80065b4:	6033      	str	r3, [r6, #0]
 80065b6:	4630      	mov	r0, r6
 80065b8:	f000 fa44 	bl	8006a44 <__malloc_unlock>
 80065bc:	e794      	b.n	80064e8 <_malloc_r+0x20>
 80065be:	6005      	str	r5, [r0, #0]
 80065c0:	e7d6      	b.n	8006570 <_malloc_r+0xa8>
 80065c2:	bf00      	nop
 80065c4:	200145bc 	.word	0x200145bc

080065c8 <_printf_common>:
 80065c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065cc:	4616      	mov	r6, r2
 80065ce:	4698      	mov	r8, r3
 80065d0:	688a      	ldr	r2, [r1, #8]
 80065d2:	690b      	ldr	r3, [r1, #16]
 80065d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065d8:	4293      	cmp	r3, r2
 80065da:	bfb8      	it	lt
 80065dc:	4613      	movlt	r3, r2
 80065de:	6033      	str	r3, [r6, #0]
 80065e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065e4:	4607      	mov	r7, r0
 80065e6:	460c      	mov	r4, r1
 80065e8:	b10a      	cbz	r2, 80065ee <_printf_common+0x26>
 80065ea:	3301      	adds	r3, #1
 80065ec:	6033      	str	r3, [r6, #0]
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	0699      	lsls	r1, r3, #26
 80065f2:	bf42      	ittt	mi
 80065f4:	6833      	ldrmi	r3, [r6, #0]
 80065f6:	3302      	addmi	r3, #2
 80065f8:	6033      	strmi	r3, [r6, #0]
 80065fa:	6825      	ldr	r5, [r4, #0]
 80065fc:	f015 0506 	ands.w	r5, r5, #6
 8006600:	d106      	bne.n	8006610 <_printf_common+0x48>
 8006602:	f104 0a19 	add.w	sl, r4, #25
 8006606:	68e3      	ldr	r3, [r4, #12]
 8006608:	6832      	ldr	r2, [r6, #0]
 800660a:	1a9b      	subs	r3, r3, r2
 800660c:	42ab      	cmp	r3, r5
 800660e:	dc26      	bgt.n	800665e <_printf_common+0x96>
 8006610:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006614:	6822      	ldr	r2, [r4, #0]
 8006616:	3b00      	subs	r3, #0
 8006618:	bf18      	it	ne
 800661a:	2301      	movne	r3, #1
 800661c:	0692      	lsls	r2, r2, #26
 800661e:	d42b      	bmi.n	8006678 <_printf_common+0xb0>
 8006620:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006624:	4641      	mov	r1, r8
 8006626:	4638      	mov	r0, r7
 8006628:	47c8      	blx	r9
 800662a:	3001      	adds	r0, #1
 800662c:	d01e      	beq.n	800666c <_printf_common+0xa4>
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	6922      	ldr	r2, [r4, #16]
 8006632:	f003 0306 	and.w	r3, r3, #6
 8006636:	2b04      	cmp	r3, #4
 8006638:	bf02      	ittt	eq
 800663a:	68e5      	ldreq	r5, [r4, #12]
 800663c:	6833      	ldreq	r3, [r6, #0]
 800663e:	1aed      	subeq	r5, r5, r3
 8006640:	68a3      	ldr	r3, [r4, #8]
 8006642:	bf0c      	ite	eq
 8006644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006648:	2500      	movne	r5, #0
 800664a:	4293      	cmp	r3, r2
 800664c:	bfc4      	itt	gt
 800664e:	1a9b      	subgt	r3, r3, r2
 8006650:	18ed      	addgt	r5, r5, r3
 8006652:	2600      	movs	r6, #0
 8006654:	341a      	adds	r4, #26
 8006656:	42b5      	cmp	r5, r6
 8006658:	d11a      	bne.n	8006690 <_printf_common+0xc8>
 800665a:	2000      	movs	r0, #0
 800665c:	e008      	b.n	8006670 <_printf_common+0xa8>
 800665e:	2301      	movs	r3, #1
 8006660:	4652      	mov	r2, sl
 8006662:	4641      	mov	r1, r8
 8006664:	4638      	mov	r0, r7
 8006666:	47c8      	blx	r9
 8006668:	3001      	adds	r0, #1
 800666a:	d103      	bne.n	8006674 <_printf_common+0xac>
 800666c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006674:	3501      	adds	r5, #1
 8006676:	e7c6      	b.n	8006606 <_printf_common+0x3e>
 8006678:	18e1      	adds	r1, r4, r3
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	2030      	movs	r0, #48	@ 0x30
 800667e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006682:	4422      	add	r2, r4
 8006684:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006688:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800668c:	3302      	adds	r3, #2
 800668e:	e7c7      	b.n	8006620 <_printf_common+0x58>
 8006690:	2301      	movs	r3, #1
 8006692:	4622      	mov	r2, r4
 8006694:	4641      	mov	r1, r8
 8006696:	4638      	mov	r0, r7
 8006698:	47c8      	blx	r9
 800669a:	3001      	adds	r0, #1
 800669c:	d0e6      	beq.n	800666c <_printf_common+0xa4>
 800669e:	3601      	adds	r6, #1
 80066a0:	e7d9      	b.n	8006656 <_printf_common+0x8e>
	...

080066a4 <_printf_i>:
 80066a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066a8:	7e0f      	ldrb	r7, [r1, #24]
 80066aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066ac:	2f78      	cmp	r7, #120	@ 0x78
 80066ae:	4691      	mov	r9, r2
 80066b0:	4680      	mov	r8, r0
 80066b2:	460c      	mov	r4, r1
 80066b4:	469a      	mov	sl, r3
 80066b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066ba:	d807      	bhi.n	80066cc <_printf_i+0x28>
 80066bc:	2f62      	cmp	r7, #98	@ 0x62
 80066be:	d80a      	bhi.n	80066d6 <_printf_i+0x32>
 80066c0:	2f00      	cmp	r7, #0
 80066c2:	f000 80d1 	beq.w	8006868 <_printf_i+0x1c4>
 80066c6:	2f58      	cmp	r7, #88	@ 0x58
 80066c8:	f000 80b8 	beq.w	800683c <_printf_i+0x198>
 80066cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066d4:	e03a      	b.n	800674c <_printf_i+0xa8>
 80066d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066da:	2b15      	cmp	r3, #21
 80066dc:	d8f6      	bhi.n	80066cc <_printf_i+0x28>
 80066de:	a101      	add	r1, pc, #4	@ (adr r1, 80066e4 <_printf_i+0x40>)
 80066e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066e4:	0800673d 	.word	0x0800673d
 80066e8:	08006751 	.word	0x08006751
 80066ec:	080066cd 	.word	0x080066cd
 80066f0:	080066cd 	.word	0x080066cd
 80066f4:	080066cd 	.word	0x080066cd
 80066f8:	080066cd 	.word	0x080066cd
 80066fc:	08006751 	.word	0x08006751
 8006700:	080066cd 	.word	0x080066cd
 8006704:	080066cd 	.word	0x080066cd
 8006708:	080066cd 	.word	0x080066cd
 800670c:	080066cd 	.word	0x080066cd
 8006710:	0800684f 	.word	0x0800684f
 8006714:	0800677b 	.word	0x0800677b
 8006718:	08006809 	.word	0x08006809
 800671c:	080066cd 	.word	0x080066cd
 8006720:	080066cd 	.word	0x080066cd
 8006724:	08006871 	.word	0x08006871
 8006728:	080066cd 	.word	0x080066cd
 800672c:	0800677b 	.word	0x0800677b
 8006730:	080066cd 	.word	0x080066cd
 8006734:	080066cd 	.word	0x080066cd
 8006738:	08006811 	.word	0x08006811
 800673c:	6833      	ldr	r3, [r6, #0]
 800673e:	1d1a      	adds	r2, r3, #4
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6032      	str	r2, [r6, #0]
 8006744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006748:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800674c:	2301      	movs	r3, #1
 800674e:	e09c      	b.n	800688a <_printf_i+0x1e6>
 8006750:	6833      	ldr	r3, [r6, #0]
 8006752:	6820      	ldr	r0, [r4, #0]
 8006754:	1d19      	adds	r1, r3, #4
 8006756:	6031      	str	r1, [r6, #0]
 8006758:	0606      	lsls	r6, r0, #24
 800675a:	d501      	bpl.n	8006760 <_printf_i+0xbc>
 800675c:	681d      	ldr	r5, [r3, #0]
 800675e:	e003      	b.n	8006768 <_printf_i+0xc4>
 8006760:	0645      	lsls	r5, r0, #25
 8006762:	d5fb      	bpl.n	800675c <_printf_i+0xb8>
 8006764:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006768:	2d00      	cmp	r5, #0
 800676a:	da03      	bge.n	8006774 <_printf_i+0xd0>
 800676c:	232d      	movs	r3, #45	@ 0x2d
 800676e:	426d      	negs	r5, r5
 8006770:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006774:	4858      	ldr	r0, [pc, #352]	@ (80068d8 <_printf_i+0x234>)
 8006776:	230a      	movs	r3, #10
 8006778:	e011      	b.n	800679e <_printf_i+0xfa>
 800677a:	6821      	ldr	r1, [r4, #0]
 800677c:	6833      	ldr	r3, [r6, #0]
 800677e:	0608      	lsls	r0, r1, #24
 8006780:	f853 5b04 	ldr.w	r5, [r3], #4
 8006784:	d402      	bmi.n	800678c <_printf_i+0xe8>
 8006786:	0649      	lsls	r1, r1, #25
 8006788:	bf48      	it	mi
 800678a:	b2ad      	uxthmi	r5, r5
 800678c:	2f6f      	cmp	r7, #111	@ 0x6f
 800678e:	4852      	ldr	r0, [pc, #328]	@ (80068d8 <_printf_i+0x234>)
 8006790:	6033      	str	r3, [r6, #0]
 8006792:	bf14      	ite	ne
 8006794:	230a      	movne	r3, #10
 8006796:	2308      	moveq	r3, #8
 8006798:	2100      	movs	r1, #0
 800679a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800679e:	6866      	ldr	r6, [r4, #4]
 80067a0:	60a6      	str	r6, [r4, #8]
 80067a2:	2e00      	cmp	r6, #0
 80067a4:	db05      	blt.n	80067b2 <_printf_i+0x10e>
 80067a6:	6821      	ldr	r1, [r4, #0]
 80067a8:	432e      	orrs	r6, r5
 80067aa:	f021 0104 	bic.w	r1, r1, #4
 80067ae:	6021      	str	r1, [r4, #0]
 80067b0:	d04b      	beq.n	800684a <_printf_i+0x1a6>
 80067b2:	4616      	mov	r6, r2
 80067b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80067b8:	fb03 5711 	mls	r7, r3, r1, r5
 80067bc:	5dc7      	ldrb	r7, [r0, r7]
 80067be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067c2:	462f      	mov	r7, r5
 80067c4:	42bb      	cmp	r3, r7
 80067c6:	460d      	mov	r5, r1
 80067c8:	d9f4      	bls.n	80067b4 <_printf_i+0x110>
 80067ca:	2b08      	cmp	r3, #8
 80067cc:	d10b      	bne.n	80067e6 <_printf_i+0x142>
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	07df      	lsls	r7, r3, #31
 80067d2:	d508      	bpl.n	80067e6 <_printf_i+0x142>
 80067d4:	6923      	ldr	r3, [r4, #16]
 80067d6:	6861      	ldr	r1, [r4, #4]
 80067d8:	4299      	cmp	r1, r3
 80067da:	bfde      	ittt	le
 80067dc:	2330      	movle	r3, #48	@ 0x30
 80067de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067e2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80067e6:	1b92      	subs	r2, r2, r6
 80067e8:	6122      	str	r2, [r4, #16]
 80067ea:	f8cd a000 	str.w	sl, [sp]
 80067ee:	464b      	mov	r3, r9
 80067f0:	aa03      	add	r2, sp, #12
 80067f2:	4621      	mov	r1, r4
 80067f4:	4640      	mov	r0, r8
 80067f6:	f7ff fee7 	bl	80065c8 <_printf_common>
 80067fa:	3001      	adds	r0, #1
 80067fc:	d14a      	bne.n	8006894 <_printf_i+0x1f0>
 80067fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006802:	b004      	add	sp, #16
 8006804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	f043 0320 	orr.w	r3, r3, #32
 800680e:	6023      	str	r3, [r4, #0]
 8006810:	4832      	ldr	r0, [pc, #200]	@ (80068dc <_printf_i+0x238>)
 8006812:	2778      	movs	r7, #120	@ 0x78
 8006814:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	6831      	ldr	r1, [r6, #0]
 800681c:	061f      	lsls	r7, r3, #24
 800681e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006822:	d402      	bmi.n	800682a <_printf_i+0x186>
 8006824:	065f      	lsls	r7, r3, #25
 8006826:	bf48      	it	mi
 8006828:	b2ad      	uxthmi	r5, r5
 800682a:	6031      	str	r1, [r6, #0]
 800682c:	07d9      	lsls	r1, r3, #31
 800682e:	bf44      	itt	mi
 8006830:	f043 0320 	orrmi.w	r3, r3, #32
 8006834:	6023      	strmi	r3, [r4, #0]
 8006836:	b11d      	cbz	r5, 8006840 <_printf_i+0x19c>
 8006838:	2310      	movs	r3, #16
 800683a:	e7ad      	b.n	8006798 <_printf_i+0xf4>
 800683c:	4826      	ldr	r0, [pc, #152]	@ (80068d8 <_printf_i+0x234>)
 800683e:	e7e9      	b.n	8006814 <_printf_i+0x170>
 8006840:	6823      	ldr	r3, [r4, #0]
 8006842:	f023 0320 	bic.w	r3, r3, #32
 8006846:	6023      	str	r3, [r4, #0]
 8006848:	e7f6      	b.n	8006838 <_printf_i+0x194>
 800684a:	4616      	mov	r6, r2
 800684c:	e7bd      	b.n	80067ca <_printf_i+0x126>
 800684e:	6833      	ldr	r3, [r6, #0]
 8006850:	6825      	ldr	r5, [r4, #0]
 8006852:	6961      	ldr	r1, [r4, #20]
 8006854:	1d18      	adds	r0, r3, #4
 8006856:	6030      	str	r0, [r6, #0]
 8006858:	062e      	lsls	r6, r5, #24
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	d501      	bpl.n	8006862 <_printf_i+0x1be>
 800685e:	6019      	str	r1, [r3, #0]
 8006860:	e002      	b.n	8006868 <_printf_i+0x1c4>
 8006862:	0668      	lsls	r0, r5, #25
 8006864:	d5fb      	bpl.n	800685e <_printf_i+0x1ba>
 8006866:	8019      	strh	r1, [r3, #0]
 8006868:	2300      	movs	r3, #0
 800686a:	6123      	str	r3, [r4, #16]
 800686c:	4616      	mov	r6, r2
 800686e:	e7bc      	b.n	80067ea <_printf_i+0x146>
 8006870:	6833      	ldr	r3, [r6, #0]
 8006872:	1d1a      	adds	r2, r3, #4
 8006874:	6032      	str	r2, [r6, #0]
 8006876:	681e      	ldr	r6, [r3, #0]
 8006878:	6862      	ldr	r2, [r4, #4]
 800687a:	2100      	movs	r1, #0
 800687c:	4630      	mov	r0, r6
 800687e:	f7f9 fcf7 	bl	8000270 <memchr>
 8006882:	b108      	cbz	r0, 8006888 <_printf_i+0x1e4>
 8006884:	1b80      	subs	r0, r0, r6
 8006886:	6060      	str	r0, [r4, #4]
 8006888:	6863      	ldr	r3, [r4, #4]
 800688a:	6123      	str	r3, [r4, #16]
 800688c:	2300      	movs	r3, #0
 800688e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006892:	e7aa      	b.n	80067ea <_printf_i+0x146>
 8006894:	6923      	ldr	r3, [r4, #16]
 8006896:	4632      	mov	r2, r6
 8006898:	4649      	mov	r1, r9
 800689a:	4640      	mov	r0, r8
 800689c:	47d0      	blx	sl
 800689e:	3001      	adds	r0, #1
 80068a0:	d0ad      	beq.n	80067fe <_printf_i+0x15a>
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	079b      	lsls	r3, r3, #30
 80068a6:	d413      	bmi.n	80068d0 <_printf_i+0x22c>
 80068a8:	68e0      	ldr	r0, [r4, #12]
 80068aa:	9b03      	ldr	r3, [sp, #12]
 80068ac:	4298      	cmp	r0, r3
 80068ae:	bfb8      	it	lt
 80068b0:	4618      	movlt	r0, r3
 80068b2:	e7a6      	b.n	8006802 <_printf_i+0x15e>
 80068b4:	2301      	movs	r3, #1
 80068b6:	4632      	mov	r2, r6
 80068b8:	4649      	mov	r1, r9
 80068ba:	4640      	mov	r0, r8
 80068bc:	47d0      	blx	sl
 80068be:	3001      	adds	r0, #1
 80068c0:	d09d      	beq.n	80067fe <_printf_i+0x15a>
 80068c2:	3501      	adds	r5, #1
 80068c4:	68e3      	ldr	r3, [r4, #12]
 80068c6:	9903      	ldr	r1, [sp, #12]
 80068c8:	1a5b      	subs	r3, r3, r1
 80068ca:	42ab      	cmp	r3, r5
 80068cc:	dcf2      	bgt.n	80068b4 <_printf_i+0x210>
 80068ce:	e7eb      	b.n	80068a8 <_printf_i+0x204>
 80068d0:	2500      	movs	r5, #0
 80068d2:	f104 0619 	add.w	r6, r4, #25
 80068d6:	e7f5      	b.n	80068c4 <_printf_i+0x220>
 80068d8:	08007039 	.word	0x08007039
 80068dc:	0800704a 	.word	0x0800704a

080068e0 <__sflush_r>:
 80068e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e8:	0716      	lsls	r6, r2, #28
 80068ea:	4605      	mov	r5, r0
 80068ec:	460c      	mov	r4, r1
 80068ee:	d454      	bmi.n	800699a <__sflush_r+0xba>
 80068f0:	684b      	ldr	r3, [r1, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	dc02      	bgt.n	80068fc <__sflush_r+0x1c>
 80068f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	dd48      	ble.n	800698e <__sflush_r+0xae>
 80068fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068fe:	2e00      	cmp	r6, #0
 8006900:	d045      	beq.n	800698e <__sflush_r+0xae>
 8006902:	2300      	movs	r3, #0
 8006904:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006908:	682f      	ldr	r7, [r5, #0]
 800690a:	6a21      	ldr	r1, [r4, #32]
 800690c:	602b      	str	r3, [r5, #0]
 800690e:	d030      	beq.n	8006972 <__sflush_r+0x92>
 8006910:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006912:	89a3      	ldrh	r3, [r4, #12]
 8006914:	0759      	lsls	r1, r3, #29
 8006916:	d505      	bpl.n	8006924 <__sflush_r+0x44>
 8006918:	6863      	ldr	r3, [r4, #4]
 800691a:	1ad2      	subs	r2, r2, r3
 800691c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800691e:	b10b      	cbz	r3, 8006924 <__sflush_r+0x44>
 8006920:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006922:	1ad2      	subs	r2, r2, r3
 8006924:	2300      	movs	r3, #0
 8006926:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006928:	6a21      	ldr	r1, [r4, #32]
 800692a:	4628      	mov	r0, r5
 800692c:	47b0      	blx	r6
 800692e:	1c43      	adds	r3, r0, #1
 8006930:	89a3      	ldrh	r3, [r4, #12]
 8006932:	d106      	bne.n	8006942 <__sflush_r+0x62>
 8006934:	6829      	ldr	r1, [r5, #0]
 8006936:	291d      	cmp	r1, #29
 8006938:	d82b      	bhi.n	8006992 <__sflush_r+0xb2>
 800693a:	4a2a      	ldr	r2, [pc, #168]	@ (80069e4 <__sflush_r+0x104>)
 800693c:	40ca      	lsrs	r2, r1
 800693e:	07d6      	lsls	r6, r2, #31
 8006940:	d527      	bpl.n	8006992 <__sflush_r+0xb2>
 8006942:	2200      	movs	r2, #0
 8006944:	6062      	str	r2, [r4, #4]
 8006946:	04d9      	lsls	r1, r3, #19
 8006948:	6922      	ldr	r2, [r4, #16]
 800694a:	6022      	str	r2, [r4, #0]
 800694c:	d504      	bpl.n	8006958 <__sflush_r+0x78>
 800694e:	1c42      	adds	r2, r0, #1
 8006950:	d101      	bne.n	8006956 <__sflush_r+0x76>
 8006952:	682b      	ldr	r3, [r5, #0]
 8006954:	b903      	cbnz	r3, 8006958 <__sflush_r+0x78>
 8006956:	6560      	str	r0, [r4, #84]	@ 0x54
 8006958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800695a:	602f      	str	r7, [r5, #0]
 800695c:	b1b9      	cbz	r1, 800698e <__sflush_r+0xae>
 800695e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006962:	4299      	cmp	r1, r3
 8006964:	d002      	beq.n	800696c <__sflush_r+0x8c>
 8006966:	4628      	mov	r0, r5
 8006968:	f000 fa5a 	bl	8006e20 <_free_r>
 800696c:	2300      	movs	r3, #0
 800696e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006970:	e00d      	b.n	800698e <__sflush_r+0xae>
 8006972:	2301      	movs	r3, #1
 8006974:	4628      	mov	r0, r5
 8006976:	47b0      	blx	r6
 8006978:	4602      	mov	r2, r0
 800697a:	1c50      	adds	r0, r2, #1
 800697c:	d1c9      	bne.n	8006912 <__sflush_r+0x32>
 800697e:	682b      	ldr	r3, [r5, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0c6      	beq.n	8006912 <__sflush_r+0x32>
 8006984:	2b1d      	cmp	r3, #29
 8006986:	d001      	beq.n	800698c <__sflush_r+0xac>
 8006988:	2b16      	cmp	r3, #22
 800698a:	d11e      	bne.n	80069ca <__sflush_r+0xea>
 800698c:	602f      	str	r7, [r5, #0]
 800698e:	2000      	movs	r0, #0
 8006990:	e022      	b.n	80069d8 <__sflush_r+0xf8>
 8006992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006996:	b21b      	sxth	r3, r3
 8006998:	e01b      	b.n	80069d2 <__sflush_r+0xf2>
 800699a:	690f      	ldr	r7, [r1, #16]
 800699c:	2f00      	cmp	r7, #0
 800699e:	d0f6      	beq.n	800698e <__sflush_r+0xae>
 80069a0:	0793      	lsls	r3, r2, #30
 80069a2:	680e      	ldr	r6, [r1, #0]
 80069a4:	bf08      	it	eq
 80069a6:	694b      	ldreq	r3, [r1, #20]
 80069a8:	600f      	str	r7, [r1, #0]
 80069aa:	bf18      	it	ne
 80069ac:	2300      	movne	r3, #0
 80069ae:	eba6 0807 	sub.w	r8, r6, r7
 80069b2:	608b      	str	r3, [r1, #8]
 80069b4:	f1b8 0f00 	cmp.w	r8, #0
 80069b8:	dde9      	ble.n	800698e <__sflush_r+0xae>
 80069ba:	6a21      	ldr	r1, [r4, #32]
 80069bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80069be:	4643      	mov	r3, r8
 80069c0:	463a      	mov	r2, r7
 80069c2:	4628      	mov	r0, r5
 80069c4:	47b0      	blx	r6
 80069c6:	2800      	cmp	r0, #0
 80069c8:	dc08      	bgt.n	80069dc <__sflush_r+0xfc>
 80069ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069d2:	81a3      	strh	r3, [r4, #12]
 80069d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069dc:	4407      	add	r7, r0
 80069de:	eba8 0800 	sub.w	r8, r8, r0
 80069e2:	e7e7      	b.n	80069b4 <__sflush_r+0xd4>
 80069e4:	20400001 	.word	0x20400001

080069e8 <_fflush_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	690b      	ldr	r3, [r1, #16]
 80069ec:	4605      	mov	r5, r0
 80069ee:	460c      	mov	r4, r1
 80069f0:	b913      	cbnz	r3, 80069f8 <_fflush_r+0x10>
 80069f2:	2500      	movs	r5, #0
 80069f4:	4628      	mov	r0, r5
 80069f6:	bd38      	pop	{r3, r4, r5, pc}
 80069f8:	b118      	cbz	r0, 8006a02 <_fflush_r+0x1a>
 80069fa:	6a03      	ldr	r3, [r0, #32]
 80069fc:	b90b      	cbnz	r3, 8006a02 <_fflush_r+0x1a>
 80069fe:	f7ff fb03 	bl	8006008 <__sinit>
 8006a02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0f3      	beq.n	80069f2 <_fflush_r+0xa>
 8006a0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a0c:	07d0      	lsls	r0, r2, #31
 8006a0e:	d404      	bmi.n	8006a1a <_fflush_r+0x32>
 8006a10:	0599      	lsls	r1, r3, #22
 8006a12:	d402      	bmi.n	8006a1a <_fflush_r+0x32>
 8006a14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a16:	f7ff fbce 	bl	80061b6 <__retarget_lock_acquire_recursive>
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	f7ff ff5f 	bl	80068e0 <__sflush_r>
 8006a22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a24:	07da      	lsls	r2, r3, #31
 8006a26:	4605      	mov	r5, r0
 8006a28:	d4e4      	bmi.n	80069f4 <_fflush_r+0xc>
 8006a2a:	89a3      	ldrh	r3, [r4, #12]
 8006a2c:	059b      	lsls	r3, r3, #22
 8006a2e:	d4e1      	bmi.n	80069f4 <_fflush_r+0xc>
 8006a30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a32:	f7ff fbc1 	bl	80061b8 <__retarget_lock_release_recursive>
 8006a36:	e7dd      	b.n	80069f4 <_fflush_r+0xc>

08006a38 <__malloc_lock>:
 8006a38:	4801      	ldr	r0, [pc, #4]	@ (8006a40 <__malloc_lock+0x8>)
 8006a3a:	f7ff bbbc 	b.w	80061b6 <__retarget_lock_acquire_recursive>
 8006a3e:	bf00      	nop
 8006a40:	200145b4 	.word	0x200145b4

08006a44 <__malloc_unlock>:
 8006a44:	4801      	ldr	r0, [pc, #4]	@ (8006a4c <__malloc_unlock+0x8>)
 8006a46:	f7ff bbb7 	b.w	80061b8 <__retarget_lock_release_recursive>
 8006a4a:	bf00      	nop
 8006a4c:	200145b4 	.word	0x200145b4

08006a50 <__sread>:
 8006a50:	b510      	push	{r4, lr}
 8006a52:	460c      	mov	r4, r1
 8006a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a58:	f000 f99e 	bl	8006d98 <_read_r>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	bfab      	itete	ge
 8006a60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a62:	89a3      	ldrhlt	r3, [r4, #12]
 8006a64:	181b      	addge	r3, r3, r0
 8006a66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a6a:	bfac      	ite	ge
 8006a6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a6e:	81a3      	strhlt	r3, [r4, #12]
 8006a70:	bd10      	pop	{r4, pc}

08006a72 <__swrite>:
 8006a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a76:	461f      	mov	r7, r3
 8006a78:	898b      	ldrh	r3, [r1, #12]
 8006a7a:	05db      	lsls	r3, r3, #23
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	460c      	mov	r4, r1
 8006a80:	4616      	mov	r6, r2
 8006a82:	d505      	bpl.n	8006a90 <__swrite+0x1e>
 8006a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a88:	2302      	movs	r3, #2
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f000 f972 	bl	8006d74 <_lseek_r>
 8006a90:	89a3      	ldrh	r3, [r4, #12]
 8006a92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a9a:	81a3      	strh	r3, [r4, #12]
 8006a9c:	4632      	mov	r2, r6
 8006a9e:	463b      	mov	r3, r7
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa6:	f7ff b9db 	b.w	8005e60 <_write_r>

08006aaa <__sseek>:
 8006aaa:	b510      	push	{r4, lr}
 8006aac:	460c      	mov	r4, r1
 8006aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab2:	f000 f95f 	bl	8006d74 <_lseek_r>
 8006ab6:	1c43      	adds	r3, r0, #1
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	bf15      	itete	ne
 8006abc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006abe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ac2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ac6:	81a3      	strheq	r3, [r4, #12]
 8006ac8:	bf18      	it	ne
 8006aca:	81a3      	strhne	r3, [r4, #12]
 8006acc:	bd10      	pop	{r4, pc}

08006ace <__sclose>:
 8006ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ad2:	f000 b983 	b.w	8006ddc <_close_r>

08006ad6 <_realloc_r>:
 8006ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ada:	4607      	mov	r7, r0
 8006adc:	4614      	mov	r4, r2
 8006ade:	460d      	mov	r5, r1
 8006ae0:	b921      	cbnz	r1, 8006aec <_realloc_r+0x16>
 8006ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	f7ff bcee 	b.w	80064c8 <_malloc_r>
 8006aec:	b92a      	cbnz	r2, 8006afa <_realloc_r+0x24>
 8006aee:	f000 f997 	bl	8006e20 <_free_r>
 8006af2:	4625      	mov	r5, r4
 8006af4:	4628      	mov	r0, r5
 8006af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006afa:	f000 f9db 	bl	8006eb4 <_malloc_usable_size_r>
 8006afe:	4284      	cmp	r4, r0
 8006b00:	4606      	mov	r6, r0
 8006b02:	d802      	bhi.n	8006b0a <_realloc_r+0x34>
 8006b04:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b08:	d8f4      	bhi.n	8006af4 <_realloc_r+0x1e>
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	4638      	mov	r0, r7
 8006b0e:	f7ff fcdb 	bl	80064c8 <_malloc_r>
 8006b12:	4680      	mov	r8, r0
 8006b14:	b908      	cbnz	r0, 8006b1a <_realloc_r+0x44>
 8006b16:	4645      	mov	r5, r8
 8006b18:	e7ec      	b.n	8006af4 <_realloc_r+0x1e>
 8006b1a:	42b4      	cmp	r4, r6
 8006b1c:	4622      	mov	r2, r4
 8006b1e:	4629      	mov	r1, r5
 8006b20:	bf28      	it	cs
 8006b22:	4632      	movcs	r2, r6
 8006b24:	f7ff fb49 	bl	80061ba <memcpy>
 8006b28:	4629      	mov	r1, r5
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	f000 f978 	bl	8006e20 <_free_r>
 8006b30:	e7f1      	b.n	8006b16 <_realloc_r+0x40>

08006b32 <__swbuf_r>:
 8006b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b34:	460e      	mov	r6, r1
 8006b36:	4614      	mov	r4, r2
 8006b38:	4605      	mov	r5, r0
 8006b3a:	b118      	cbz	r0, 8006b44 <__swbuf_r+0x12>
 8006b3c:	6a03      	ldr	r3, [r0, #32]
 8006b3e:	b90b      	cbnz	r3, 8006b44 <__swbuf_r+0x12>
 8006b40:	f7ff fa62 	bl	8006008 <__sinit>
 8006b44:	69a3      	ldr	r3, [r4, #24]
 8006b46:	60a3      	str	r3, [r4, #8]
 8006b48:	89a3      	ldrh	r3, [r4, #12]
 8006b4a:	071a      	lsls	r2, r3, #28
 8006b4c:	d501      	bpl.n	8006b52 <__swbuf_r+0x20>
 8006b4e:	6923      	ldr	r3, [r4, #16]
 8006b50:	b943      	cbnz	r3, 8006b64 <__swbuf_r+0x32>
 8006b52:	4621      	mov	r1, r4
 8006b54:	4628      	mov	r0, r5
 8006b56:	f000 f82b 	bl	8006bb0 <__swsetup_r>
 8006b5a:	b118      	cbz	r0, 8006b64 <__swbuf_r+0x32>
 8006b5c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006b60:	4638      	mov	r0, r7
 8006b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	6922      	ldr	r2, [r4, #16]
 8006b68:	1a98      	subs	r0, r3, r2
 8006b6a:	6963      	ldr	r3, [r4, #20]
 8006b6c:	b2f6      	uxtb	r6, r6
 8006b6e:	4283      	cmp	r3, r0
 8006b70:	4637      	mov	r7, r6
 8006b72:	dc05      	bgt.n	8006b80 <__swbuf_r+0x4e>
 8006b74:	4621      	mov	r1, r4
 8006b76:	4628      	mov	r0, r5
 8006b78:	f7ff ff36 	bl	80069e8 <_fflush_r>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d1ed      	bne.n	8006b5c <__swbuf_r+0x2a>
 8006b80:	68a3      	ldr	r3, [r4, #8]
 8006b82:	3b01      	subs	r3, #1
 8006b84:	60a3      	str	r3, [r4, #8]
 8006b86:	6823      	ldr	r3, [r4, #0]
 8006b88:	1c5a      	adds	r2, r3, #1
 8006b8a:	6022      	str	r2, [r4, #0]
 8006b8c:	701e      	strb	r6, [r3, #0]
 8006b8e:	6962      	ldr	r2, [r4, #20]
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d004      	beq.n	8006ba0 <__swbuf_r+0x6e>
 8006b96:	89a3      	ldrh	r3, [r4, #12]
 8006b98:	07db      	lsls	r3, r3, #31
 8006b9a:	d5e1      	bpl.n	8006b60 <__swbuf_r+0x2e>
 8006b9c:	2e0a      	cmp	r6, #10
 8006b9e:	d1df      	bne.n	8006b60 <__swbuf_r+0x2e>
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	f7ff ff20 	bl	80069e8 <_fflush_r>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	d0d9      	beq.n	8006b60 <__swbuf_r+0x2e>
 8006bac:	e7d6      	b.n	8006b5c <__swbuf_r+0x2a>
	...

08006bb0 <__swsetup_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	4b29      	ldr	r3, [pc, #164]	@ (8006c58 <__swsetup_r+0xa8>)
 8006bb4:	4605      	mov	r5, r0
 8006bb6:	6818      	ldr	r0, [r3, #0]
 8006bb8:	460c      	mov	r4, r1
 8006bba:	b118      	cbz	r0, 8006bc4 <__swsetup_r+0x14>
 8006bbc:	6a03      	ldr	r3, [r0, #32]
 8006bbe:	b90b      	cbnz	r3, 8006bc4 <__swsetup_r+0x14>
 8006bc0:	f7ff fa22 	bl	8006008 <__sinit>
 8006bc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bc8:	0719      	lsls	r1, r3, #28
 8006bca:	d422      	bmi.n	8006c12 <__swsetup_r+0x62>
 8006bcc:	06da      	lsls	r2, r3, #27
 8006bce:	d407      	bmi.n	8006be0 <__swsetup_r+0x30>
 8006bd0:	2209      	movs	r2, #9
 8006bd2:	602a      	str	r2, [r5, #0]
 8006bd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bd8:	81a3      	strh	r3, [r4, #12]
 8006bda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bde:	e033      	b.n	8006c48 <__swsetup_r+0x98>
 8006be0:	0758      	lsls	r0, r3, #29
 8006be2:	d512      	bpl.n	8006c0a <__swsetup_r+0x5a>
 8006be4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006be6:	b141      	cbz	r1, 8006bfa <__swsetup_r+0x4a>
 8006be8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006bec:	4299      	cmp	r1, r3
 8006bee:	d002      	beq.n	8006bf6 <__swsetup_r+0x46>
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	f000 f915 	bl	8006e20 <_free_r>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006bfa:	89a3      	ldrh	r3, [r4, #12]
 8006bfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006c00:	81a3      	strh	r3, [r4, #12]
 8006c02:	2300      	movs	r3, #0
 8006c04:	6063      	str	r3, [r4, #4]
 8006c06:	6923      	ldr	r3, [r4, #16]
 8006c08:	6023      	str	r3, [r4, #0]
 8006c0a:	89a3      	ldrh	r3, [r4, #12]
 8006c0c:	f043 0308 	orr.w	r3, r3, #8
 8006c10:	81a3      	strh	r3, [r4, #12]
 8006c12:	6923      	ldr	r3, [r4, #16]
 8006c14:	b94b      	cbnz	r3, 8006c2a <__swsetup_r+0x7a>
 8006c16:	89a3      	ldrh	r3, [r4, #12]
 8006c18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c20:	d003      	beq.n	8006c2a <__swsetup_r+0x7a>
 8006c22:	4621      	mov	r1, r4
 8006c24:	4628      	mov	r0, r5
 8006c26:	f000 f83f 	bl	8006ca8 <__smakebuf_r>
 8006c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c2e:	f013 0201 	ands.w	r2, r3, #1
 8006c32:	d00a      	beq.n	8006c4a <__swsetup_r+0x9a>
 8006c34:	2200      	movs	r2, #0
 8006c36:	60a2      	str	r2, [r4, #8]
 8006c38:	6962      	ldr	r2, [r4, #20]
 8006c3a:	4252      	negs	r2, r2
 8006c3c:	61a2      	str	r2, [r4, #24]
 8006c3e:	6922      	ldr	r2, [r4, #16]
 8006c40:	b942      	cbnz	r2, 8006c54 <__swsetup_r+0xa4>
 8006c42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006c46:	d1c5      	bne.n	8006bd4 <__swsetup_r+0x24>
 8006c48:	bd38      	pop	{r3, r4, r5, pc}
 8006c4a:	0799      	lsls	r1, r3, #30
 8006c4c:	bf58      	it	pl
 8006c4e:	6962      	ldrpl	r2, [r4, #20]
 8006c50:	60a2      	str	r2, [r4, #8]
 8006c52:	e7f4      	b.n	8006c3e <__swsetup_r+0x8e>
 8006c54:	2000      	movs	r0, #0
 8006c56:	e7f7      	b.n	8006c48 <__swsetup_r+0x98>
 8006c58:	2000001c 	.word	0x2000001c

08006c5c <__swhatbuf_r>:
 8006c5c:	b570      	push	{r4, r5, r6, lr}
 8006c5e:	460c      	mov	r4, r1
 8006c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c64:	2900      	cmp	r1, #0
 8006c66:	b096      	sub	sp, #88	@ 0x58
 8006c68:	4615      	mov	r5, r2
 8006c6a:	461e      	mov	r6, r3
 8006c6c:	da0d      	bge.n	8006c8a <__swhatbuf_r+0x2e>
 8006c6e:	89a3      	ldrh	r3, [r4, #12]
 8006c70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006c74:	f04f 0100 	mov.w	r1, #0
 8006c78:	bf14      	ite	ne
 8006c7a:	2340      	movne	r3, #64	@ 0x40
 8006c7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006c80:	2000      	movs	r0, #0
 8006c82:	6031      	str	r1, [r6, #0]
 8006c84:	602b      	str	r3, [r5, #0]
 8006c86:	b016      	add	sp, #88	@ 0x58
 8006c88:	bd70      	pop	{r4, r5, r6, pc}
 8006c8a:	466a      	mov	r2, sp
 8006c8c:	f000 f8b6 	bl	8006dfc <_fstat_r>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	dbec      	blt.n	8006c6e <__swhatbuf_r+0x12>
 8006c94:	9901      	ldr	r1, [sp, #4]
 8006c96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006c9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006c9e:	4259      	negs	r1, r3
 8006ca0:	4159      	adcs	r1, r3
 8006ca2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ca6:	e7eb      	b.n	8006c80 <__swhatbuf_r+0x24>

08006ca8 <__smakebuf_r>:
 8006ca8:	898b      	ldrh	r3, [r1, #12]
 8006caa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cac:	079d      	lsls	r5, r3, #30
 8006cae:	4606      	mov	r6, r0
 8006cb0:	460c      	mov	r4, r1
 8006cb2:	d507      	bpl.n	8006cc4 <__smakebuf_r+0x1c>
 8006cb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006cb8:	6023      	str	r3, [r4, #0]
 8006cba:	6123      	str	r3, [r4, #16]
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	6163      	str	r3, [r4, #20]
 8006cc0:	b003      	add	sp, #12
 8006cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc4:	ab01      	add	r3, sp, #4
 8006cc6:	466a      	mov	r2, sp
 8006cc8:	f7ff ffc8 	bl	8006c5c <__swhatbuf_r>
 8006ccc:	9f00      	ldr	r7, [sp, #0]
 8006cce:	4605      	mov	r5, r0
 8006cd0:	4639      	mov	r1, r7
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f7ff fbf8 	bl	80064c8 <_malloc_r>
 8006cd8:	b948      	cbnz	r0, 8006cee <__smakebuf_r+0x46>
 8006cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cde:	059a      	lsls	r2, r3, #22
 8006ce0:	d4ee      	bmi.n	8006cc0 <__smakebuf_r+0x18>
 8006ce2:	f023 0303 	bic.w	r3, r3, #3
 8006ce6:	f043 0302 	orr.w	r3, r3, #2
 8006cea:	81a3      	strh	r3, [r4, #12]
 8006cec:	e7e2      	b.n	8006cb4 <__smakebuf_r+0xc>
 8006cee:	89a3      	ldrh	r3, [r4, #12]
 8006cf0:	6020      	str	r0, [r4, #0]
 8006cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cf6:	81a3      	strh	r3, [r4, #12]
 8006cf8:	9b01      	ldr	r3, [sp, #4]
 8006cfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006cfe:	b15b      	cbz	r3, 8006d18 <__smakebuf_r+0x70>
 8006d00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d04:	4630      	mov	r0, r6
 8006d06:	f000 f825 	bl	8006d54 <_isatty_r>
 8006d0a:	b128      	cbz	r0, 8006d18 <__smakebuf_r+0x70>
 8006d0c:	89a3      	ldrh	r3, [r4, #12]
 8006d0e:	f023 0303 	bic.w	r3, r3, #3
 8006d12:	f043 0301 	orr.w	r3, r3, #1
 8006d16:	81a3      	strh	r3, [r4, #12]
 8006d18:	89a3      	ldrh	r3, [r4, #12]
 8006d1a:	431d      	orrs	r5, r3
 8006d1c:	81a5      	strh	r5, [r4, #12]
 8006d1e:	e7cf      	b.n	8006cc0 <__smakebuf_r+0x18>

08006d20 <memmove>:
 8006d20:	4288      	cmp	r0, r1
 8006d22:	b510      	push	{r4, lr}
 8006d24:	eb01 0402 	add.w	r4, r1, r2
 8006d28:	d902      	bls.n	8006d30 <memmove+0x10>
 8006d2a:	4284      	cmp	r4, r0
 8006d2c:	4623      	mov	r3, r4
 8006d2e:	d807      	bhi.n	8006d40 <memmove+0x20>
 8006d30:	1e43      	subs	r3, r0, #1
 8006d32:	42a1      	cmp	r1, r4
 8006d34:	d008      	beq.n	8006d48 <memmove+0x28>
 8006d36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d3e:	e7f8      	b.n	8006d32 <memmove+0x12>
 8006d40:	4402      	add	r2, r0
 8006d42:	4601      	mov	r1, r0
 8006d44:	428a      	cmp	r2, r1
 8006d46:	d100      	bne.n	8006d4a <memmove+0x2a>
 8006d48:	bd10      	pop	{r4, pc}
 8006d4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d52:	e7f7      	b.n	8006d44 <memmove+0x24>

08006d54 <_isatty_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4d06      	ldr	r5, [pc, #24]	@ (8006d70 <_isatty_r+0x1c>)
 8006d58:	2300      	movs	r3, #0
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	4608      	mov	r0, r1
 8006d5e:	602b      	str	r3, [r5, #0]
 8006d60:	f7fa f82f 	bl	8000dc2 <_isatty>
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	d102      	bne.n	8006d6e <_isatty_r+0x1a>
 8006d68:	682b      	ldr	r3, [r5, #0]
 8006d6a:	b103      	cbz	r3, 8006d6e <_isatty_r+0x1a>
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
 8006d70:	200145c0 	.word	0x200145c0

08006d74 <_lseek_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	4d07      	ldr	r5, [pc, #28]	@ (8006d94 <_lseek_r+0x20>)
 8006d78:	4604      	mov	r4, r0
 8006d7a:	4608      	mov	r0, r1
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	2200      	movs	r2, #0
 8006d80:	602a      	str	r2, [r5, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	f7fa f828 	bl	8000dd8 <_lseek>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d102      	bne.n	8006d92 <_lseek_r+0x1e>
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	b103      	cbz	r3, 8006d92 <_lseek_r+0x1e>
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
 8006d94:	200145c0 	.word	0x200145c0

08006d98 <_read_r>:
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	4d07      	ldr	r5, [pc, #28]	@ (8006db8 <_read_r+0x20>)
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	4608      	mov	r0, r1
 8006da0:	4611      	mov	r1, r2
 8006da2:	2200      	movs	r2, #0
 8006da4:	602a      	str	r2, [r5, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	f7f9 ffd2 	bl	8000d50 <_read>
 8006dac:	1c43      	adds	r3, r0, #1
 8006dae:	d102      	bne.n	8006db6 <_read_r+0x1e>
 8006db0:	682b      	ldr	r3, [r5, #0]
 8006db2:	b103      	cbz	r3, 8006db6 <_read_r+0x1e>
 8006db4:	6023      	str	r3, [r4, #0]
 8006db6:	bd38      	pop	{r3, r4, r5, pc}
 8006db8:	200145c0 	.word	0x200145c0

08006dbc <_sbrk_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	4d06      	ldr	r5, [pc, #24]	@ (8006dd8 <_sbrk_r+0x1c>)
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	4608      	mov	r0, r1
 8006dc6:	602b      	str	r3, [r5, #0]
 8006dc8:	f7fa f814 	bl	8000df4 <_sbrk>
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d102      	bne.n	8006dd6 <_sbrk_r+0x1a>
 8006dd0:	682b      	ldr	r3, [r5, #0]
 8006dd2:	b103      	cbz	r3, 8006dd6 <_sbrk_r+0x1a>
 8006dd4:	6023      	str	r3, [r4, #0]
 8006dd6:	bd38      	pop	{r3, r4, r5, pc}
 8006dd8:	200145c0 	.word	0x200145c0

08006ddc <_close_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4d06      	ldr	r5, [pc, #24]	@ (8006df8 <_close_r+0x1c>)
 8006de0:	2300      	movs	r3, #0
 8006de2:	4604      	mov	r4, r0
 8006de4:	4608      	mov	r0, r1
 8006de6:	602b      	str	r3, [r5, #0]
 8006de8:	f7f9 ffcf 	bl	8000d8a <_close>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d102      	bne.n	8006df6 <_close_r+0x1a>
 8006df0:	682b      	ldr	r3, [r5, #0]
 8006df2:	b103      	cbz	r3, 8006df6 <_close_r+0x1a>
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	200145c0 	.word	0x200145c0

08006dfc <_fstat_r>:
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	4d07      	ldr	r5, [pc, #28]	@ (8006e1c <_fstat_r+0x20>)
 8006e00:	2300      	movs	r3, #0
 8006e02:	4604      	mov	r4, r0
 8006e04:	4608      	mov	r0, r1
 8006e06:	4611      	mov	r1, r2
 8006e08:	602b      	str	r3, [r5, #0]
 8006e0a:	f7f9 ffca 	bl	8000da2 <_fstat>
 8006e0e:	1c43      	adds	r3, r0, #1
 8006e10:	d102      	bne.n	8006e18 <_fstat_r+0x1c>
 8006e12:	682b      	ldr	r3, [r5, #0]
 8006e14:	b103      	cbz	r3, 8006e18 <_fstat_r+0x1c>
 8006e16:	6023      	str	r3, [r4, #0]
 8006e18:	bd38      	pop	{r3, r4, r5, pc}
 8006e1a:	bf00      	nop
 8006e1c:	200145c0 	.word	0x200145c0

08006e20 <_free_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4605      	mov	r5, r0
 8006e24:	2900      	cmp	r1, #0
 8006e26:	d041      	beq.n	8006eac <_free_r+0x8c>
 8006e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e2c:	1f0c      	subs	r4, r1, #4
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	bfb8      	it	lt
 8006e32:	18e4      	addlt	r4, r4, r3
 8006e34:	f7ff fe00 	bl	8006a38 <__malloc_lock>
 8006e38:	4a1d      	ldr	r2, [pc, #116]	@ (8006eb0 <_free_r+0x90>)
 8006e3a:	6813      	ldr	r3, [r2, #0]
 8006e3c:	b933      	cbnz	r3, 8006e4c <_free_r+0x2c>
 8006e3e:	6063      	str	r3, [r4, #4]
 8006e40:	6014      	str	r4, [r2, #0]
 8006e42:	4628      	mov	r0, r5
 8006e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e48:	f7ff bdfc 	b.w	8006a44 <__malloc_unlock>
 8006e4c:	42a3      	cmp	r3, r4
 8006e4e:	d908      	bls.n	8006e62 <_free_r+0x42>
 8006e50:	6820      	ldr	r0, [r4, #0]
 8006e52:	1821      	adds	r1, r4, r0
 8006e54:	428b      	cmp	r3, r1
 8006e56:	bf01      	itttt	eq
 8006e58:	6819      	ldreq	r1, [r3, #0]
 8006e5a:	685b      	ldreq	r3, [r3, #4]
 8006e5c:	1809      	addeq	r1, r1, r0
 8006e5e:	6021      	streq	r1, [r4, #0]
 8006e60:	e7ed      	b.n	8006e3e <_free_r+0x1e>
 8006e62:	461a      	mov	r2, r3
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	b10b      	cbz	r3, 8006e6c <_free_r+0x4c>
 8006e68:	42a3      	cmp	r3, r4
 8006e6a:	d9fa      	bls.n	8006e62 <_free_r+0x42>
 8006e6c:	6811      	ldr	r1, [r2, #0]
 8006e6e:	1850      	adds	r0, r2, r1
 8006e70:	42a0      	cmp	r0, r4
 8006e72:	d10b      	bne.n	8006e8c <_free_r+0x6c>
 8006e74:	6820      	ldr	r0, [r4, #0]
 8006e76:	4401      	add	r1, r0
 8006e78:	1850      	adds	r0, r2, r1
 8006e7a:	4283      	cmp	r3, r0
 8006e7c:	6011      	str	r1, [r2, #0]
 8006e7e:	d1e0      	bne.n	8006e42 <_free_r+0x22>
 8006e80:	6818      	ldr	r0, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	6053      	str	r3, [r2, #4]
 8006e86:	4408      	add	r0, r1
 8006e88:	6010      	str	r0, [r2, #0]
 8006e8a:	e7da      	b.n	8006e42 <_free_r+0x22>
 8006e8c:	d902      	bls.n	8006e94 <_free_r+0x74>
 8006e8e:	230c      	movs	r3, #12
 8006e90:	602b      	str	r3, [r5, #0]
 8006e92:	e7d6      	b.n	8006e42 <_free_r+0x22>
 8006e94:	6820      	ldr	r0, [r4, #0]
 8006e96:	1821      	adds	r1, r4, r0
 8006e98:	428b      	cmp	r3, r1
 8006e9a:	bf04      	itt	eq
 8006e9c:	6819      	ldreq	r1, [r3, #0]
 8006e9e:	685b      	ldreq	r3, [r3, #4]
 8006ea0:	6063      	str	r3, [r4, #4]
 8006ea2:	bf04      	itt	eq
 8006ea4:	1809      	addeq	r1, r1, r0
 8006ea6:	6021      	streq	r1, [r4, #0]
 8006ea8:	6054      	str	r4, [r2, #4]
 8006eaa:	e7ca      	b.n	8006e42 <_free_r+0x22>
 8006eac:	bd38      	pop	{r3, r4, r5, pc}
 8006eae:	bf00      	nop
 8006eb0:	200145bc 	.word	0x200145bc

08006eb4 <_malloc_usable_size_r>:
 8006eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eb8:	1f18      	subs	r0, r3, #4
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	bfbc      	itt	lt
 8006ebe:	580b      	ldrlt	r3, [r1, r0]
 8006ec0:	18c0      	addlt	r0, r0, r3
 8006ec2:	4770      	bx	lr

08006ec4 <_init>:
 8006ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec6:	bf00      	nop
 8006ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eca:	bc08      	pop	{r3}
 8006ecc:	469e      	mov	lr, r3
 8006ece:	4770      	bx	lr

08006ed0 <_fini>:
 8006ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed2:	bf00      	nop
 8006ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ed6:	bc08      	pop	{r3}
 8006ed8:	469e      	mov	lr, r3
 8006eda:	4770      	bx	lr
