
keypad_polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e88  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001010  08001010  00002010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001050  08001050  0000305c  2**0
                  CONTENTS
  4 .ARM          00000000  08001050  08001050  0000305c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001050  08001050  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001050  08001050  00002050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001054  08001054  00002054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001058  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009f8  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000351  00000000  00000000  00003a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  00003dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c5  00000000  00000000  00003ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cbe  00000000  00000000  00003fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000148d  00000000  00000000  00006c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000097c9  00000000  00000000  00008100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000118c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000009fc  00000000  00000000  0001190c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  00012308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ff8 	.word	0x08000ff8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08000ff8 	.word	0x08000ff8

080001c8 <main>:
 */

void delay();

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
	uint32_t volatile *const pAhb1_ENR = (uint32_t*)0x40023830;
 80001ce:	4b9d      	ldr	r3, [pc, #628]	@ (8000444 <main+0x27c>)
 80001d0:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const pGpiod_MODE = (uint32_t*)0x40020C00;
 80001d2:	4b9d      	ldr	r3, [pc, #628]	@ (8000448 <main+0x280>)
 80001d4:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const pGpiod_PUPDR = (uint32_t*)0x40020C0C;
 80001d6:	4b9d      	ldr	r3, [pc, #628]	@ (800044c <main+0x284>)
 80001d8:	60bb      	str	r3, [r7, #8]
	uint32_t const volatile *const pGpiod_IDR = (uint32_t*)0x40020C10;
 80001da:	4b9d      	ldr	r3, [pc, #628]	@ (8000450 <main+0x288>)
 80001dc:	607b      	str	r3, [r7, #4]
	uint32_t volatile *const pGpiod_ODR = (uint32_t*)0x40020C14;
 80001de:	4b9d      	ldr	r3, [pc, #628]	@ (8000454 <main+0x28c>)
 80001e0:	603b      	str	r3, [r7, #0]

	// ENABLE PD CLK
	*pAhb1_ENR |= (1 << 3);
 80001e2:	693b      	ldr	r3, [r7, #16]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f043 0208 	orr.w	r2, r3, #8
 80001ea:	693b      	ldr	r3, [r7, #16]
 80001ec:	601a      	str	r2, [r3, #0]

	// SET MODE
	*pGpiod_MODE &= ~(0xFF << 0); // 0000 0000 shifted 0 times to clear pin d 0-3
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	601a      	str	r2, [r3, #0]
	*pGpiod_MODE |= (0x55 << 0); //0101 0101 shifted 0 times to set 01/output on pin d 0-3
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f043 0255 	orr.w	r2, r3, #85	@ 0x55
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	601a      	str	r2, [r3, #0]
	*pGpiod_MODE &= ~(0xFF << 16); // 0000 0000 shifted 16 times to clear pin d 8-11
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	601a      	str	r2, [r3, #0]

	// SET PULL-UP ON INPUT/COLUMNS
	*pGpiod_PUPDR &= ~(0xFF << 16); // 0000 0000 shifted 16 times to clear pin d 8-11
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	601a      	str	r2, [r3, #0]
	*pGpiod_PUPDR |= (0x55 << 16); // 0101 0101 shifted 16 times to set 01/pull-up on pin d 8-11;
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f443 02aa 	orr.w	r2, r3, #5570560	@ 0x550000
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	601a      	str	r2, [r3, #0]
	// POLLING


	while (1){

		*pGpiod_ODR |= (0xF << 0); // Set pd 0-3 high to initialize
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 020f 	orr.w	r2, r3, #15
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	601a      	str	r2, [r3, #0]
		*pGpiod_ODR &= ~(1 << 0); // Clear bit 0 to set low
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f023 0201 	bic.w	r2, r3, #1
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	601a      	str	r2, [r3, #0]

		if (!(*pGpiod_IDR & (1 << 8))){
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800024a:	2b00      	cmp	r3, #0
 800024c:	d105      	bne.n	800025a <main+0x92>
			delay();
 800024e:	f000 f925 	bl	800049c <delay>
			printf("1\n");
 8000252:	4881      	ldr	r0, [pc, #516]	@ (8000458 <main+0x290>)
 8000254:	f000 fb40 	bl	80008d8 <puts>
 8000258:	e022      	b.n	80002a0 <main+0xd8>
		}
		else if(!(*pGpiod_IDR & (1 << 9))){
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000262:	2b00      	cmp	r3, #0
 8000264:	d105      	bne.n	8000272 <main+0xaa>
			delay();
 8000266:	f000 f919 	bl	800049c <delay>
			printf("2\n");
 800026a:	487c      	ldr	r0, [pc, #496]	@ (800045c <main+0x294>)
 800026c:	f000 fb34 	bl	80008d8 <puts>
 8000270:	e016      	b.n	80002a0 <main+0xd8>
		}
		else if(!(*pGpiod_IDR & (1 << 10))){
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800027a:	2b00      	cmp	r3, #0
 800027c:	d105      	bne.n	800028a <main+0xc2>
			delay();
 800027e:	f000 f90d 	bl	800049c <delay>
			printf("3\n");
 8000282:	4877      	ldr	r0, [pc, #476]	@ (8000460 <main+0x298>)
 8000284:	f000 fb28 	bl	80008d8 <puts>
 8000288:	e00a      	b.n	80002a0 <main+0xd8>
		}
		else if(!(*pGpiod_IDR & (1 << 11))){
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000292:	2b00      	cmp	r3, #0
 8000294:	d104      	bne.n	80002a0 <main+0xd8>
			delay();
 8000296:	f000 f901 	bl	800049c <delay>
			printf("A\n");
 800029a:	4872      	ldr	r0, [pc, #456]	@ (8000464 <main+0x29c>)
 800029c:	f000 fb1c 	bl	80008d8 <puts>
		}

		*pGpiod_ODR |= (0xF << 0);
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f043 020f 	orr.w	r2, r3, #15
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	601a      	str	r2, [r3, #0]
		*pGpiod_ODR &= ~(1 << 1); // Clear bit 1 to set low
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	f023 0202 	bic.w	r2, r3, #2
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 100000; i++);
 80002b8:	2300      	movs	r3, #0
 80002ba:	61fb      	str	r3, [r7, #28]
 80002bc:	e002      	b.n	80002c4 <main+0xfc>
 80002be:	69fb      	ldr	r3, [r7, #28]
 80002c0:	3301      	adds	r3, #1
 80002c2:	61fb      	str	r3, [r7, #28]
 80002c4:	69fb      	ldr	r3, [r7, #28]
 80002c6:	4a68      	ldr	r2, [pc, #416]	@ (8000468 <main+0x2a0>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	ddf8      	ble.n	80002be <main+0xf6>

		if (!(*pGpiod_IDR & (1 << 8))){
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d105      	bne.n	80002e4 <main+0x11c>
			delay();
 80002d8:	f000 f8e0 	bl	800049c <delay>
			printf("4\n");
 80002dc:	4863      	ldr	r0, [pc, #396]	@ (800046c <main+0x2a4>)
 80002de:	f000 fafb 	bl	80008d8 <puts>
 80002e2:	e022      	b.n	800032a <main+0x162>
		}
		else if(!(*pGpiod_IDR & (1 << 9))){
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d105      	bne.n	80002fc <main+0x134>
			delay();
 80002f0:	f000 f8d4 	bl	800049c <delay>
			printf("5\n");
 80002f4:	485e      	ldr	r0, [pc, #376]	@ (8000470 <main+0x2a8>)
 80002f6:	f000 faef 	bl	80008d8 <puts>
 80002fa:	e016      	b.n	800032a <main+0x162>
		}
		else if(!(*pGpiod_IDR & (1 << 10))){
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000304:	2b00      	cmp	r3, #0
 8000306:	d105      	bne.n	8000314 <main+0x14c>
			delay();
 8000308:	f000 f8c8 	bl	800049c <delay>
			printf("6\n");
 800030c:	4859      	ldr	r0, [pc, #356]	@ (8000474 <main+0x2ac>)
 800030e:	f000 fae3 	bl	80008d8 <puts>
 8000312:	e00a      	b.n	800032a <main+0x162>
		}
		else if(!(*pGpiod_IDR & (1 << 11))){
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800031c:	2b00      	cmp	r3, #0
 800031e:	d104      	bne.n	800032a <main+0x162>
			delay();
 8000320:	f000 f8bc 	bl	800049c <delay>
			printf("B\n");
 8000324:	4854      	ldr	r0, [pc, #336]	@ (8000478 <main+0x2b0>)
 8000326:	f000 fad7 	bl	80008d8 <puts>
		}

		*pGpiod_ODR |= (0xF << 0);
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f043 020f 	orr.w	r2, r3, #15
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	601a      	str	r2, [r3, #0]
		*pGpiod_ODR &= ~(1 << 2); // Clear bit 2 to set low
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f023 0204 	bic.w	r2, r3, #4
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 100000; i++);
 8000342:	2300      	movs	r3, #0
 8000344:	61bb      	str	r3, [r7, #24]
 8000346:	e002      	b.n	800034e <main+0x186>
 8000348:	69bb      	ldr	r3, [r7, #24]
 800034a:	3301      	adds	r3, #1
 800034c:	61bb      	str	r3, [r7, #24]
 800034e:	69bb      	ldr	r3, [r7, #24]
 8000350:	4a45      	ldr	r2, [pc, #276]	@ (8000468 <main+0x2a0>)
 8000352:	4293      	cmp	r3, r2
 8000354:	ddf8      	ble.n	8000348 <main+0x180>

		if (!(*pGpiod_IDR & (1 << 8))){
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800035e:	2b00      	cmp	r3, #0
 8000360:	d105      	bne.n	800036e <main+0x1a6>
			delay();
 8000362:	f000 f89b 	bl	800049c <delay>
			printf("7\n");
 8000366:	4845      	ldr	r0, [pc, #276]	@ (800047c <main+0x2b4>)
 8000368:	f000 fab6 	bl	80008d8 <puts>
 800036c:	e022      	b.n	80003b4 <main+0x1ec>
		}
		else if(!(*pGpiod_IDR & (1 << 9))){
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000376:	2b00      	cmp	r3, #0
 8000378:	d105      	bne.n	8000386 <main+0x1be>
			delay();
 800037a:	f000 f88f 	bl	800049c <delay>
			printf("8\n");
 800037e:	4840      	ldr	r0, [pc, #256]	@ (8000480 <main+0x2b8>)
 8000380:	f000 faaa 	bl	80008d8 <puts>
 8000384:	e016      	b.n	80003b4 <main+0x1ec>
		}
		else if(!(*pGpiod_IDR & (1 << 10))){
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800038e:	2b00      	cmp	r3, #0
 8000390:	d105      	bne.n	800039e <main+0x1d6>
			delay();
 8000392:	f000 f883 	bl	800049c <delay>
			printf("9\n");
 8000396:	483b      	ldr	r0, [pc, #236]	@ (8000484 <main+0x2bc>)
 8000398:	f000 fa9e 	bl	80008d8 <puts>
 800039c:	e00a      	b.n	80003b4 <main+0x1ec>
		}
		else if(!(*pGpiod_IDR & (1 << 11))){
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d104      	bne.n	80003b4 <main+0x1ec>
			delay();
 80003aa:	f000 f877 	bl	800049c <delay>
			printf("C\n");
 80003ae:	4836      	ldr	r0, [pc, #216]	@ (8000488 <main+0x2c0>)
 80003b0:	f000 fa92 	bl	80008d8 <puts>
		}

		*pGpiod_ODR |= (0xF << 0);
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f043 020f 	orr.w	r2, r3, #15
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	601a      	str	r2, [r3, #0]
		*pGpiod_ODR &= ~(1 << 3); // Clear bit 3 to set low
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f023 0208 	bic.w	r2, r3, #8
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 100000; i++);
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
 80003d0:	e002      	b.n	80003d8 <main+0x210>
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	3301      	adds	r3, #1
 80003d6:	617b      	str	r3, [r7, #20]
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	4a23      	ldr	r2, [pc, #140]	@ (8000468 <main+0x2a0>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	ddf8      	ble.n	80003d2 <main+0x20a>

		if (!(*pGpiod_IDR & (1 << 8))){
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d105      	bne.n	80003f8 <main+0x230>
			delay();
 80003ec:	f000 f856 	bl	800049c <delay>
			printf("*\n");
 80003f0:	4826      	ldr	r0, [pc, #152]	@ (800048c <main+0x2c4>)
 80003f2:	f000 fa71 	bl	80008d8 <puts>
 80003f6:	e718      	b.n	800022a <main+0x62>
		}
		else if(!(*pGpiod_IDR & (1 << 9))){
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000400:	2b00      	cmp	r3, #0
 8000402:	d105      	bne.n	8000410 <main+0x248>
			delay();
 8000404:	f000 f84a 	bl	800049c <delay>
			printf("0\n");
 8000408:	4821      	ldr	r0, [pc, #132]	@ (8000490 <main+0x2c8>)
 800040a:	f000 fa65 	bl	80008d8 <puts>
 800040e:	e70c      	b.n	800022a <main+0x62>
		}
		else if(!(*pGpiod_IDR & (1 << 10))){
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000418:	2b00      	cmp	r3, #0
 800041a:	d105      	bne.n	8000428 <main+0x260>
			delay();
 800041c:	f000 f83e 	bl	800049c <delay>
			printf("#\n");
 8000420:	481c      	ldr	r0, [pc, #112]	@ (8000494 <main+0x2cc>)
 8000422:	f000 fa59 	bl	80008d8 <puts>
 8000426:	e700      	b.n	800022a <main+0x62>
		}
		else if(!(*pGpiod_IDR & (1 << 11))){
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000430:	2b00      	cmp	r3, #0
 8000432:	f47f aefa 	bne.w	800022a <main+0x62>
			delay();
 8000436:	f000 f831 	bl	800049c <delay>
			printf("D\n");
 800043a:	4817      	ldr	r0, [pc, #92]	@ (8000498 <main+0x2d0>)
 800043c:	f000 fa4c 	bl	80008d8 <puts>
		*pGpiod_ODR |= (0xF << 0); // Set pd 0-3 high to initialize
 8000440:	e6f3      	b.n	800022a <main+0x62>
 8000442:	bf00      	nop
 8000444:	40023830 	.word	0x40023830
 8000448:	40020c00 	.word	0x40020c00
 800044c:	40020c0c 	.word	0x40020c0c
 8000450:	40020c10 	.word	0x40020c10
 8000454:	40020c14 	.word	0x40020c14
 8000458:	08001010 	.word	0x08001010
 800045c:	08001014 	.word	0x08001014
 8000460:	08001018 	.word	0x08001018
 8000464:	0800101c 	.word	0x0800101c
 8000468:	0001869f 	.word	0x0001869f
 800046c:	08001020 	.word	0x08001020
 8000470:	08001024 	.word	0x08001024
 8000474:	08001028 	.word	0x08001028
 8000478:	0800102c 	.word	0x0800102c
 800047c:	08001030 	.word	0x08001030
 8000480:	08001034 	.word	0x08001034
 8000484:	08001038 	.word	0x08001038
 8000488:	0800103c 	.word	0x0800103c
 800048c:	08001040 	.word	0x08001040
 8000490:	08001044 	.word	0x08001044
 8000494:	08001048 	.word	0x08001048
 8000498:	0800104c 	.word	0x0800104c

0800049c <delay>:

    /* Loop forever */
	for(;;);
}

void delay(){
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 200000;i++);
 80004a2:	2300      	movs	r3, #0
 80004a4:	607b      	str	r3, [r7, #4]
 80004a6:	e002      	b.n	80004ae <delay+0x12>
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	3301      	adds	r3, #1
 80004ac:	607b      	str	r3, [r7, #4]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4a04      	ldr	r2, [pc, #16]	@ (80004c4 <delay+0x28>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	ddf8      	ble.n	80004a8 <delay+0xc>
}
 80004b6:	bf00      	nop
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	00030d3f 	.word	0x00030d3f

080004c8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004d2:	4b0e      	ldr	r3, [pc, #56]	@ (800050c <ITM_SendChar+0x44>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a0d      	ldr	r2, [pc, #52]	@ (800050c <ITM_SendChar+0x44>)
 80004d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004dc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004de:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <ITM_SendChar+0x48>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000510 <ITM_SendChar+0x48>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004ea:	bf00      	nop
 80004ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0f8      	beq.n	80004ec <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004fa:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	6013      	str	r3, [r2, #0]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	e000edfc 	.word	0xe000edfc
 8000510:	e0000e00 	.word	0xe0000e00

08000514 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	e00a      	b.n	800053c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000526:	f3af 8000 	nop.w
 800052a:	4601      	mov	r1, r0
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	1c5a      	adds	r2, r3, #1
 8000530:	60ba      	str	r2, [r7, #8]
 8000532:	b2ca      	uxtb	r2, r1
 8000534:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	3301      	adds	r3, #1
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	429a      	cmp	r2, r3
 8000542:	dbf0      	blt.n	8000526 <_read+0x12>
  }

  return len;
 8000544:	687b      	ldr	r3, [r7, #4]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3718      	adds	r7, #24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <_write>:
//  }
//  return len;
//}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b086      	sub	sp, #24
 8000552:	af00      	add	r7, sp, #0
 8000554:	60f8      	str	r0, [r7, #12]
 8000556:	60b9      	str	r1, [r7, #8]
 8000558:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
 800055e:	e009      	b.n	8000574 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	60ba      	str	r2, [r7, #8]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff ffad 	bl	80004c8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	3301      	adds	r3, #1
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	429a      	cmp	r2, r3
 800057a:	dbf1      	blt.n	8000560 <_write+0x12>
	}
	return len;
 800057c:	687b      	ldr	r3, [r7, #4]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3718      	adds	r7, #24
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <_close>:


int _close(int file)
{
 8000586:	b480      	push	{r7}
 8000588:	b083      	sub	sp, #12
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800058e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005ac:	605a      	str	r2, [r3, #4]
  return 0;
 80005ae:	2300      	movs	r3, #0
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr

080005ba <_isatty>:

int _isatty(int file)
{
 80005ba:	b480      	push	{r7}
 80005bc:	b083      	sub	sp, #12
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005c2:	2301      	movs	r3, #1
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b085      	sub	sp, #20
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	60f8      	str	r0, [r7, #12]
 80005d6:	60b9      	str	r1, [r7, #8]
 80005d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005da:	2300      	movs	r3, #0
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
	...

080005e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f0:	4a14      	ldr	r2, [pc, #80]	@ (8000644 <_sbrk+0x5c>)
 80005f2:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <_sbrk+0x60>)
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005fc:	4b13      	ldr	r3, [pc, #76]	@ (800064c <_sbrk+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d102      	bne.n	800060a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000604:	4b11      	ldr	r3, [pc, #68]	@ (800064c <_sbrk+0x64>)
 8000606:	4a12      	ldr	r2, [pc, #72]	@ (8000650 <_sbrk+0x68>)
 8000608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800060a:	4b10      	ldr	r3, [pc, #64]	@ (800064c <_sbrk+0x64>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	429a      	cmp	r2, r3
 8000616:	d207      	bcs.n	8000628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000618:	f000 f96e 	bl	80008f8 <__errno>
 800061c:	4603      	mov	r3, r0
 800061e:	220c      	movs	r2, #12
 8000620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000622:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000626:	e009      	b.n	800063c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000628:	4b08      	ldr	r3, [pc, #32]	@ (800064c <_sbrk+0x64>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800062e:	4b07      	ldr	r3, [pc, #28]	@ (800064c <_sbrk+0x64>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	4a05      	ldr	r2, [pc, #20]	@ (800064c <_sbrk+0x64>)
 8000638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800063a:	68fb      	ldr	r3, [r7, #12]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3718      	adds	r7, #24
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20020000 	.word	0x20020000
 8000648:	00000400 	.word	0x00000400
 800064c:	20000078 	.word	0x20000078
 8000650:	200001c8 	.word	0x200001c8

08000654 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000654:	480d      	ldr	r0, [pc, #52]	@ (800068c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000656:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000658:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800065c:	480c      	ldr	r0, [pc, #48]	@ (8000690 <LoopForever+0x6>)
  ldr r1, =_edata
 800065e:	490d      	ldr	r1, [pc, #52]	@ (8000694 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000660:	4a0d      	ldr	r2, [pc, #52]	@ (8000698 <LoopForever+0xe>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000664:	e002      	b.n	800066c <LoopCopyDataInit>

08000666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066a:	3304      	adds	r3, #4

0800066c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800066c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000670:	d3f9      	bcc.n	8000666 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000672:	4a0a      	ldr	r2, [pc, #40]	@ (800069c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000674:	4c0a      	ldr	r4, [pc, #40]	@ (80006a0 <LoopForever+0x16>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000678:	e001      	b.n	800067e <LoopFillZerobss>

0800067a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800067c:	3204      	adds	r2, #4

0800067e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000680:	d3fb      	bcc.n	800067a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000682:	f000 f93f 	bl	8000904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000686:	f7ff fd9f 	bl	80001c8 <main>

0800068a <LoopForever>:

LoopForever:
  b LoopForever
 800068a:	e7fe      	b.n	800068a <LoopForever>
  ldr   r0, =_estack
 800068c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000694:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000698:	08001058 	.word	0x08001058
  ldr r2, =_sbss
 800069c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006a0:	200001c8 	.word	0x200001c8

080006a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a4:	e7fe      	b.n	80006a4 <ADC_IRQHandler>
	...

080006a8 <std>:
 80006a8:	2300      	movs	r3, #0
 80006aa:	b510      	push	{r4, lr}
 80006ac:	4604      	mov	r4, r0
 80006ae:	e9c0 3300 	strd	r3, r3, [r0]
 80006b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006b6:	6083      	str	r3, [r0, #8]
 80006b8:	8181      	strh	r1, [r0, #12]
 80006ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80006bc:	81c2      	strh	r2, [r0, #14]
 80006be:	6183      	str	r3, [r0, #24]
 80006c0:	4619      	mov	r1, r3
 80006c2:	2208      	movs	r2, #8
 80006c4:	305c      	adds	r0, #92	@ 0x5c
 80006c6:	f000 f90f 	bl	80008e8 <memset>
 80006ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <std+0x58>)
 80006cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80006ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <std+0x5c>)
 80006d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80006d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <std+0x60>)
 80006d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80006d6:	4b0d      	ldr	r3, [pc, #52]	@ (800070c <std+0x64>)
 80006d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80006da:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <std+0x68>)
 80006dc:	6224      	str	r4, [r4, #32]
 80006de:	429c      	cmp	r4, r3
 80006e0:	d006      	beq.n	80006f0 <std+0x48>
 80006e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80006e6:	4294      	cmp	r4, r2
 80006e8:	d002      	beq.n	80006f0 <std+0x48>
 80006ea:	33d0      	adds	r3, #208	@ 0xd0
 80006ec:	429c      	cmp	r4, r3
 80006ee:	d105      	bne.n	80006fc <std+0x54>
 80006f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80006f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006f8:	f000 b928 	b.w	800094c <__retarget_lock_init_recursive>
 80006fc:	bd10      	pop	{r4, pc}
 80006fe:	bf00      	nop
 8000700:	08000c01 	.word	0x08000c01
 8000704:	08000c23 	.word	0x08000c23
 8000708:	08000c5b 	.word	0x08000c5b
 800070c:	08000c7f 	.word	0x08000c7f
 8000710:	2000007c 	.word	0x2000007c

08000714 <stdio_exit_handler>:
 8000714:	4a02      	ldr	r2, [pc, #8]	@ (8000720 <stdio_exit_handler+0xc>)
 8000716:	4903      	ldr	r1, [pc, #12]	@ (8000724 <stdio_exit_handler+0x10>)
 8000718:	4803      	ldr	r0, [pc, #12]	@ (8000728 <stdio_exit_handler+0x14>)
 800071a:	f000 b869 	b.w	80007f0 <_fwalk_sglue>
 800071e:	bf00      	nop
 8000720:	20000000 	.word	0x20000000
 8000724:	08000b99 	.word	0x08000b99
 8000728:	20000010 	.word	0x20000010

0800072c <cleanup_stdio>:
 800072c:	6841      	ldr	r1, [r0, #4]
 800072e:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <cleanup_stdio+0x34>)
 8000730:	4299      	cmp	r1, r3
 8000732:	b510      	push	{r4, lr}
 8000734:	4604      	mov	r4, r0
 8000736:	d001      	beq.n	800073c <cleanup_stdio+0x10>
 8000738:	f000 fa2e 	bl	8000b98 <_fflush_r>
 800073c:	68a1      	ldr	r1, [r4, #8]
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <cleanup_stdio+0x38>)
 8000740:	4299      	cmp	r1, r3
 8000742:	d002      	beq.n	800074a <cleanup_stdio+0x1e>
 8000744:	4620      	mov	r0, r4
 8000746:	f000 fa27 	bl	8000b98 <_fflush_r>
 800074a:	68e1      	ldr	r1, [r4, #12]
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <cleanup_stdio+0x3c>)
 800074e:	4299      	cmp	r1, r3
 8000750:	d004      	beq.n	800075c <cleanup_stdio+0x30>
 8000752:	4620      	mov	r0, r4
 8000754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000758:	f000 ba1e 	b.w	8000b98 <_fflush_r>
 800075c:	bd10      	pop	{r4, pc}
 800075e:	bf00      	nop
 8000760:	2000007c 	.word	0x2000007c
 8000764:	200000e4 	.word	0x200000e4
 8000768:	2000014c 	.word	0x2000014c

0800076c <global_stdio_init.part.0>:
 800076c:	b510      	push	{r4, lr}
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <global_stdio_init.part.0+0x30>)
 8000770:	4c0b      	ldr	r4, [pc, #44]	@ (80007a0 <global_stdio_init.part.0+0x34>)
 8000772:	4a0c      	ldr	r2, [pc, #48]	@ (80007a4 <global_stdio_init.part.0+0x38>)
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	4620      	mov	r0, r4
 8000778:	2200      	movs	r2, #0
 800077a:	2104      	movs	r1, #4
 800077c:	f7ff ff94 	bl	80006a8 <std>
 8000780:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000784:	2201      	movs	r2, #1
 8000786:	2109      	movs	r1, #9
 8000788:	f7ff ff8e 	bl	80006a8 <std>
 800078c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000790:	2202      	movs	r2, #2
 8000792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000796:	2112      	movs	r1, #18
 8000798:	f7ff bf86 	b.w	80006a8 <std>
 800079c:	200001b4 	.word	0x200001b4
 80007a0:	2000007c 	.word	0x2000007c
 80007a4:	08000715 	.word	0x08000715

080007a8 <__sfp_lock_acquire>:
 80007a8:	4801      	ldr	r0, [pc, #4]	@ (80007b0 <__sfp_lock_acquire+0x8>)
 80007aa:	f000 b8d0 	b.w	800094e <__retarget_lock_acquire_recursive>
 80007ae:	bf00      	nop
 80007b0:	200001b9 	.word	0x200001b9

080007b4 <__sfp_lock_release>:
 80007b4:	4801      	ldr	r0, [pc, #4]	@ (80007bc <__sfp_lock_release+0x8>)
 80007b6:	f000 b8cb 	b.w	8000950 <__retarget_lock_release_recursive>
 80007ba:	bf00      	nop
 80007bc:	200001b9 	.word	0x200001b9

080007c0 <__sinit>:
 80007c0:	b510      	push	{r4, lr}
 80007c2:	4604      	mov	r4, r0
 80007c4:	f7ff fff0 	bl	80007a8 <__sfp_lock_acquire>
 80007c8:	6a23      	ldr	r3, [r4, #32]
 80007ca:	b11b      	cbz	r3, 80007d4 <__sinit+0x14>
 80007cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007d0:	f7ff bff0 	b.w	80007b4 <__sfp_lock_release>
 80007d4:	4b04      	ldr	r3, [pc, #16]	@ (80007e8 <__sinit+0x28>)
 80007d6:	6223      	str	r3, [r4, #32]
 80007d8:	4b04      	ldr	r3, [pc, #16]	@ (80007ec <__sinit+0x2c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1f5      	bne.n	80007cc <__sinit+0xc>
 80007e0:	f7ff ffc4 	bl	800076c <global_stdio_init.part.0>
 80007e4:	e7f2      	b.n	80007cc <__sinit+0xc>
 80007e6:	bf00      	nop
 80007e8:	0800072d 	.word	0x0800072d
 80007ec:	200001b4 	.word	0x200001b4

080007f0 <_fwalk_sglue>:
 80007f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007f4:	4607      	mov	r7, r0
 80007f6:	4688      	mov	r8, r1
 80007f8:	4614      	mov	r4, r2
 80007fa:	2600      	movs	r6, #0
 80007fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000800:	f1b9 0901 	subs.w	r9, r9, #1
 8000804:	d505      	bpl.n	8000812 <_fwalk_sglue+0x22>
 8000806:	6824      	ldr	r4, [r4, #0]
 8000808:	2c00      	cmp	r4, #0
 800080a:	d1f7      	bne.n	80007fc <_fwalk_sglue+0xc>
 800080c:	4630      	mov	r0, r6
 800080e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000812:	89ab      	ldrh	r3, [r5, #12]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d907      	bls.n	8000828 <_fwalk_sglue+0x38>
 8000818:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800081c:	3301      	adds	r3, #1
 800081e:	d003      	beq.n	8000828 <_fwalk_sglue+0x38>
 8000820:	4629      	mov	r1, r5
 8000822:	4638      	mov	r0, r7
 8000824:	47c0      	blx	r8
 8000826:	4306      	orrs	r6, r0
 8000828:	3568      	adds	r5, #104	@ 0x68
 800082a:	e7e9      	b.n	8000800 <_fwalk_sglue+0x10>

0800082c <_puts_r>:
 800082c:	6a03      	ldr	r3, [r0, #32]
 800082e:	b570      	push	{r4, r5, r6, lr}
 8000830:	6884      	ldr	r4, [r0, #8]
 8000832:	4605      	mov	r5, r0
 8000834:	460e      	mov	r6, r1
 8000836:	b90b      	cbnz	r3, 800083c <_puts_r+0x10>
 8000838:	f7ff ffc2 	bl	80007c0 <__sinit>
 800083c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800083e:	07db      	lsls	r3, r3, #31
 8000840:	d405      	bmi.n	800084e <_puts_r+0x22>
 8000842:	89a3      	ldrh	r3, [r4, #12]
 8000844:	0598      	lsls	r0, r3, #22
 8000846:	d402      	bmi.n	800084e <_puts_r+0x22>
 8000848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800084a:	f000 f880 	bl	800094e <__retarget_lock_acquire_recursive>
 800084e:	89a3      	ldrh	r3, [r4, #12]
 8000850:	0719      	lsls	r1, r3, #28
 8000852:	d502      	bpl.n	800085a <_puts_r+0x2e>
 8000854:	6923      	ldr	r3, [r4, #16]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d135      	bne.n	80008c6 <_puts_r+0x9a>
 800085a:	4621      	mov	r1, r4
 800085c:	4628      	mov	r0, r5
 800085e:	f000 fa51 	bl	8000d04 <__swsetup_r>
 8000862:	b380      	cbz	r0, 80008c6 <_puts_r+0x9a>
 8000864:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000868:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800086a:	07da      	lsls	r2, r3, #31
 800086c:	d405      	bmi.n	800087a <_puts_r+0x4e>
 800086e:	89a3      	ldrh	r3, [r4, #12]
 8000870:	059b      	lsls	r3, r3, #22
 8000872:	d402      	bmi.n	800087a <_puts_r+0x4e>
 8000874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000876:	f000 f86b 	bl	8000950 <__retarget_lock_release_recursive>
 800087a:	4628      	mov	r0, r5
 800087c:	bd70      	pop	{r4, r5, r6, pc}
 800087e:	2b00      	cmp	r3, #0
 8000880:	da04      	bge.n	800088c <_puts_r+0x60>
 8000882:	69a2      	ldr	r2, [r4, #24]
 8000884:	429a      	cmp	r2, r3
 8000886:	dc17      	bgt.n	80008b8 <_puts_r+0x8c>
 8000888:	290a      	cmp	r1, #10
 800088a:	d015      	beq.n	80008b8 <_puts_r+0x8c>
 800088c:	6823      	ldr	r3, [r4, #0]
 800088e:	1c5a      	adds	r2, r3, #1
 8000890:	6022      	str	r2, [r4, #0]
 8000892:	7019      	strb	r1, [r3, #0]
 8000894:	68a3      	ldr	r3, [r4, #8]
 8000896:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800089a:	3b01      	subs	r3, #1
 800089c:	60a3      	str	r3, [r4, #8]
 800089e:	2900      	cmp	r1, #0
 80008a0:	d1ed      	bne.n	800087e <_puts_r+0x52>
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	da11      	bge.n	80008ca <_puts_r+0x9e>
 80008a6:	4622      	mov	r2, r4
 80008a8:	210a      	movs	r1, #10
 80008aa:	4628      	mov	r0, r5
 80008ac:	f000 f9eb 	bl	8000c86 <__swbuf_r>
 80008b0:	3001      	adds	r0, #1
 80008b2:	d0d7      	beq.n	8000864 <_puts_r+0x38>
 80008b4:	250a      	movs	r5, #10
 80008b6:	e7d7      	b.n	8000868 <_puts_r+0x3c>
 80008b8:	4622      	mov	r2, r4
 80008ba:	4628      	mov	r0, r5
 80008bc:	f000 f9e3 	bl	8000c86 <__swbuf_r>
 80008c0:	3001      	adds	r0, #1
 80008c2:	d1e7      	bne.n	8000894 <_puts_r+0x68>
 80008c4:	e7ce      	b.n	8000864 <_puts_r+0x38>
 80008c6:	3e01      	subs	r6, #1
 80008c8:	e7e4      	b.n	8000894 <_puts_r+0x68>
 80008ca:	6823      	ldr	r3, [r4, #0]
 80008cc:	1c5a      	adds	r2, r3, #1
 80008ce:	6022      	str	r2, [r4, #0]
 80008d0:	220a      	movs	r2, #10
 80008d2:	701a      	strb	r2, [r3, #0]
 80008d4:	e7ee      	b.n	80008b4 <_puts_r+0x88>
	...

080008d8 <puts>:
 80008d8:	4b02      	ldr	r3, [pc, #8]	@ (80008e4 <puts+0xc>)
 80008da:	4601      	mov	r1, r0
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	f7ff bfa5 	b.w	800082c <_puts_r>
 80008e2:	bf00      	nop
 80008e4:	2000000c 	.word	0x2000000c

080008e8 <memset>:
 80008e8:	4402      	add	r2, r0
 80008ea:	4603      	mov	r3, r0
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d100      	bne.n	80008f2 <memset+0xa>
 80008f0:	4770      	bx	lr
 80008f2:	f803 1b01 	strb.w	r1, [r3], #1
 80008f6:	e7f9      	b.n	80008ec <memset+0x4>

080008f8 <__errno>:
 80008f8:	4b01      	ldr	r3, [pc, #4]	@ (8000900 <__errno+0x8>)
 80008fa:	6818      	ldr	r0, [r3, #0]
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	2000000c 	.word	0x2000000c

08000904 <__libc_init_array>:
 8000904:	b570      	push	{r4, r5, r6, lr}
 8000906:	4d0d      	ldr	r5, [pc, #52]	@ (800093c <__libc_init_array+0x38>)
 8000908:	4c0d      	ldr	r4, [pc, #52]	@ (8000940 <__libc_init_array+0x3c>)
 800090a:	1b64      	subs	r4, r4, r5
 800090c:	10a4      	asrs	r4, r4, #2
 800090e:	2600      	movs	r6, #0
 8000910:	42a6      	cmp	r6, r4
 8000912:	d109      	bne.n	8000928 <__libc_init_array+0x24>
 8000914:	4d0b      	ldr	r5, [pc, #44]	@ (8000944 <__libc_init_array+0x40>)
 8000916:	4c0c      	ldr	r4, [pc, #48]	@ (8000948 <__libc_init_array+0x44>)
 8000918:	f000 fb6e 	bl	8000ff8 <_init>
 800091c:	1b64      	subs	r4, r4, r5
 800091e:	10a4      	asrs	r4, r4, #2
 8000920:	2600      	movs	r6, #0
 8000922:	42a6      	cmp	r6, r4
 8000924:	d105      	bne.n	8000932 <__libc_init_array+0x2e>
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f855 3b04 	ldr.w	r3, [r5], #4
 800092c:	4798      	blx	r3
 800092e:	3601      	adds	r6, #1
 8000930:	e7ee      	b.n	8000910 <__libc_init_array+0xc>
 8000932:	f855 3b04 	ldr.w	r3, [r5], #4
 8000936:	4798      	blx	r3
 8000938:	3601      	adds	r6, #1
 800093a:	e7f2      	b.n	8000922 <__libc_init_array+0x1e>
 800093c:	08001050 	.word	0x08001050
 8000940:	08001050 	.word	0x08001050
 8000944:	08001050 	.word	0x08001050
 8000948:	08001054 	.word	0x08001054

0800094c <__retarget_lock_init_recursive>:
 800094c:	4770      	bx	lr

0800094e <__retarget_lock_acquire_recursive>:
 800094e:	4770      	bx	lr

08000950 <__retarget_lock_release_recursive>:
 8000950:	4770      	bx	lr
	...

08000954 <sbrk_aligned>:
 8000954:	b570      	push	{r4, r5, r6, lr}
 8000956:	4e0f      	ldr	r6, [pc, #60]	@ (8000994 <sbrk_aligned+0x40>)
 8000958:	460c      	mov	r4, r1
 800095a:	6831      	ldr	r1, [r6, #0]
 800095c:	4605      	mov	r5, r0
 800095e:	b911      	cbnz	r1, 8000966 <sbrk_aligned+0x12>
 8000960:	f000 fade 	bl	8000f20 <_sbrk_r>
 8000964:	6030      	str	r0, [r6, #0]
 8000966:	4621      	mov	r1, r4
 8000968:	4628      	mov	r0, r5
 800096a:	f000 fad9 	bl	8000f20 <_sbrk_r>
 800096e:	1c43      	adds	r3, r0, #1
 8000970:	d103      	bne.n	800097a <sbrk_aligned+0x26>
 8000972:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000976:	4620      	mov	r0, r4
 8000978:	bd70      	pop	{r4, r5, r6, pc}
 800097a:	1cc4      	adds	r4, r0, #3
 800097c:	f024 0403 	bic.w	r4, r4, #3
 8000980:	42a0      	cmp	r0, r4
 8000982:	d0f8      	beq.n	8000976 <sbrk_aligned+0x22>
 8000984:	1a21      	subs	r1, r4, r0
 8000986:	4628      	mov	r0, r5
 8000988:	f000 faca 	bl	8000f20 <_sbrk_r>
 800098c:	3001      	adds	r0, #1
 800098e:	d1f2      	bne.n	8000976 <sbrk_aligned+0x22>
 8000990:	e7ef      	b.n	8000972 <sbrk_aligned+0x1e>
 8000992:	bf00      	nop
 8000994:	200001bc 	.word	0x200001bc

08000998 <_malloc_r>:
 8000998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800099c:	1ccd      	adds	r5, r1, #3
 800099e:	f025 0503 	bic.w	r5, r5, #3
 80009a2:	3508      	adds	r5, #8
 80009a4:	2d0c      	cmp	r5, #12
 80009a6:	bf38      	it	cc
 80009a8:	250c      	movcc	r5, #12
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	4606      	mov	r6, r0
 80009ae:	db01      	blt.n	80009b4 <_malloc_r+0x1c>
 80009b0:	42a9      	cmp	r1, r5
 80009b2:	d904      	bls.n	80009be <_malloc_r+0x26>
 80009b4:	230c      	movs	r3, #12
 80009b6:	6033      	str	r3, [r6, #0]
 80009b8:	2000      	movs	r0, #0
 80009ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000a94 <_malloc_r+0xfc>
 80009c2:	f000 f911 	bl	8000be8 <__malloc_lock>
 80009c6:	f8d8 3000 	ldr.w	r3, [r8]
 80009ca:	461c      	mov	r4, r3
 80009cc:	bb44      	cbnz	r4, 8000a20 <_malloc_r+0x88>
 80009ce:	4629      	mov	r1, r5
 80009d0:	4630      	mov	r0, r6
 80009d2:	f7ff ffbf 	bl	8000954 <sbrk_aligned>
 80009d6:	1c43      	adds	r3, r0, #1
 80009d8:	4604      	mov	r4, r0
 80009da:	d158      	bne.n	8000a8e <_malloc_r+0xf6>
 80009dc:	f8d8 4000 	ldr.w	r4, [r8]
 80009e0:	4627      	mov	r7, r4
 80009e2:	2f00      	cmp	r7, #0
 80009e4:	d143      	bne.n	8000a6e <_malloc_r+0xd6>
 80009e6:	2c00      	cmp	r4, #0
 80009e8:	d04b      	beq.n	8000a82 <_malloc_r+0xea>
 80009ea:	6823      	ldr	r3, [r4, #0]
 80009ec:	4639      	mov	r1, r7
 80009ee:	4630      	mov	r0, r6
 80009f0:	eb04 0903 	add.w	r9, r4, r3
 80009f4:	f000 fa94 	bl	8000f20 <_sbrk_r>
 80009f8:	4581      	cmp	r9, r0
 80009fa:	d142      	bne.n	8000a82 <_malloc_r+0xea>
 80009fc:	6821      	ldr	r1, [r4, #0]
 80009fe:	1a6d      	subs	r5, r5, r1
 8000a00:	4629      	mov	r1, r5
 8000a02:	4630      	mov	r0, r6
 8000a04:	f7ff ffa6 	bl	8000954 <sbrk_aligned>
 8000a08:	3001      	adds	r0, #1
 8000a0a:	d03a      	beq.n	8000a82 <_malloc_r+0xea>
 8000a0c:	6823      	ldr	r3, [r4, #0]
 8000a0e:	442b      	add	r3, r5
 8000a10:	6023      	str	r3, [r4, #0]
 8000a12:	f8d8 3000 	ldr.w	r3, [r8]
 8000a16:	685a      	ldr	r2, [r3, #4]
 8000a18:	bb62      	cbnz	r2, 8000a74 <_malloc_r+0xdc>
 8000a1a:	f8c8 7000 	str.w	r7, [r8]
 8000a1e:	e00f      	b.n	8000a40 <_malloc_r+0xa8>
 8000a20:	6822      	ldr	r2, [r4, #0]
 8000a22:	1b52      	subs	r2, r2, r5
 8000a24:	d420      	bmi.n	8000a68 <_malloc_r+0xd0>
 8000a26:	2a0b      	cmp	r2, #11
 8000a28:	d917      	bls.n	8000a5a <_malloc_r+0xc2>
 8000a2a:	1961      	adds	r1, r4, r5
 8000a2c:	42a3      	cmp	r3, r4
 8000a2e:	6025      	str	r5, [r4, #0]
 8000a30:	bf18      	it	ne
 8000a32:	6059      	strne	r1, [r3, #4]
 8000a34:	6863      	ldr	r3, [r4, #4]
 8000a36:	bf08      	it	eq
 8000a38:	f8c8 1000 	streq.w	r1, [r8]
 8000a3c:	5162      	str	r2, [r4, r5]
 8000a3e:	604b      	str	r3, [r1, #4]
 8000a40:	4630      	mov	r0, r6
 8000a42:	f000 f8d7 	bl	8000bf4 <__malloc_unlock>
 8000a46:	f104 000b 	add.w	r0, r4, #11
 8000a4a:	1d23      	adds	r3, r4, #4
 8000a4c:	f020 0007 	bic.w	r0, r0, #7
 8000a50:	1ac2      	subs	r2, r0, r3
 8000a52:	bf1c      	itt	ne
 8000a54:	1a1b      	subne	r3, r3, r0
 8000a56:	50a3      	strne	r3, [r4, r2]
 8000a58:	e7af      	b.n	80009ba <_malloc_r+0x22>
 8000a5a:	6862      	ldr	r2, [r4, #4]
 8000a5c:	42a3      	cmp	r3, r4
 8000a5e:	bf0c      	ite	eq
 8000a60:	f8c8 2000 	streq.w	r2, [r8]
 8000a64:	605a      	strne	r2, [r3, #4]
 8000a66:	e7eb      	b.n	8000a40 <_malloc_r+0xa8>
 8000a68:	4623      	mov	r3, r4
 8000a6a:	6864      	ldr	r4, [r4, #4]
 8000a6c:	e7ae      	b.n	80009cc <_malloc_r+0x34>
 8000a6e:	463c      	mov	r4, r7
 8000a70:	687f      	ldr	r7, [r7, #4]
 8000a72:	e7b6      	b.n	80009e2 <_malloc_r+0x4a>
 8000a74:	461a      	mov	r2, r3
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	42a3      	cmp	r3, r4
 8000a7a:	d1fb      	bne.n	8000a74 <_malloc_r+0xdc>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	6053      	str	r3, [r2, #4]
 8000a80:	e7de      	b.n	8000a40 <_malloc_r+0xa8>
 8000a82:	230c      	movs	r3, #12
 8000a84:	6033      	str	r3, [r6, #0]
 8000a86:	4630      	mov	r0, r6
 8000a88:	f000 f8b4 	bl	8000bf4 <__malloc_unlock>
 8000a8c:	e794      	b.n	80009b8 <_malloc_r+0x20>
 8000a8e:	6005      	str	r5, [r0, #0]
 8000a90:	e7d6      	b.n	8000a40 <_malloc_r+0xa8>
 8000a92:	bf00      	nop
 8000a94:	200001c0 	.word	0x200001c0

08000a98 <__sflush_r>:
 8000a98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a9e:	0716      	lsls	r6, r2, #28
 8000aa0:	4605      	mov	r5, r0
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	d454      	bmi.n	8000b50 <__sflush_r+0xb8>
 8000aa6:	684b      	ldr	r3, [r1, #4]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	dc02      	bgt.n	8000ab2 <__sflush_r+0x1a>
 8000aac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	dd48      	ble.n	8000b44 <__sflush_r+0xac>
 8000ab2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000ab4:	2e00      	cmp	r6, #0
 8000ab6:	d045      	beq.n	8000b44 <__sflush_r+0xac>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000abe:	682f      	ldr	r7, [r5, #0]
 8000ac0:	6a21      	ldr	r1, [r4, #32]
 8000ac2:	602b      	str	r3, [r5, #0]
 8000ac4:	d030      	beq.n	8000b28 <__sflush_r+0x90>
 8000ac6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000ac8:	89a3      	ldrh	r3, [r4, #12]
 8000aca:	0759      	lsls	r1, r3, #29
 8000acc:	d505      	bpl.n	8000ada <__sflush_r+0x42>
 8000ace:	6863      	ldr	r3, [r4, #4]
 8000ad0:	1ad2      	subs	r2, r2, r3
 8000ad2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000ad4:	b10b      	cbz	r3, 8000ada <__sflush_r+0x42>
 8000ad6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000ad8:	1ad2      	subs	r2, r2, r3
 8000ada:	2300      	movs	r3, #0
 8000adc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000ade:	6a21      	ldr	r1, [r4, #32]
 8000ae0:	4628      	mov	r0, r5
 8000ae2:	47b0      	blx	r6
 8000ae4:	1c43      	adds	r3, r0, #1
 8000ae6:	89a3      	ldrh	r3, [r4, #12]
 8000ae8:	d106      	bne.n	8000af8 <__sflush_r+0x60>
 8000aea:	6829      	ldr	r1, [r5, #0]
 8000aec:	291d      	cmp	r1, #29
 8000aee:	d82b      	bhi.n	8000b48 <__sflush_r+0xb0>
 8000af0:	4a28      	ldr	r2, [pc, #160]	@ (8000b94 <__sflush_r+0xfc>)
 8000af2:	410a      	asrs	r2, r1
 8000af4:	07d6      	lsls	r6, r2, #31
 8000af6:	d427      	bmi.n	8000b48 <__sflush_r+0xb0>
 8000af8:	2200      	movs	r2, #0
 8000afa:	6062      	str	r2, [r4, #4]
 8000afc:	04d9      	lsls	r1, r3, #19
 8000afe:	6922      	ldr	r2, [r4, #16]
 8000b00:	6022      	str	r2, [r4, #0]
 8000b02:	d504      	bpl.n	8000b0e <__sflush_r+0x76>
 8000b04:	1c42      	adds	r2, r0, #1
 8000b06:	d101      	bne.n	8000b0c <__sflush_r+0x74>
 8000b08:	682b      	ldr	r3, [r5, #0]
 8000b0a:	b903      	cbnz	r3, 8000b0e <__sflush_r+0x76>
 8000b0c:	6560      	str	r0, [r4, #84]	@ 0x54
 8000b0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000b10:	602f      	str	r7, [r5, #0]
 8000b12:	b1b9      	cbz	r1, 8000b44 <__sflush_r+0xac>
 8000b14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000b18:	4299      	cmp	r1, r3
 8000b1a:	d002      	beq.n	8000b22 <__sflush_r+0x8a>
 8000b1c:	4628      	mov	r0, r5
 8000b1e:	f000 fa21 	bl	8000f64 <_free_r>
 8000b22:	2300      	movs	r3, #0
 8000b24:	6363      	str	r3, [r4, #52]	@ 0x34
 8000b26:	e00d      	b.n	8000b44 <__sflush_r+0xac>
 8000b28:	2301      	movs	r3, #1
 8000b2a:	4628      	mov	r0, r5
 8000b2c:	47b0      	blx	r6
 8000b2e:	4602      	mov	r2, r0
 8000b30:	1c50      	adds	r0, r2, #1
 8000b32:	d1c9      	bne.n	8000ac8 <__sflush_r+0x30>
 8000b34:	682b      	ldr	r3, [r5, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d0c6      	beq.n	8000ac8 <__sflush_r+0x30>
 8000b3a:	2b1d      	cmp	r3, #29
 8000b3c:	d001      	beq.n	8000b42 <__sflush_r+0xaa>
 8000b3e:	2b16      	cmp	r3, #22
 8000b40:	d11d      	bne.n	8000b7e <__sflush_r+0xe6>
 8000b42:	602f      	str	r7, [r5, #0]
 8000b44:	2000      	movs	r0, #0
 8000b46:	e021      	b.n	8000b8c <__sflush_r+0xf4>
 8000b48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b4c:	b21b      	sxth	r3, r3
 8000b4e:	e01a      	b.n	8000b86 <__sflush_r+0xee>
 8000b50:	690f      	ldr	r7, [r1, #16]
 8000b52:	2f00      	cmp	r7, #0
 8000b54:	d0f6      	beq.n	8000b44 <__sflush_r+0xac>
 8000b56:	0793      	lsls	r3, r2, #30
 8000b58:	680e      	ldr	r6, [r1, #0]
 8000b5a:	bf08      	it	eq
 8000b5c:	694b      	ldreq	r3, [r1, #20]
 8000b5e:	600f      	str	r7, [r1, #0]
 8000b60:	bf18      	it	ne
 8000b62:	2300      	movne	r3, #0
 8000b64:	1bf6      	subs	r6, r6, r7
 8000b66:	608b      	str	r3, [r1, #8]
 8000b68:	2e00      	cmp	r6, #0
 8000b6a:	ddeb      	ble.n	8000b44 <__sflush_r+0xac>
 8000b6c:	6a21      	ldr	r1, [r4, #32]
 8000b6e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000b72:	4633      	mov	r3, r6
 8000b74:	463a      	mov	r2, r7
 8000b76:	4628      	mov	r0, r5
 8000b78:	47e0      	blx	ip
 8000b7a:	2800      	cmp	r0, #0
 8000b7c:	dc07      	bgt.n	8000b8e <__sflush_r+0xf6>
 8000b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b86:	81a3      	strh	r3, [r4, #12]
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b8e:	4407      	add	r7, r0
 8000b90:	1a36      	subs	r6, r6, r0
 8000b92:	e7e9      	b.n	8000b68 <__sflush_r+0xd0>
 8000b94:	dfbffffe 	.word	0xdfbffffe

08000b98 <_fflush_r>:
 8000b98:	b538      	push	{r3, r4, r5, lr}
 8000b9a:	690b      	ldr	r3, [r1, #16]
 8000b9c:	4605      	mov	r5, r0
 8000b9e:	460c      	mov	r4, r1
 8000ba0:	b913      	cbnz	r3, 8000ba8 <_fflush_r+0x10>
 8000ba2:	2500      	movs	r5, #0
 8000ba4:	4628      	mov	r0, r5
 8000ba6:	bd38      	pop	{r3, r4, r5, pc}
 8000ba8:	b118      	cbz	r0, 8000bb2 <_fflush_r+0x1a>
 8000baa:	6a03      	ldr	r3, [r0, #32]
 8000bac:	b90b      	cbnz	r3, 8000bb2 <_fflush_r+0x1a>
 8000bae:	f7ff fe07 	bl	80007c0 <__sinit>
 8000bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0f3      	beq.n	8000ba2 <_fflush_r+0xa>
 8000bba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000bbc:	07d0      	lsls	r0, r2, #31
 8000bbe:	d404      	bmi.n	8000bca <_fflush_r+0x32>
 8000bc0:	0599      	lsls	r1, r3, #22
 8000bc2:	d402      	bmi.n	8000bca <_fflush_r+0x32>
 8000bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000bc6:	f7ff fec2 	bl	800094e <__retarget_lock_acquire_recursive>
 8000bca:	4628      	mov	r0, r5
 8000bcc:	4621      	mov	r1, r4
 8000bce:	f7ff ff63 	bl	8000a98 <__sflush_r>
 8000bd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000bd4:	07da      	lsls	r2, r3, #31
 8000bd6:	4605      	mov	r5, r0
 8000bd8:	d4e4      	bmi.n	8000ba4 <_fflush_r+0xc>
 8000bda:	89a3      	ldrh	r3, [r4, #12]
 8000bdc:	059b      	lsls	r3, r3, #22
 8000bde:	d4e1      	bmi.n	8000ba4 <_fflush_r+0xc>
 8000be0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000be2:	f7ff feb5 	bl	8000950 <__retarget_lock_release_recursive>
 8000be6:	e7dd      	b.n	8000ba4 <_fflush_r+0xc>

08000be8 <__malloc_lock>:
 8000be8:	4801      	ldr	r0, [pc, #4]	@ (8000bf0 <__malloc_lock+0x8>)
 8000bea:	f7ff beb0 	b.w	800094e <__retarget_lock_acquire_recursive>
 8000bee:	bf00      	nop
 8000bf0:	200001b8 	.word	0x200001b8

08000bf4 <__malloc_unlock>:
 8000bf4:	4801      	ldr	r0, [pc, #4]	@ (8000bfc <__malloc_unlock+0x8>)
 8000bf6:	f7ff beab 	b.w	8000950 <__retarget_lock_release_recursive>
 8000bfa:	bf00      	nop
 8000bfc:	200001b8 	.word	0x200001b8

08000c00 <__sread>:
 8000c00:	b510      	push	{r4, lr}
 8000c02:	460c      	mov	r4, r1
 8000c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c08:	f000 f978 	bl	8000efc <_read_r>
 8000c0c:	2800      	cmp	r0, #0
 8000c0e:	bfab      	itete	ge
 8000c10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000c12:	89a3      	ldrhlt	r3, [r4, #12]
 8000c14:	181b      	addge	r3, r3, r0
 8000c16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000c1a:	bfac      	ite	ge
 8000c1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000c1e:	81a3      	strhlt	r3, [r4, #12]
 8000c20:	bd10      	pop	{r4, pc}

08000c22 <__swrite>:
 8000c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c26:	461f      	mov	r7, r3
 8000c28:	898b      	ldrh	r3, [r1, #12]
 8000c2a:	05db      	lsls	r3, r3, #23
 8000c2c:	4605      	mov	r5, r0
 8000c2e:	460c      	mov	r4, r1
 8000c30:	4616      	mov	r6, r2
 8000c32:	d505      	bpl.n	8000c40 <__swrite+0x1e>
 8000c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c38:	2302      	movs	r3, #2
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f000 f94c 	bl	8000ed8 <_lseek_r>
 8000c40:	89a3      	ldrh	r3, [r4, #12]
 8000c42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c4a:	81a3      	strh	r3, [r4, #12]
 8000c4c:	4632      	mov	r2, r6
 8000c4e:	463b      	mov	r3, r7
 8000c50:	4628      	mov	r0, r5
 8000c52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000c56:	f000 b973 	b.w	8000f40 <_write_r>

08000c5a <__sseek>:
 8000c5a:	b510      	push	{r4, lr}
 8000c5c:	460c      	mov	r4, r1
 8000c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c62:	f000 f939 	bl	8000ed8 <_lseek_r>
 8000c66:	1c43      	adds	r3, r0, #1
 8000c68:	89a3      	ldrh	r3, [r4, #12]
 8000c6a:	bf15      	itete	ne
 8000c6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000c6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000c72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000c76:	81a3      	strheq	r3, [r4, #12]
 8000c78:	bf18      	it	ne
 8000c7a:	81a3      	strhne	r3, [r4, #12]
 8000c7c:	bd10      	pop	{r4, pc}

08000c7e <__sclose>:
 8000c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c82:	f000 b8f7 	b.w	8000e74 <_close_r>

08000c86 <__swbuf_r>:
 8000c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c88:	460e      	mov	r6, r1
 8000c8a:	4614      	mov	r4, r2
 8000c8c:	4605      	mov	r5, r0
 8000c8e:	b118      	cbz	r0, 8000c98 <__swbuf_r+0x12>
 8000c90:	6a03      	ldr	r3, [r0, #32]
 8000c92:	b90b      	cbnz	r3, 8000c98 <__swbuf_r+0x12>
 8000c94:	f7ff fd94 	bl	80007c0 <__sinit>
 8000c98:	69a3      	ldr	r3, [r4, #24]
 8000c9a:	60a3      	str	r3, [r4, #8]
 8000c9c:	89a3      	ldrh	r3, [r4, #12]
 8000c9e:	071a      	lsls	r2, r3, #28
 8000ca0:	d501      	bpl.n	8000ca6 <__swbuf_r+0x20>
 8000ca2:	6923      	ldr	r3, [r4, #16]
 8000ca4:	b943      	cbnz	r3, 8000cb8 <__swbuf_r+0x32>
 8000ca6:	4621      	mov	r1, r4
 8000ca8:	4628      	mov	r0, r5
 8000caa:	f000 f82b 	bl	8000d04 <__swsetup_r>
 8000cae:	b118      	cbz	r0, 8000cb8 <__swbuf_r+0x32>
 8000cb0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000cb4:	4638      	mov	r0, r7
 8000cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cb8:	6823      	ldr	r3, [r4, #0]
 8000cba:	6922      	ldr	r2, [r4, #16]
 8000cbc:	1a98      	subs	r0, r3, r2
 8000cbe:	6963      	ldr	r3, [r4, #20]
 8000cc0:	b2f6      	uxtb	r6, r6
 8000cc2:	4283      	cmp	r3, r0
 8000cc4:	4637      	mov	r7, r6
 8000cc6:	dc05      	bgt.n	8000cd4 <__swbuf_r+0x4e>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	4628      	mov	r0, r5
 8000ccc:	f7ff ff64 	bl	8000b98 <_fflush_r>
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	d1ed      	bne.n	8000cb0 <__swbuf_r+0x2a>
 8000cd4:	68a3      	ldr	r3, [r4, #8]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	60a3      	str	r3, [r4, #8]
 8000cda:	6823      	ldr	r3, [r4, #0]
 8000cdc:	1c5a      	adds	r2, r3, #1
 8000cde:	6022      	str	r2, [r4, #0]
 8000ce0:	701e      	strb	r6, [r3, #0]
 8000ce2:	6962      	ldr	r2, [r4, #20]
 8000ce4:	1c43      	adds	r3, r0, #1
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d004      	beq.n	8000cf4 <__swbuf_r+0x6e>
 8000cea:	89a3      	ldrh	r3, [r4, #12]
 8000cec:	07db      	lsls	r3, r3, #31
 8000cee:	d5e1      	bpl.n	8000cb4 <__swbuf_r+0x2e>
 8000cf0:	2e0a      	cmp	r6, #10
 8000cf2:	d1df      	bne.n	8000cb4 <__swbuf_r+0x2e>
 8000cf4:	4621      	mov	r1, r4
 8000cf6:	4628      	mov	r0, r5
 8000cf8:	f7ff ff4e 	bl	8000b98 <_fflush_r>
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	d0d9      	beq.n	8000cb4 <__swbuf_r+0x2e>
 8000d00:	e7d6      	b.n	8000cb0 <__swbuf_r+0x2a>
	...

08000d04 <__swsetup_r>:
 8000d04:	b538      	push	{r3, r4, r5, lr}
 8000d06:	4b29      	ldr	r3, [pc, #164]	@ (8000dac <__swsetup_r+0xa8>)
 8000d08:	4605      	mov	r5, r0
 8000d0a:	6818      	ldr	r0, [r3, #0]
 8000d0c:	460c      	mov	r4, r1
 8000d0e:	b118      	cbz	r0, 8000d18 <__swsetup_r+0x14>
 8000d10:	6a03      	ldr	r3, [r0, #32]
 8000d12:	b90b      	cbnz	r3, 8000d18 <__swsetup_r+0x14>
 8000d14:	f7ff fd54 	bl	80007c0 <__sinit>
 8000d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d1c:	0719      	lsls	r1, r3, #28
 8000d1e:	d422      	bmi.n	8000d66 <__swsetup_r+0x62>
 8000d20:	06da      	lsls	r2, r3, #27
 8000d22:	d407      	bmi.n	8000d34 <__swsetup_r+0x30>
 8000d24:	2209      	movs	r2, #9
 8000d26:	602a      	str	r2, [r5, #0]
 8000d28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d2c:	81a3      	strh	r3, [r4, #12]
 8000d2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d32:	e033      	b.n	8000d9c <__swsetup_r+0x98>
 8000d34:	0758      	lsls	r0, r3, #29
 8000d36:	d512      	bpl.n	8000d5e <__swsetup_r+0x5a>
 8000d38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000d3a:	b141      	cbz	r1, 8000d4e <__swsetup_r+0x4a>
 8000d3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d002      	beq.n	8000d4a <__swsetup_r+0x46>
 8000d44:	4628      	mov	r0, r5
 8000d46:	f000 f90d 	bl	8000f64 <_free_r>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8000d4e:	89a3      	ldrh	r3, [r4, #12]
 8000d50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000d54:	81a3      	strh	r3, [r4, #12]
 8000d56:	2300      	movs	r3, #0
 8000d58:	6063      	str	r3, [r4, #4]
 8000d5a:	6923      	ldr	r3, [r4, #16]
 8000d5c:	6023      	str	r3, [r4, #0]
 8000d5e:	89a3      	ldrh	r3, [r4, #12]
 8000d60:	f043 0308 	orr.w	r3, r3, #8
 8000d64:	81a3      	strh	r3, [r4, #12]
 8000d66:	6923      	ldr	r3, [r4, #16]
 8000d68:	b94b      	cbnz	r3, 8000d7e <__swsetup_r+0x7a>
 8000d6a:	89a3      	ldrh	r3, [r4, #12]
 8000d6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d74:	d003      	beq.n	8000d7e <__swsetup_r+0x7a>
 8000d76:	4621      	mov	r1, r4
 8000d78:	4628      	mov	r0, r5
 8000d7a:	f000 f83f 	bl	8000dfc <__smakebuf_r>
 8000d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d82:	f013 0201 	ands.w	r2, r3, #1
 8000d86:	d00a      	beq.n	8000d9e <__swsetup_r+0x9a>
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60a2      	str	r2, [r4, #8]
 8000d8c:	6962      	ldr	r2, [r4, #20]
 8000d8e:	4252      	negs	r2, r2
 8000d90:	61a2      	str	r2, [r4, #24]
 8000d92:	6922      	ldr	r2, [r4, #16]
 8000d94:	b942      	cbnz	r2, 8000da8 <__swsetup_r+0xa4>
 8000d96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000d9a:	d1c5      	bne.n	8000d28 <__swsetup_r+0x24>
 8000d9c:	bd38      	pop	{r3, r4, r5, pc}
 8000d9e:	0799      	lsls	r1, r3, #30
 8000da0:	bf58      	it	pl
 8000da2:	6962      	ldrpl	r2, [r4, #20]
 8000da4:	60a2      	str	r2, [r4, #8]
 8000da6:	e7f4      	b.n	8000d92 <__swsetup_r+0x8e>
 8000da8:	2000      	movs	r0, #0
 8000daa:	e7f7      	b.n	8000d9c <__swsetup_r+0x98>
 8000dac:	2000000c 	.word	0x2000000c

08000db0 <__swhatbuf_r>:
 8000db0:	b570      	push	{r4, r5, r6, lr}
 8000db2:	460c      	mov	r4, r1
 8000db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000db8:	2900      	cmp	r1, #0
 8000dba:	b096      	sub	sp, #88	@ 0x58
 8000dbc:	4615      	mov	r5, r2
 8000dbe:	461e      	mov	r6, r3
 8000dc0:	da0d      	bge.n	8000dde <__swhatbuf_r+0x2e>
 8000dc2:	89a3      	ldrh	r3, [r4, #12]
 8000dc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000dc8:	f04f 0100 	mov.w	r1, #0
 8000dcc:	bf14      	ite	ne
 8000dce:	2340      	movne	r3, #64	@ 0x40
 8000dd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	6031      	str	r1, [r6, #0]
 8000dd8:	602b      	str	r3, [r5, #0]
 8000dda:	b016      	add	sp, #88	@ 0x58
 8000ddc:	bd70      	pop	{r4, r5, r6, pc}
 8000dde:	466a      	mov	r2, sp
 8000de0:	f000 f858 	bl	8000e94 <_fstat_r>
 8000de4:	2800      	cmp	r0, #0
 8000de6:	dbec      	blt.n	8000dc2 <__swhatbuf_r+0x12>
 8000de8:	9901      	ldr	r1, [sp, #4]
 8000dea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000dee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000df2:	4259      	negs	r1, r3
 8000df4:	4159      	adcs	r1, r3
 8000df6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dfa:	e7eb      	b.n	8000dd4 <__swhatbuf_r+0x24>

08000dfc <__smakebuf_r>:
 8000dfc:	898b      	ldrh	r3, [r1, #12]
 8000dfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000e00:	079d      	lsls	r5, r3, #30
 8000e02:	4606      	mov	r6, r0
 8000e04:	460c      	mov	r4, r1
 8000e06:	d507      	bpl.n	8000e18 <__smakebuf_r+0x1c>
 8000e08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000e0c:	6023      	str	r3, [r4, #0]
 8000e0e:	6123      	str	r3, [r4, #16]
 8000e10:	2301      	movs	r3, #1
 8000e12:	6163      	str	r3, [r4, #20]
 8000e14:	b003      	add	sp, #12
 8000e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e18:	ab01      	add	r3, sp, #4
 8000e1a:	466a      	mov	r2, sp
 8000e1c:	f7ff ffc8 	bl	8000db0 <__swhatbuf_r>
 8000e20:	9f00      	ldr	r7, [sp, #0]
 8000e22:	4605      	mov	r5, r0
 8000e24:	4639      	mov	r1, r7
 8000e26:	4630      	mov	r0, r6
 8000e28:	f7ff fdb6 	bl	8000998 <_malloc_r>
 8000e2c:	b948      	cbnz	r0, 8000e42 <__smakebuf_r+0x46>
 8000e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e32:	059a      	lsls	r2, r3, #22
 8000e34:	d4ee      	bmi.n	8000e14 <__smakebuf_r+0x18>
 8000e36:	f023 0303 	bic.w	r3, r3, #3
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
 8000e3e:	81a3      	strh	r3, [r4, #12]
 8000e40:	e7e2      	b.n	8000e08 <__smakebuf_r+0xc>
 8000e42:	89a3      	ldrh	r3, [r4, #12]
 8000e44:	6020      	str	r0, [r4, #0]
 8000e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e4a:	81a3      	strh	r3, [r4, #12]
 8000e4c:	9b01      	ldr	r3, [sp, #4]
 8000e4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000e52:	b15b      	cbz	r3, 8000e6c <__smakebuf_r+0x70>
 8000e54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e58:	4630      	mov	r0, r6
 8000e5a:	f000 f82d 	bl	8000eb8 <_isatty_r>
 8000e5e:	b128      	cbz	r0, 8000e6c <__smakebuf_r+0x70>
 8000e60:	89a3      	ldrh	r3, [r4, #12]
 8000e62:	f023 0303 	bic.w	r3, r3, #3
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	81a3      	strh	r3, [r4, #12]
 8000e6c:	89a3      	ldrh	r3, [r4, #12]
 8000e6e:	431d      	orrs	r5, r3
 8000e70:	81a5      	strh	r5, [r4, #12]
 8000e72:	e7cf      	b.n	8000e14 <__smakebuf_r+0x18>

08000e74 <_close_r>:
 8000e74:	b538      	push	{r3, r4, r5, lr}
 8000e76:	4d06      	ldr	r5, [pc, #24]	@ (8000e90 <_close_r+0x1c>)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	4604      	mov	r4, r0
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	602b      	str	r3, [r5, #0]
 8000e80:	f7ff fb81 	bl	8000586 <_close>
 8000e84:	1c43      	adds	r3, r0, #1
 8000e86:	d102      	bne.n	8000e8e <_close_r+0x1a>
 8000e88:	682b      	ldr	r3, [r5, #0]
 8000e8a:	b103      	cbz	r3, 8000e8e <_close_r+0x1a>
 8000e8c:	6023      	str	r3, [r4, #0]
 8000e8e:	bd38      	pop	{r3, r4, r5, pc}
 8000e90:	200001c4 	.word	0x200001c4

08000e94 <_fstat_r>:
 8000e94:	b538      	push	{r3, r4, r5, lr}
 8000e96:	4d07      	ldr	r5, [pc, #28]	@ (8000eb4 <_fstat_r+0x20>)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	602b      	str	r3, [r5, #0]
 8000ea2:	f7ff fb7b 	bl	800059c <_fstat>
 8000ea6:	1c43      	adds	r3, r0, #1
 8000ea8:	d102      	bne.n	8000eb0 <_fstat_r+0x1c>
 8000eaa:	682b      	ldr	r3, [r5, #0]
 8000eac:	b103      	cbz	r3, 8000eb0 <_fstat_r+0x1c>
 8000eae:	6023      	str	r3, [r4, #0]
 8000eb0:	bd38      	pop	{r3, r4, r5, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200001c4 	.word	0x200001c4

08000eb8 <_isatty_r>:
 8000eb8:	b538      	push	{r3, r4, r5, lr}
 8000eba:	4d06      	ldr	r5, [pc, #24]	@ (8000ed4 <_isatty_r+0x1c>)
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	602b      	str	r3, [r5, #0]
 8000ec4:	f7ff fb79 	bl	80005ba <_isatty>
 8000ec8:	1c43      	adds	r3, r0, #1
 8000eca:	d102      	bne.n	8000ed2 <_isatty_r+0x1a>
 8000ecc:	682b      	ldr	r3, [r5, #0]
 8000ece:	b103      	cbz	r3, 8000ed2 <_isatty_r+0x1a>
 8000ed0:	6023      	str	r3, [r4, #0]
 8000ed2:	bd38      	pop	{r3, r4, r5, pc}
 8000ed4:	200001c4 	.word	0x200001c4

08000ed8 <_lseek_r>:
 8000ed8:	b538      	push	{r3, r4, r5, lr}
 8000eda:	4d07      	ldr	r5, [pc, #28]	@ (8000ef8 <_lseek_r+0x20>)
 8000edc:	4604      	mov	r4, r0
 8000ede:	4608      	mov	r0, r1
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	602a      	str	r2, [r5, #0]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	f7ff fb71 	bl	80005ce <_lseek>
 8000eec:	1c43      	adds	r3, r0, #1
 8000eee:	d102      	bne.n	8000ef6 <_lseek_r+0x1e>
 8000ef0:	682b      	ldr	r3, [r5, #0]
 8000ef2:	b103      	cbz	r3, 8000ef6 <_lseek_r+0x1e>
 8000ef4:	6023      	str	r3, [r4, #0]
 8000ef6:	bd38      	pop	{r3, r4, r5, pc}
 8000ef8:	200001c4 	.word	0x200001c4

08000efc <_read_r>:
 8000efc:	b538      	push	{r3, r4, r5, lr}
 8000efe:	4d07      	ldr	r5, [pc, #28]	@ (8000f1c <_read_r+0x20>)
 8000f00:	4604      	mov	r4, r0
 8000f02:	4608      	mov	r0, r1
 8000f04:	4611      	mov	r1, r2
 8000f06:	2200      	movs	r2, #0
 8000f08:	602a      	str	r2, [r5, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	f7ff fb02 	bl	8000514 <_read>
 8000f10:	1c43      	adds	r3, r0, #1
 8000f12:	d102      	bne.n	8000f1a <_read_r+0x1e>
 8000f14:	682b      	ldr	r3, [r5, #0]
 8000f16:	b103      	cbz	r3, 8000f1a <_read_r+0x1e>
 8000f18:	6023      	str	r3, [r4, #0]
 8000f1a:	bd38      	pop	{r3, r4, r5, pc}
 8000f1c:	200001c4 	.word	0x200001c4

08000f20 <_sbrk_r>:
 8000f20:	b538      	push	{r3, r4, r5, lr}
 8000f22:	4d06      	ldr	r5, [pc, #24]	@ (8000f3c <_sbrk_r+0x1c>)
 8000f24:	2300      	movs	r3, #0
 8000f26:	4604      	mov	r4, r0
 8000f28:	4608      	mov	r0, r1
 8000f2a:	602b      	str	r3, [r5, #0]
 8000f2c:	f7ff fb5c 	bl	80005e8 <_sbrk>
 8000f30:	1c43      	adds	r3, r0, #1
 8000f32:	d102      	bne.n	8000f3a <_sbrk_r+0x1a>
 8000f34:	682b      	ldr	r3, [r5, #0]
 8000f36:	b103      	cbz	r3, 8000f3a <_sbrk_r+0x1a>
 8000f38:	6023      	str	r3, [r4, #0]
 8000f3a:	bd38      	pop	{r3, r4, r5, pc}
 8000f3c:	200001c4 	.word	0x200001c4

08000f40 <_write_r>:
 8000f40:	b538      	push	{r3, r4, r5, lr}
 8000f42:	4d07      	ldr	r5, [pc, #28]	@ (8000f60 <_write_r+0x20>)
 8000f44:	4604      	mov	r4, r0
 8000f46:	4608      	mov	r0, r1
 8000f48:	4611      	mov	r1, r2
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	602a      	str	r2, [r5, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	f7ff fafd 	bl	800054e <_write>
 8000f54:	1c43      	adds	r3, r0, #1
 8000f56:	d102      	bne.n	8000f5e <_write_r+0x1e>
 8000f58:	682b      	ldr	r3, [r5, #0]
 8000f5a:	b103      	cbz	r3, 8000f5e <_write_r+0x1e>
 8000f5c:	6023      	str	r3, [r4, #0]
 8000f5e:	bd38      	pop	{r3, r4, r5, pc}
 8000f60:	200001c4 	.word	0x200001c4

08000f64 <_free_r>:
 8000f64:	b538      	push	{r3, r4, r5, lr}
 8000f66:	4605      	mov	r5, r0
 8000f68:	2900      	cmp	r1, #0
 8000f6a:	d041      	beq.n	8000ff0 <_free_r+0x8c>
 8000f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f70:	1f0c      	subs	r4, r1, #4
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	bfb8      	it	lt
 8000f76:	18e4      	addlt	r4, r4, r3
 8000f78:	f7ff fe36 	bl	8000be8 <__malloc_lock>
 8000f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ff4 <_free_r+0x90>)
 8000f7e:	6813      	ldr	r3, [r2, #0]
 8000f80:	b933      	cbnz	r3, 8000f90 <_free_r+0x2c>
 8000f82:	6063      	str	r3, [r4, #4]
 8000f84:	6014      	str	r4, [r2, #0]
 8000f86:	4628      	mov	r0, r5
 8000f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f8c:	f7ff be32 	b.w	8000bf4 <__malloc_unlock>
 8000f90:	42a3      	cmp	r3, r4
 8000f92:	d908      	bls.n	8000fa6 <_free_r+0x42>
 8000f94:	6820      	ldr	r0, [r4, #0]
 8000f96:	1821      	adds	r1, r4, r0
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	bf01      	itttt	eq
 8000f9c:	6819      	ldreq	r1, [r3, #0]
 8000f9e:	685b      	ldreq	r3, [r3, #4]
 8000fa0:	1809      	addeq	r1, r1, r0
 8000fa2:	6021      	streq	r1, [r4, #0]
 8000fa4:	e7ed      	b.n	8000f82 <_free_r+0x1e>
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	b10b      	cbz	r3, 8000fb0 <_free_r+0x4c>
 8000fac:	42a3      	cmp	r3, r4
 8000fae:	d9fa      	bls.n	8000fa6 <_free_r+0x42>
 8000fb0:	6811      	ldr	r1, [r2, #0]
 8000fb2:	1850      	adds	r0, r2, r1
 8000fb4:	42a0      	cmp	r0, r4
 8000fb6:	d10b      	bne.n	8000fd0 <_free_r+0x6c>
 8000fb8:	6820      	ldr	r0, [r4, #0]
 8000fba:	4401      	add	r1, r0
 8000fbc:	1850      	adds	r0, r2, r1
 8000fbe:	4283      	cmp	r3, r0
 8000fc0:	6011      	str	r1, [r2, #0]
 8000fc2:	d1e0      	bne.n	8000f86 <_free_r+0x22>
 8000fc4:	6818      	ldr	r0, [r3, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	6053      	str	r3, [r2, #4]
 8000fca:	4408      	add	r0, r1
 8000fcc:	6010      	str	r0, [r2, #0]
 8000fce:	e7da      	b.n	8000f86 <_free_r+0x22>
 8000fd0:	d902      	bls.n	8000fd8 <_free_r+0x74>
 8000fd2:	230c      	movs	r3, #12
 8000fd4:	602b      	str	r3, [r5, #0]
 8000fd6:	e7d6      	b.n	8000f86 <_free_r+0x22>
 8000fd8:	6820      	ldr	r0, [r4, #0]
 8000fda:	1821      	adds	r1, r4, r0
 8000fdc:	428b      	cmp	r3, r1
 8000fde:	bf04      	itt	eq
 8000fe0:	6819      	ldreq	r1, [r3, #0]
 8000fe2:	685b      	ldreq	r3, [r3, #4]
 8000fe4:	6063      	str	r3, [r4, #4]
 8000fe6:	bf04      	itt	eq
 8000fe8:	1809      	addeq	r1, r1, r0
 8000fea:	6021      	streq	r1, [r4, #0]
 8000fec:	6054      	str	r4, [r2, #4]
 8000fee:	e7ca      	b.n	8000f86 <_free_r+0x22>
 8000ff0:	bd38      	pop	{r3, r4, r5, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200001c0 	.word	0x200001c0

08000ff8 <_init>:
 8000ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ffa:	bf00      	nop
 8000ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ffe:	bc08      	pop	{r3}
 8001000:	469e      	mov	lr, r3
 8001002:	4770      	bx	lr

08001004 <_fini>:
 8001004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001006:	bf00      	nop
 8001008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800100a:	bc08      	pop	{r3}
 800100c:	469e      	mov	lr, r3
 800100e:	4770      	bx	lr
