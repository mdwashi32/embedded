
svc_math.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000139c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800152c  0800152c  0000252c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015e4  080015e4  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080015e4  080015e4  000025e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080015ec  080015ec  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015ec  080015ec  000025ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080015f0  080015f0  000025f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080015f4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ae0  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003d2  00000000  00000000  00003b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000148  00000000  00000000  00003f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000e3  00000000  00000000  00004088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d38  00000000  00000000  0000416b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001415  00000000  00000000  00006ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000998d  00000000  00000000  000082b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00011c45  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c1c  00000000  00000000  00011c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  000128a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001514 	.word	0x08001514

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08001514 	.word	0x08001514

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <add_numbers>:
#include<stdio.h>

void SVC_Handle_c(uint32_t *pBaseStackFrame);

int32_t add_numbers(int32_t x , int32_t y )
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
    int32_t res;
    __asm volatile("SVC #36");
 800027a:	df24      	svc	36	@ 0x24
    __asm volatile ("MOV %0,R0": "=r"(res) ::);
 800027c:	4603      	mov	r3, r0
 800027e:	60fb      	str	r3, [r7, #12]
    return res;
 8000280:	68fb      	ldr	r3, [r7, #12]

}
 8000282:	4618      	mov	r0, r3
 8000284:	3714      	adds	r7, #20
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr

0800028e <sub_numbers>:


int32_t sub_numbers(int32_t x , int32_t y )
{
 800028e:	b480      	push	{r7}
 8000290:	b085      	sub	sp, #20
 8000292:	af00      	add	r7, sp, #0
 8000294:	6078      	str	r0, [r7, #4]
 8000296:	6039      	str	r1, [r7, #0]
	 int32_t res;
	 __asm volatile("SVC #37");
 8000298:	df25      	svc	37	@ 0x25
	 __asm volatile ("MOV %0,R0": "=r"(res) ::);
 800029a:	4603      	mov	r3, r0
 800029c:	60fb      	str	r3, [r7, #12]
	 return res;
 800029e:	68fb      	ldr	r3, [r7, #12]
   //TODO

}
 80002a0:	4618      	mov	r0, r3
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr

080002ac <mul_numbers>:

int32_t mul_numbers(int32_t x , int32_t y )
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	6039      	str	r1, [r7, #0]
	 int32_t res;
	 __asm volatile("SVC #38");
 80002b6:	df26      	svc	38	@ 0x26
	 __asm volatile ("MOV %0,R0": "=r"(res) ::);
 80002b8:	4603      	mov	r3, r0
 80002ba:	60fb      	str	r3, [r7, #12]
	 return res;
 80002bc:	68fb      	ldr	r3, [r7, #12]

    //TODO
}
 80002be:	4618      	mov	r0, r3
 80002c0:	3714      	adds	r7, #20
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr

080002ca <div_numbers>:

int32_t div_numbers(int32_t x , int32_t y )
{
 80002ca:	b480      	push	{r7}
 80002cc:	b085      	sub	sp, #20
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	6078      	str	r0, [r7, #4]
 80002d2:	6039      	str	r1, [r7, #0]
	 int32_t res;
	 __asm volatile("SVC #39");
 80002d4:	df27      	svc	39	@ 0x27
	 __asm volatile ("MOV %0,R0": "=r"(res) ::);
 80002d6:	4603      	mov	r3, r0
 80002d8:	60fb      	str	r3, [r7, #12]
	 return res;
 80002da:	68fb      	ldr	r3, [r7, #12]
    //TODO

}
 80002dc:	4618      	mov	r0, r3
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <main>:


int main(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
    int32_t res;

    res = add_numbers(40, -90);
 80002ee:	f06f 0159 	mvn.w	r1, #89	@ 0x59
 80002f2:	2028      	movs	r0, #40	@ 0x28
 80002f4:	f7ff ffbc 	bl	8000270 <add_numbers>
 80002f8:	6078      	str	r0, [r7, #4]
    printf("Add result = %ld\n",res);
 80002fa:	6879      	ldr	r1, [r7, #4]
 80002fc:	4811      	ldr	r0, [pc, #68]	@ (8000344 <main+0x5c>)
 80002fe:	f000 fa41 	bl	8000784 <iprintf>

    res = sub_numbers(25,150);
 8000302:	2196      	movs	r1, #150	@ 0x96
 8000304:	2019      	movs	r0, #25
 8000306:	f7ff ffc2 	bl	800028e <sub_numbers>
 800030a:	6078      	str	r0, [r7, #4]
    printf("Sub result = %ld\n",res);
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	480e      	ldr	r0, [pc, #56]	@ (8000348 <main+0x60>)
 8000310:	f000 fa38 	bl	8000784 <iprintf>

    res = mul_numbers(374,890);
 8000314:	f240 317a 	movw	r1, #890	@ 0x37a
 8000318:	f44f 70bb 	mov.w	r0, #374	@ 0x176
 800031c:	f7ff ffc6 	bl	80002ac <mul_numbers>
 8000320:	6078      	str	r0, [r7, #4]
    printf("mul result = %ld\n", res);
 8000322:	6879      	ldr	r1, [r7, #4]
 8000324:	4809      	ldr	r0, [pc, #36]	@ (800034c <main+0x64>)
 8000326:	f000 fa2d 	bl	8000784 <iprintf>

    res = div_numbers(67,-3);
 800032a:	f06f 0102 	mvn.w	r1, #2
 800032e:	2043      	movs	r0, #67	@ 0x43
 8000330:	f7ff ffcb 	bl	80002ca <div_numbers>
 8000334:	6078      	str	r0, [r7, #4]
    printf("div result = %ld\n",res);
 8000336:	6879      	ldr	r1, [r7, #4]
 8000338:	4805      	ldr	r0, [pc, #20]	@ (8000350 <main+0x68>)
 800033a:	f000 fa23 	bl	8000784 <iprintf>

    for(;;);
 800033e:	bf00      	nop
 8000340:	e7fd      	b.n	800033e <main+0x56>
 8000342:	bf00      	nop
 8000344:	0800152c 	.word	0x0800152c
 8000348:	08001540 	.word	0x08001540
 800034c:	08001554 	.word	0x08001554
 8000350:	08001568 	.word	0x08001568

08000354 <SVC_Handler>:
}


__attribute__( ( naked ) ) void SVC_Handler( void )
{
    __asm ("MRS r0,MSP");
 8000354:	f3ef 8008 	mrs	r0, MSP
    __asm( "B SVC_Handler_c");
 8000358:	f000 b802 	b.w	8000360 <SVC_Handler_c>
}
 800035c:	bf00      	nop
	...

08000360 <SVC_Handler_c>:


void SVC_Handler_c(uint32_t *pBaseOfStackFrame)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
    printf("in SVC handler\n");
 8000368:	4827      	ldr	r0, [pc, #156]	@ (8000408 <SVC_Handler_c+0xa8>)
 800036a:	f000 fa73 	bl	8000854 <puts>

    uint8_t *pReturn_addr = (uint8_t*)pBaseOfStackFrame[6];
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	3318      	adds	r3, #24
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	613b      	str	r3, [r7, #16]

    //2. decrement the return address by 2 to point to
    //opcode of the SVC instruction in the program memory
    pReturn_addr-=2;
 8000376:	693b      	ldr	r3, [r7, #16]
 8000378:	3b02      	subs	r3, #2
 800037a:	613b      	str	r3, [r7, #16]


    //3. extract the SVC number (LSByte of the opcode)
    uint8_t svc_number = *pReturn_addr;
 800037c:	693b      	ldr	r3, [r7, #16]
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	73fb      	strb	r3, [r7, #15]

    printf("Svc number is : %d\n",svc_number);
 8000382:	7bfb      	ldrb	r3, [r7, #15]
 8000384:	4619      	mov	r1, r3
 8000386:	4821      	ldr	r0, [pc, #132]	@ (800040c <SVC_Handler_c+0xac>)
 8000388:	f000 f9fc 	bl	8000784 <iprintf>


    int32_t result = 0;
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
/*SVC number signifies the type of operation , decode it */
    switch(svc_number)
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	3b24      	subs	r3, #36	@ 0x24
 8000394:	2b03      	cmp	r3, #3
 8000396:	d82d      	bhi.n	80003f4 <SVC_Handler_c+0x94>
 8000398:	a201      	add	r2, pc, #4	@ (adr r2, 80003a0 <SVC_Handler_c+0x40>)
 800039a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800039e:	bf00      	nop
 80003a0:	080003b1 	.word	0x080003b1
 80003a4:	080003c1 	.word	0x080003c1
 80003a8:	080003d1 	.word	0x080003d1
 80003ac:	080003e3 	.word	0x080003e3
    {

    case 36:
        /*TODO:addition */
    	result = pBaseOfStackFrame[0] + pBaseOfStackFrame[1];
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	3304      	adds	r3, #4
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4413      	add	r3, r2
 80003bc:	617b      	str	r3, [r7, #20]

        break;
 80003be:	e01c      	b.n	80003fa <SVC_Handler_c+0x9a>
    case 37:
        /*TODO:Subtraction*/
    	result = pBaseOfStackFrame[0] - pBaseOfStackFrame[1];
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	3304      	adds	r3, #4
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	1ad3      	subs	r3, r2, r3
 80003cc:	617b      	str	r3, [r7, #20]

        break;
 80003ce:	e014      	b.n	80003fa <SVC_Handler_c+0x9a>
    case 38:
        /*TODO:Multiplication*/
    	result = pBaseOfStackFrame[0] * pBaseOfStackFrame[1];
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	3204      	adds	r2, #4
 80003d8:	6812      	ldr	r2, [r2, #0]
 80003da:	fb02 f303 	mul.w	r3, r2, r3
 80003de:	617b      	str	r3, [r7, #20]

        break;
 80003e0:	e00b      	b.n	80003fa <SVC_Handler_c+0x9a>
    case 39:
        /*TODO:division*/
    	result = pBaseOfStackFrame[0] / pBaseOfStackFrame[1];
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	3304      	adds	r3, #4
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80003f0:	617b      	str	r3, [r7, #20]

        break;
 80003f2:	e002      	b.n	80003fa <SVC_Handler_c+0x9a>
    default:
        printf("invalid svc code\n");
 80003f4:	4806      	ldr	r0, [pc, #24]	@ (8000410 <SVC_Handler_c+0xb0>)
 80003f6:	f000 fa2d 	bl	8000854 <puts>

    }

/*store the result back to stack frame at R0's position */
    pBaseOfStackFrame[0] = result; //TODO
 80003fa:	697a      	ldr	r2, [r7, #20]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	601a      	str	r2, [r3, #0]

}
 8000400:	bf00      	nop
 8000402:	3718      	adds	r7, #24
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	0800157c 	.word	0x0800157c
 800040c:	0800158c 	.word	0x0800158c
 8000410:	080015a0 	.word	0x080015a0

08000414 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800041e:	4b0f      	ldr	r3, [pc, #60]	@ (800045c <ITM_SendChar+0x48>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a0e      	ldr	r2, [pc, #56]	@ (800045c <ITM_SendChar+0x48>)
 8000424:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000428:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800042a:	4b0d      	ldr	r3, [pc, #52]	@ (8000460 <ITM_SendChar+0x4c>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a0c      	ldr	r2, [pc, #48]	@ (8000460 <ITM_SendChar+0x4c>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000436:	bf00      	nop
 8000438:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	2b00      	cmp	r3, #0
 8000444:	d0f8      	beq.n	8000438 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000446:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	6013      	str	r3, [r2, #0]
}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	e000edfc 	.word	0xe000edfc
 8000460:	e0000e00 	.word	0xe0000e00

08000464 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000470:	2300      	movs	r3, #0
 8000472:	617b      	str	r3, [r7, #20]
 8000474:	e00a      	b.n	800048c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000476:	f3af 8000 	nop.w
 800047a:	4601      	mov	r1, r0
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	1c5a      	adds	r2, r3, #1
 8000480:	60ba      	str	r2, [r7, #8]
 8000482:	b2ca      	uxtb	r2, r1
 8000484:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	3301      	adds	r3, #1
 800048a:	617b      	str	r3, [r7, #20]
 800048c:	697a      	ldr	r2, [r7, #20]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	429a      	cmp	r2, r3
 8000492:	dbf0      	blt.n	8000476 <_read+0x12>
  }

  return len;
 8000494:	687b      	ldr	r3, [r7, #4]
}
 8000496:	4618      	mov	r0, r3
 8000498:	3718      	adds	r7, #24
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	b086      	sub	sp, #24
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	60f8      	str	r0, [r7, #12]
 80004a6:	60b9      	str	r1, [r7, #8]
 80004a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004aa:	2300      	movs	r3, #0
 80004ac:	617b      	str	r3, [r7, #20]
 80004ae:	e009      	b.n	80004c4 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	1c5a      	adds	r2, r3, #1
 80004b4:	60ba      	str	r2, [r7, #8]
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff ffab 	bl	8000414 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	3301      	adds	r3, #1
 80004c2:	617b      	str	r3, [r7, #20]
 80004c4:	697a      	ldr	r2, [r7, #20]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	dbf1      	blt.n	80004b0 <_write+0x12>
  }
  return len;
 80004cc:	687b      	ldr	r3, [r7, #4]
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3718      	adds	r7, #24
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <_close>:

int _close(int file)
{
 80004d6:	b480      	push	{r7}
 80004d8:	b083      	sub	sp, #12
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
 80004f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004fe:	605a      	str	r2, [r3, #4]
  return 0;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <_isatty>:

int _isatty(int file)
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000516:	2301      	movs	r3, #1
}
 8000518:	4618      	mov	r0, r3
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000530:	2300      	movs	r3, #0
}
 8000532:	4618      	mov	r0, r3
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
	...

08000540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000548:	4a14      	ldr	r2, [pc, #80]	@ (800059c <_sbrk+0x5c>)
 800054a:	4b15      	ldr	r3, [pc, #84]	@ (80005a0 <_sbrk+0x60>)
 800054c:	1ad3      	subs	r3, r2, r3
 800054e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000554:	4b13      	ldr	r3, [pc, #76]	@ (80005a4 <_sbrk+0x64>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d102      	bne.n	8000562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800055c:	4b11      	ldr	r3, [pc, #68]	@ (80005a4 <_sbrk+0x64>)
 800055e:	4a12      	ldr	r2, [pc, #72]	@ (80005a8 <_sbrk+0x68>)
 8000560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000562:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <_sbrk+0x64>)
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4413      	add	r3, r2
 800056a:	693a      	ldr	r2, [r7, #16]
 800056c:	429a      	cmp	r2, r3
 800056e:	d207      	bcs.n	8000580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000570:	f000 f980 	bl	8000874 <__errno>
 8000574:	4603      	mov	r3, r0
 8000576:	220c      	movs	r2, #12
 8000578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800057a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800057e:	e009      	b.n	8000594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000580:	4b08      	ldr	r3, [pc, #32]	@ (80005a4 <_sbrk+0x64>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000586:	4b07      	ldr	r3, [pc, #28]	@ (80005a4 <_sbrk+0x64>)
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4413      	add	r3, r2
 800058e:	4a05      	ldr	r2, [pc, #20]	@ (80005a4 <_sbrk+0x64>)
 8000590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000592:	68fb      	ldr	r3, [r7, #12]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20020000 	.word	0x20020000
 80005a0:	00000400 	.word	0x00000400
 80005a4:	20000078 	.word	0x20000078
 80005a8:	200001c8 	.word	0x200001c8

080005ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005ac:	480d      	ldr	r0, [pc, #52]	@ (80005e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b4:	480c      	ldr	r0, [pc, #48]	@ (80005e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005b6:	490d      	ldr	r1, [pc, #52]	@ (80005ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b8:	4a0d      	ldr	r2, [pc, #52]	@ (80005f0 <LoopForever+0xe>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005bc:	e002      	b.n	80005c4 <LoopCopyDataInit>

080005be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c2:	3304      	adds	r3, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c8:	d3f9      	bcc.n	80005be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ca:	4a0a      	ldr	r2, [pc, #40]	@ (80005f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005cc:	4c0a      	ldr	r4, [pc, #40]	@ (80005f8 <LoopForever+0x16>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d0:	e001      	b.n	80005d6 <LoopFillZerobss>

080005d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d4:	3204      	adds	r2, #4

080005d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d8:	d3fb      	bcc.n	80005d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005da:	f000 f951 	bl	8000880 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005de:	f7ff fe83 	bl	80002e8 <main>

080005e2 <LoopForever>:

LoopForever:
  b LoopForever
 80005e2:	e7fe      	b.n	80005e2 <LoopForever>
  ldr   r0, =_estack
 80005e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005f0:	080015f4 	.word	0x080015f4
  ldr r2, =_sbss
 80005f4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005f8:	200001c8 	.word	0x200001c8

080005fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC_IRQHandler>
	...

08000600 <std>:
 8000600:	2300      	movs	r3, #0
 8000602:	b510      	push	{r4, lr}
 8000604:	4604      	mov	r4, r0
 8000606:	e9c0 3300 	strd	r3, r3, [r0]
 800060a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800060e:	6083      	str	r3, [r0, #8]
 8000610:	8181      	strh	r1, [r0, #12]
 8000612:	6643      	str	r3, [r0, #100]	@ 0x64
 8000614:	81c2      	strh	r2, [r0, #14]
 8000616:	6183      	str	r3, [r0, #24]
 8000618:	4619      	mov	r1, r3
 800061a:	2208      	movs	r2, #8
 800061c:	305c      	adds	r0, #92	@ 0x5c
 800061e:	f000 f921 	bl	8000864 <memset>
 8000622:	4b0d      	ldr	r3, [pc, #52]	@ (8000658 <std+0x58>)
 8000624:	6263      	str	r3, [r4, #36]	@ 0x24
 8000626:	4b0d      	ldr	r3, [pc, #52]	@ (800065c <std+0x5c>)
 8000628:	62a3      	str	r3, [r4, #40]	@ 0x28
 800062a:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <std+0x60>)
 800062c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800062e:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <std+0x64>)
 8000630:	6323      	str	r3, [r4, #48]	@ 0x30
 8000632:	4b0d      	ldr	r3, [pc, #52]	@ (8000668 <std+0x68>)
 8000634:	6224      	str	r4, [r4, #32]
 8000636:	429c      	cmp	r4, r3
 8000638:	d006      	beq.n	8000648 <std+0x48>
 800063a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800063e:	4294      	cmp	r4, r2
 8000640:	d002      	beq.n	8000648 <std+0x48>
 8000642:	33d0      	adds	r3, #208	@ 0xd0
 8000644:	429c      	cmp	r4, r3
 8000646:	d105      	bne.n	8000654 <std+0x54>
 8000648:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800064c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000650:	f000 b93a 	b.w	80008c8 <__retarget_lock_init_recursive>
 8000654:	bd10      	pop	{r4, pc}
 8000656:	bf00      	nop
 8000658:	0800111d 	.word	0x0800111d
 800065c:	0800113f 	.word	0x0800113f
 8000660:	08001177 	.word	0x08001177
 8000664:	0800119b 	.word	0x0800119b
 8000668:	2000007c 	.word	0x2000007c

0800066c <stdio_exit_handler>:
 800066c:	4a02      	ldr	r2, [pc, #8]	@ (8000678 <stdio_exit_handler+0xc>)
 800066e:	4903      	ldr	r1, [pc, #12]	@ (800067c <stdio_exit_handler+0x10>)
 8000670:	4803      	ldr	r0, [pc, #12]	@ (8000680 <stdio_exit_handler+0x14>)
 8000672:	f000 b869 	b.w	8000748 <_fwalk_sglue>
 8000676:	bf00      	nop
 8000678:	20000000 	.word	0x20000000
 800067c:	080010b5 	.word	0x080010b5
 8000680:	20000010 	.word	0x20000010

08000684 <cleanup_stdio>:
 8000684:	6841      	ldr	r1, [r0, #4]
 8000686:	4b0c      	ldr	r3, [pc, #48]	@ (80006b8 <cleanup_stdio+0x34>)
 8000688:	4299      	cmp	r1, r3
 800068a:	b510      	push	{r4, lr}
 800068c:	4604      	mov	r4, r0
 800068e:	d001      	beq.n	8000694 <cleanup_stdio+0x10>
 8000690:	f000 fd10 	bl	80010b4 <_fflush_r>
 8000694:	68a1      	ldr	r1, [r4, #8]
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <cleanup_stdio+0x38>)
 8000698:	4299      	cmp	r1, r3
 800069a:	d002      	beq.n	80006a2 <cleanup_stdio+0x1e>
 800069c:	4620      	mov	r0, r4
 800069e:	f000 fd09 	bl	80010b4 <_fflush_r>
 80006a2:	68e1      	ldr	r1, [r4, #12]
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <cleanup_stdio+0x3c>)
 80006a6:	4299      	cmp	r1, r3
 80006a8:	d004      	beq.n	80006b4 <cleanup_stdio+0x30>
 80006aa:	4620      	mov	r0, r4
 80006ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006b0:	f000 bd00 	b.w	80010b4 <_fflush_r>
 80006b4:	bd10      	pop	{r4, pc}
 80006b6:	bf00      	nop
 80006b8:	2000007c 	.word	0x2000007c
 80006bc:	200000e4 	.word	0x200000e4
 80006c0:	2000014c 	.word	0x2000014c

080006c4 <global_stdio_init.part.0>:
 80006c4:	b510      	push	{r4, lr}
 80006c6:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <global_stdio_init.part.0+0x30>)
 80006c8:	4c0b      	ldr	r4, [pc, #44]	@ (80006f8 <global_stdio_init.part.0+0x34>)
 80006ca:	4a0c      	ldr	r2, [pc, #48]	@ (80006fc <global_stdio_init.part.0+0x38>)
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	4620      	mov	r0, r4
 80006d0:	2200      	movs	r2, #0
 80006d2:	2104      	movs	r1, #4
 80006d4:	f7ff ff94 	bl	8000600 <std>
 80006d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80006dc:	2201      	movs	r2, #1
 80006de:	2109      	movs	r1, #9
 80006e0:	f7ff ff8e 	bl	8000600 <std>
 80006e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80006e8:	2202      	movs	r2, #2
 80006ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006ee:	2112      	movs	r1, #18
 80006f0:	f7ff bf86 	b.w	8000600 <std>
 80006f4:	200001b4 	.word	0x200001b4
 80006f8:	2000007c 	.word	0x2000007c
 80006fc:	0800066d 	.word	0x0800066d

08000700 <__sfp_lock_acquire>:
 8000700:	4801      	ldr	r0, [pc, #4]	@ (8000708 <__sfp_lock_acquire+0x8>)
 8000702:	f000 b8e2 	b.w	80008ca <__retarget_lock_acquire_recursive>
 8000706:	bf00      	nop
 8000708:	200001b9 	.word	0x200001b9

0800070c <__sfp_lock_release>:
 800070c:	4801      	ldr	r0, [pc, #4]	@ (8000714 <__sfp_lock_release+0x8>)
 800070e:	f000 b8dd 	b.w	80008cc <__retarget_lock_release_recursive>
 8000712:	bf00      	nop
 8000714:	200001b9 	.word	0x200001b9

08000718 <__sinit>:
 8000718:	b510      	push	{r4, lr}
 800071a:	4604      	mov	r4, r0
 800071c:	f7ff fff0 	bl	8000700 <__sfp_lock_acquire>
 8000720:	6a23      	ldr	r3, [r4, #32]
 8000722:	b11b      	cbz	r3, 800072c <__sinit+0x14>
 8000724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000728:	f7ff bff0 	b.w	800070c <__sfp_lock_release>
 800072c:	4b04      	ldr	r3, [pc, #16]	@ (8000740 <__sinit+0x28>)
 800072e:	6223      	str	r3, [r4, #32]
 8000730:	4b04      	ldr	r3, [pc, #16]	@ (8000744 <__sinit+0x2c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1f5      	bne.n	8000724 <__sinit+0xc>
 8000738:	f7ff ffc4 	bl	80006c4 <global_stdio_init.part.0>
 800073c:	e7f2      	b.n	8000724 <__sinit+0xc>
 800073e:	bf00      	nop
 8000740:	08000685 	.word	0x08000685
 8000744:	200001b4 	.word	0x200001b4

08000748 <_fwalk_sglue>:
 8000748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800074c:	4607      	mov	r7, r0
 800074e:	4688      	mov	r8, r1
 8000750:	4614      	mov	r4, r2
 8000752:	2600      	movs	r6, #0
 8000754:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000758:	f1b9 0901 	subs.w	r9, r9, #1
 800075c:	d505      	bpl.n	800076a <_fwalk_sglue+0x22>
 800075e:	6824      	ldr	r4, [r4, #0]
 8000760:	2c00      	cmp	r4, #0
 8000762:	d1f7      	bne.n	8000754 <_fwalk_sglue+0xc>
 8000764:	4630      	mov	r0, r6
 8000766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800076a:	89ab      	ldrh	r3, [r5, #12]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d907      	bls.n	8000780 <_fwalk_sglue+0x38>
 8000770:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000774:	3301      	adds	r3, #1
 8000776:	d003      	beq.n	8000780 <_fwalk_sglue+0x38>
 8000778:	4629      	mov	r1, r5
 800077a:	4638      	mov	r0, r7
 800077c:	47c0      	blx	r8
 800077e:	4306      	orrs	r6, r0
 8000780:	3568      	adds	r5, #104	@ 0x68
 8000782:	e7e9      	b.n	8000758 <_fwalk_sglue+0x10>

08000784 <iprintf>:
 8000784:	b40f      	push	{r0, r1, r2, r3}
 8000786:	b507      	push	{r0, r1, r2, lr}
 8000788:	4906      	ldr	r1, [pc, #24]	@ (80007a4 <iprintf+0x20>)
 800078a:	ab04      	add	r3, sp, #16
 800078c:	6808      	ldr	r0, [r1, #0]
 800078e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000792:	6881      	ldr	r1, [r0, #8]
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	f000 f8c3 	bl	8000920 <_vfiprintf_r>
 800079a:	b003      	add	sp, #12
 800079c:	f85d eb04 	ldr.w	lr, [sp], #4
 80007a0:	b004      	add	sp, #16
 80007a2:	4770      	bx	lr
 80007a4:	2000000c 	.word	0x2000000c

080007a8 <_puts_r>:
 80007a8:	6a03      	ldr	r3, [r0, #32]
 80007aa:	b570      	push	{r4, r5, r6, lr}
 80007ac:	6884      	ldr	r4, [r0, #8]
 80007ae:	4605      	mov	r5, r0
 80007b0:	460e      	mov	r6, r1
 80007b2:	b90b      	cbnz	r3, 80007b8 <_puts_r+0x10>
 80007b4:	f7ff ffb0 	bl	8000718 <__sinit>
 80007b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007ba:	07db      	lsls	r3, r3, #31
 80007bc:	d405      	bmi.n	80007ca <_puts_r+0x22>
 80007be:	89a3      	ldrh	r3, [r4, #12]
 80007c0:	0598      	lsls	r0, r3, #22
 80007c2:	d402      	bmi.n	80007ca <_puts_r+0x22>
 80007c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007c6:	f000 f880 	bl	80008ca <__retarget_lock_acquire_recursive>
 80007ca:	89a3      	ldrh	r3, [r4, #12]
 80007cc:	0719      	lsls	r1, r3, #28
 80007ce:	d502      	bpl.n	80007d6 <_puts_r+0x2e>
 80007d0:	6923      	ldr	r3, [r4, #16]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d135      	bne.n	8000842 <_puts_r+0x9a>
 80007d6:	4621      	mov	r1, r4
 80007d8:	4628      	mov	r0, r5
 80007da:	f000 fd21 	bl	8001220 <__swsetup_r>
 80007de:	b380      	cbz	r0, 8000842 <_puts_r+0x9a>
 80007e0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80007e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007e6:	07da      	lsls	r2, r3, #31
 80007e8:	d405      	bmi.n	80007f6 <_puts_r+0x4e>
 80007ea:	89a3      	ldrh	r3, [r4, #12]
 80007ec:	059b      	lsls	r3, r3, #22
 80007ee:	d402      	bmi.n	80007f6 <_puts_r+0x4e>
 80007f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007f2:	f000 f86b 	bl	80008cc <__retarget_lock_release_recursive>
 80007f6:	4628      	mov	r0, r5
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da04      	bge.n	8000808 <_puts_r+0x60>
 80007fe:	69a2      	ldr	r2, [r4, #24]
 8000800:	429a      	cmp	r2, r3
 8000802:	dc17      	bgt.n	8000834 <_puts_r+0x8c>
 8000804:	290a      	cmp	r1, #10
 8000806:	d015      	beq.n	8000834 <_puts_r+0x8c>
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	1c5a      	adds	r2, r3, #1
 800080c:	6022      	str	r2, [r4, #0]
 800080e:	7019      	strb	r1, [r3, #0]
 8000810:	68a3      	ldr	r3, [r4, #8]
 8000812:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000816:	3b01      	subs	r3, #1
 8000818:	60a3      	str	r3, [r4, #8]
 800081a:	2900      	cmp	r1, #0
 800081c:	d1ed      	bne.n	80007fa <_puts_r+0x52>
 800081e:	2b00      	cmp	r3, #0
 8000820:	da11      	bge.n	8000846 <_puts_r+0x9e>
 8000822:	4622      	mov	r2, r4
 8000824:	210a      	movs	r1, #10
 8000826:	4628      	mov	r0, r5
 8000828:	f000 fcbb 	bl	80011a2 <__swbuf_r>
 800082c:	3001      	adds	r0, #1
 800082e:	d0d7      	beq.n	80007e0 <_puts_r+0x38>
 8000830:	250a      	movs	r5, #10
 8000832:	e7d7      	b.n	80007e4 <_puts_r+0x3c>
 8000834:	4622      	mov	r2, r4
 8000836:	4628      	mov	r0, r5
 8000838:	f000 fcb3 	bl	80011a2 <__swbuf_r>
 800083c:	3001      	adds	r0, #1
 800083e:	d1e7      	bne.n	8000810 <_puts_r+0x68>
 8000840:	e7ce      	b.n	80007e0 <_puts_r+0x38>
 8000842:	3e01      	subs	r6, #1
 8000844:	e7e4      	b.n	8000810 <_puts_r+0x68>
 8000846:	6823      	ldr	r3, [r4, #0]
 8000848:	1c5a      	adds	r2, r3, #1
 800084a:	6022      	str	r2, [r4, #0]
 800084c:	220a      	movs	r2, #10
 800084e:	701a      	strb	r2, [r3, #0]
 8000850:	e7ee      	b.n	8000830 <_puts_r+0x88>
	...

08000854 <puts>:
 8000854:	4b02      	ldr	r3, [pc, #8]	@ (8000860 <puts+0xc>)
 8000856:	4601      	mov	r1, r0
 8000858:	6818      	ldr	r0, [r3, #0]
 800085a:	f7ff bfa5 	b.w	80007a8 <_puts_r>
 800085e:	bf00      	nop
 8000860:	2000000c 	.word	0x2000000c

08000864 <memset>:
 8000864:	4402      	add	r2, r0
 8000866:	4603      	mov	r3, r0
 8000868:	4293      	cmp	r3, r2
 800086a:	d100      	bne.n	800086e <memset+0xa>
 800086c:	4770      	bx	lr
 800086e:	f803 1b01 	strb.w	r1, [r3], #1
 8000872:	e7f9      	b.n	8000868 <memset+0x4>

08000874 <__errno>:
 8000874:	4b01      	ldr	r3, [pc, #4]	@ (800087c <__errno+0x8>)
 8000876:	6818      	ldr	r0, [r3, #0]
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	2000000c 	.word	0x2000000c

08000880 <__libc_init_array>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	4d0d      	ldr	r5, [pc, #52]	@ (80008b8 <__libc_init_array+0x38>)
 8000884:	4c0d      	ldr	r4, [pc, #52]	@ (80008bc <__libc_init_array+0x3c>)
 8000886:	1b64      	subs	r4, r4, r5
 8000888:	10a4      	asrs	r4, r4, #2
 800088a:	2600      	movs	r6, #0
 800088c:	42a6      	cmp	r6, r4
 800088e:	d109      	bne.n	80008a4 <__libc_init_array+0x24>
 8000890:	4d0b      	ldr	r5, [pc, #44]	@ (80008c0 <__libc_init_array+0x40>)
 8000892:	4c0c      	ldr	r4, [pc, #48]	@ (80008c4 <__libc_init_array+0x44>)
 8000894:	f000 fe3e 	bl	8001514 <_init>
 8000898:	1b64      	subs	r4, r4, r5
 800089a:	10a4      	asrs	r4, r4, #2
 800089c:	2600      	movs	r6, #0
 800089e:	42a6      	cmp	r6, r4
 80008a0:	d105      	bne.n	80008ae <__libc_init_array+0x2e>
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80008a8:	4798      	blx	r3
 80008aa:	3601      	adds	r6, #1
 80008ac:	e7ee      	b.n	800088c <__libc_init_array+0xc>
 80008ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80008b2:	4798      	blx	r3
 80008b4:	3601      	adds	r6, #1
 80008b6:	e7f2      	b.n	800089e <__libc_init_array+0x1e>
 80008b8:	080015ec 	.word	0x080015ec
 80008bc:	080015ec 	.word	0x080015ec
 80008c0:	080015ec 	.word	0x080015ec
 80008c4:	080015f0 	.word	0x080015f0

080008c8 <__retarget_lock_init_recursive>:
 80008c8:	4770      	bx	lr

080008ca <__retarget_lock_acquire_recursive>:
 80008ca:	4770      	bx	lr

080008cc <__retarget_lock_release_recursive>:
 80008cc:	4770      	bx	lr

080008ce <__sfputc_r>:
 80008ce:	6893      	ldr	r3, [r2, #8]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	b410      	push	{r4}
 80008d6:	6093      	str	r3, [r2, #8]
 80008d8:	da08      	bge.n	80008ec <__sfputc_r+0x1e>
 80008da:	6994      	ldr	r4, [r2, #24]
 80008dc:	42a3      	cmp	r3, r4
 80008de:	db01      	blt.n	80008e4 <__sfputc_r+0x16>
 80008e0:	290a      	cmp	r1, #10
 80008e2:	d103      	bne.n	80008ec <__sfputc_r+0x1e>
 80008e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80008e8:	f000 bc5b 	b.w	80011a2 <__swbuf_r>
 80008ec:	6813      	ldr	r3, [r2, #0]
 80008ee:	1c58      	adds	r0, r3, #1
 80008f0:	6010      	str	r0, [r2, #0]
 80008f2:	7019      	strb	r1, [r3, #0]
 80008f4:	4608      	mov	r0, r1
 80008f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <__sfputs_r>:
 80008fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008fe:	4606      	mov	r6, r0
 8000900:	460f      	mov	r7, r1
 8000902:	4614      	mov	r4, r2
 8000904:	18d5      	adds	r5, r2, r3
 8000906:	42ac      	cmp	r4, r5
 8000908:	d101      	bne.n	800090e <__sfputs_r+0x12>
 800090a:	2000      	movs	r0, #0
 800090c:	e007      	b.n	800091e <__sfputs_r+0x22>
 800090e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000912:	463a      	mov	r2, r7
 8000914:	4630      	mov	r0, r6
 8000916:	f7ff ffda 	bl	80008ce <__sfputc_r>
 800091a:	1c43      	adds	r3, r0, #1
 800091c:	d1f3      	bne.n	8000906 <__sfputs_r+0xa>
 800091e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000920 <_vfiprintf_r>:
 8000920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000924:	460d      	mov	r5, r1
 8000926:	b09d      	sub	sp, #116	@ 0x74
 8000928:	4614      	mov	r4, r2
 800092a:	4698      	mov	r8, r3
 800092c:	4606      	mov	r6, r0
 800092e:	b118      	cbz	r0, 8000938 <_vfiprintf_r+0x18>
 8000930:	6a03      	ldr	r3, [r0, #32]
 8000932:	b90b      	cbnz	r3, 8000938 <_vfiprintf_r+0x18>
 8000934:	f7ff fef0 	bl	8000718 <__sinit>
 8000938:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800093a:	07d9      	lsls	r1, r3, #31
 800093c:	d405      	bmi.n	800094a <_vfiprintf_r+0x2a>
 800093e:	89ab      	ldrh	r3, [r5, #12]
 8000940:	059a      	lsls	r2, r3, #22
 8000942:	d402      	bmi.n	800094a <_vfiprintf_r+0x2a>
 8000944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000946:	f7ff ffc0 	bl	80008ca <__retarget_lock_acquire_recursive>
 800094a:	89ab      	ldrh	r3, [r5, #12]
 800094c:	071b      	lsls	r3, r3, #28
 800094e:	d501      	bpl.n	8000954 <_vfiprintf_r+0x34>
 8000950:	692b      	ldr	r3, [r5, #16]
 8000952:	b99b      	cbnz	r3, 800097c <_vfiprintf_r+0x5c>
 8000954:	4629      	mov	r1, r5
 8000956:	4630      	mov	r0, r6
 8000958:	f000 fc62 	bl	8001220 <__swsetup_r>
 800095c:	b170      	cbz	r0, 800097c <_vfiprintf_r+0x5c>
 800095e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000960:	07dc      	lsls	r4, r3, #31
 8000962:	d504      	bpl.n	800096e <_vfiprintf_r+0x4e>
 8000964:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000968:	b01d      	add	sp, #116	@ 0x74
 800096a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800096e:	89ab      	ldrh	r3, [r5, #12]
 8000970:	0598      	lsls	r0, r3, #22
 8000972:	d4f7      	bmi.n	8000964 <_vfiprintf_r+0x44>
 8000974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000976:	f7ff ffa9 	bl	80008cc <__retarget_lock_release_recursive>
 800097a:	e7f3      	b.n	8000964 <_vfiprintf_r+0x44>
 800097c:	2300      	movs	r3, #0
 800097e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000980:	2320      	movs	r3, #32
 8000982:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000986:	f8cd 800c 	str.w	r8, [sp, #12]
 800098a:	2330      	movs	r3, #48	@ 0x30
 800098c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000b3c <_vfiprintf_r+0x21c>
 8000990:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000994:	f04f 0901 	mov.w	r9, #1
 8000998:	4623      	mov	r3, r4
 800099a:	469a      	mov	sl, r3
 800099c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80009a0:	b10a      	cbz	r2, 80009a6 <_vfiprintf_r+0x86>
 80009a2:	2a25      	cmp	r2, #37	@ 0x25
 80009a4:	d1f9      	bne.n	800099a <_vfiprintf_r+0x7a>
 80009a6:	ebba 0b04 	subs.w	fp, sl, r4
 80009aa:	d00b      	beq.n	80009c4 <_vfiprintf_r+0xa4>
 80009ac:	465b      	mov	r3, fp
 80009ae:	4622      	mov	r2, r4
 80009b0:	4629      	mov	r1, r5
 80009b2:	4630      	mov	r0, r6
 80009b4:	f7ff ffa2 	bl	80008fc <__sfputs_r>
 80009b8:	3001      	adds	r0, #1
 80009ba:	f000 80a7 	beq.w	8000b0c <_vfiprintf_r+0x1ec>
 80009be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80009c0:	445a      	add	r2, fp
 80009c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80009c4:	f89a 3000 	ldrb.w	r3, [sl]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	f000 809f 	beq.w	8000b0c <_vfiprintf_r+0x1ec>
 80009ce:	2300      	movs	r3, #0
 80009d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80009d8:	f10a 0a01 	add.w	sl, sl, #1
 80009dc:	9304      	str	r3, [sp, #16]
 80009de:	9307      	str	r3, [sp, #28]
 80009e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80009e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80009e6:	4654      	mov	r4, sl
 80009e8:	2205      	movs	r2, #5
 80009ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009ee:	4853      	ldr	r0, [pc, #332]	@ (8000b3c <_vfiprintf_r+0x21c>)
 80009f0:	f7ff fbee 	bl	80001d0 <memchr>
 80009f4:	9a04      	ldr	r2, [sp, #16]
 80009f6:	b9d8      	cbnz	r0, 8000a30 <_vfiprintf_r+0x110>
 80009f8:	06d1      	lsls	r1, r2, #27
 80009fa:	bf44      	itt	mi
 80009fc:	2320      	movmi	r3, #32
 80009fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a02:	0713      	lsls	r3, r2, #28
 8000a04:	bf44      	itt	mi
 8000a06:	232b      	movmi	r3, #43	@ 0x2b
 8000a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8000a10:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a12:	d015      	beq.n	8000a40 <_vfiprintf_r+0x120>
 8000a14:	9a07      	ldr	r2, [sp, #28]
 8000a16:	4654      	mov	r4, sl
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f04f 0c0a 	mov.w	ip, #10
 8000a1e:	4621      	mov	r1, r4
 8000a20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a24:	3b30      	subs	r3, #48	@ 0x30
 8000a26:	2b09      	cmp	r3, #9
 8000a28:	d94b      	bls.n	8000ac2 <_vfiprintf_r+0x1a2>
 8000a2a:	b1b0      	cbz	r0, 8000a5a <_vfiprintf_r+0x13a>
 8000a2c:	9207      	str	r2, [sp, #28]
 8000a2e:	e014      	b.n	8000a5a <_vfiprintf_r+0x13a>
 8000a30:	eba0 0308 	sub.w	r3, r0, r8
 8000a34:	fa09 f303 	lsl.w	r3, r9, r3
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	9304      	str	r3, [sp, #16]
 8000a3c:	46a2      	mov	sl, r4
 8000a3e:	e7d2      	b.n	80009e6 <_vfiprintf_r+0xc6>
 8000a40:	9b03      	ldr	r3, [sp, #12]
 8000a42:	1d19      	adds	r1, r3, #4
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	9103      	str	r1, [sp, #12]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	bfbb      	ittet	lt
 8000a4c:	425b      	neglt	r3, r3
 8000a4e:	f042 0202 	orrlt.w	r2, r2, #2
 8000a52:	9307      	strge	r3, [sp, #28]
 8000a54:	9307      	strlt	r3, [sp, #28]
 8000a56:	bfb8      	it	lt
 8000a58:	9204      	strlt	r2, [sp, #16]
 8000a5a:	7823      	ldrb	r3, [r4, #0]
 8000a5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8000a5e:	d10a      	bne.n	8000a76 <_vfiprintf_r+0x156>
 8000a60:	7863      	ldrb	r3, [r4, #1]
 8000a62:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a64:	d132      	bne.n	8000acc <_vfiprintf_r+0x1ac>
 8000a66:	9b03      	ldr	r3, [sp, #12]
 8000a68:	1d1a      	adds	r2, r3, #4
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	9203      	str	r2, [sp, #12]
 8000a6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000a72:	3402      	adds	r4, #2
 8000a74:	9305      	str	r3, [sp, #20]
 8000a76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000b4c <_vfiprintf_r+0x22c>
 8000a7a:	7821      	ldrb	r1, [r4, #0]
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	4650      	mov	r0, sl
 8000a80:	f7ff fba6 	bl	80001d0 <memchr>
 8000a84:	b138      	cbz	r0, 8000a96 <_vfiprintf_r+0x176>
 8000a86:	9b04      	ldr	r3, [sp, #16]
 8000a88:	eba0 000a 	sub.w	r0, r0, sl
 8000a8c:	2240      	movs	r2, #64	@ 0x40
 8000a8e:	4082      	lsls	r2, r0
 8000a90:	4313      	orrs	r3, r2
 8000a92:	3401      	adds	r4, #1
 8000a94:	9304      	str	r3, [sp, #16]
 8000a96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a9a:	4829      	ldr	r0, [pc, #164]	@ (8000b40 <_vfiprintf_r+0x220>)
 8000a9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000aa0:	2206      	movs	r2, #6
 8000aa2:	f7ff fb95 	bl	80001d0 <memchr>
 8000aa6:	2800      	cmp	r0, #0
 8000aa8:	d03f      	beq.n	8000b2a <_vfiprintf_r+0x20a>
 8000aaa:	4b26      	ldr	r3, [pc, #152]	@ (8000b44 <_vfiprintf_r+0x224>)
 8000aac:	bb1b      	cbnz	r3, 8000af6 <_vfiprintf_r+0x1d6>
 8000aae:	9b03      	ldr	r3, [sp, #12]
 8000ab0:	3307      	adds	r3, #7
 8000ab2:	f023 0307 	bic.w	r3, r3, #7
 8000ab6:	3308      	adds	r3, #8
 8000ab8:	9303      	str	r3, [sp, #12]
 8000aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000abc:	443b      	add	r3, r7
 8000abe:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ac0:	e76a      	b.n	8000998 <_vfiprintf_r+0x78>
 8000ac2:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ac6:	460c      	mov	r4, r1
 8000ac8:	2001      	movs	r0, #1
 8000aca:	e7a8      	b.n	8000a1e <_vfiprintf_r+0xfe>
 8000acc:	2300      	movs	r3, #0
 8000ace:	3401      	adds	r4, #1
 8000ad0:	9305      	str	r3, [sp, #20]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f04f 0c0a 	mov.w	ip, #10
 8000ad8:	4620      	mov	r0, r4
 8000ada:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ade:	3a30      	subs	r2, #48	@ 0x30
 8000ae0:	2a09      	cmp	r2, #9
 8000ae2:	d903      	bls.n	8000aec <_vfiprintf_r+0x1cc>
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d0c6      	beq.n	8000a76 <_vfiprintf_r+0x156>
 8000ae8:	9105      	str	r1, [sp, #20]
 8000aea:	e7c4      	b.n	8000a76 <_vfiprintf_r+0x156>
 8000aec:	fb0c 2101 	mla	r1, ip, r1, r2
 8000af0:	4604      	mov	r4, r0
 8000af2:	2301      	movs	r3, #1
 8000af4:	e7f0      	b.n	8000ad8 <_vfiprintf_r+0x1b8>
 8000af6:	ab03      	add	r3, sp, #12
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	462a      	mov	r2, r5
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <_vfiprintf_r+0x228>)
 8000afe:	a904      	add	r1, sp, #16
 8000b00:	4630      	mov	r0, r6
 8000b02:	f3af 8000 	nop.w
 8000b06:	4607      	mov	r7, r0
 8000b08:	1c78      	adds	r0, r7, #1
 8000b0a:	d1d6      	bne.n	8000aba <_vfiprintf_r+0x19a>
 8000b0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000b0e:	07d9      	lsls	r1, r3, #31
 8000b10:	d405      	bmi.n	8000b1e <_vfiprintf_r+0x1fe>
 8000b12:	89ab      	ldrh	r3, [r5, #12]
 8000b14:	059a      	lsls	r2, r3, #22
 8000b16:	d402      	bmi.n	8000b1e <_vfiprintf_r+0x1fe>
 8000b18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000b1a:	f7ff fed7 	bl	80008cc <__retarget_lock_release_recursive>
 8000b1e:	89ab      	ldrh	r3, [r5, #12]
 8000b20:	065b      	lsls	r3, r3, #25
 8000b22:	f53f af1f 	bmi.w	8000964 <_vfiprintf_r+0x44>
 8000b26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000b28:	e71e      	b.n	8000968 <_vfiprintf_r+0x48>
 8000b2a:	ab03      	add	r3, sp, #12
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	462a      	mov	r2, r5
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <_vfiprintf_r+0x228>)
 8000b32:	a904      	add	r1, sp, #16
 8000b34:	4630      	mov	r0, r6
 8000b36:	f000 f91b 	bl	8000d70 <_printf_i>
 8000b3a:	e7e4      	b.n	8000b06 <_vfiprintf_r+0x1e6>
 8000b3c:	080015b1 	.word	0x080015b1
 8000b40:	080015bb 	.word	0x080015bb
 8000b44:	00000000 	.word	0x00000000
 8000b48:	080008fd 	.word	0x080008fd
 8000b4c:	080015b7 	.word	0x080015b7

08000b50 <sbrk_aligned>:
 8000b50:	b570      	push	{r4, r5, r6, lr}
 8000b52:	4e0f      	ldr	r6, [pc, #60]	@ (8000b90 <sbrk_aligned+0x40>)
 8000b54:	460c      	mov	r4, r1
 8000b56:	6831      	ldr	r1, [r6, #0]
 8000b58:	4605      	mov	r5, r0
 8000b5a:	b911      	cbnz	r1, 8000b62 <sbrk_aligned+0x12>
 8000b5c:	f000 fc4c 	bl	80013f8 <_sbrk_r>
 8000b60:	6030      	str	r0, [r6, #0]
 8000b62:	4621      	mov	r1, r4
 8000b64:	4628      	mov	r0, r5
 8000b66:	f000 fc47 	bl	80013f8 <_sbrk_r>
 8000b6a:	1c43      	adds	r3, r0, #1
 8000b6c:	d103      	bne.n	8000b76 <sbrk_aligned+0x26>
 8000b6e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000b72:	4620      	mov	r0, r4
 8000b74:	bd70      	pop	{r4, r5, r6, pc}
 8000b76:	1cc4      	adds	r4, r0, #3
 8000b78:	f024 0403 	bic.w	r4, r4, #3
 8000b7c:	42a0      	cmp	r0, r4
 8000b7e:	d0f8      	beq.n	8000b72 <sbrk_aligned+0x22>
 8000b80:	1a21      	subs	r1, r4, r0
 8000b82:	4628      	mov	r0, r5
 8000b84:	f000 fc38 	bl	80013f8 <_sbrk_r>
 8000b88:	3001      	adds	r0, #1
 8000b8a:	d1f2      	bne.n	8000b72 <sbrk_aligned+0x22>
 8000b8c:	e7ef      	b.n	8000b6e <sbrk_aligned+0x1e>
 8000b8e:	bf00      	nop
 8000b90:	200001bc 	.word	0x200001bc

08000b94 <_malloc_r>:
 8000b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b98:	1ccd      	adds	r5, r1, #3
 8000b9a:	f025 0503 	bic.w	r5, r5, #3
 8000b9e:	3508      	adds	r5, #8
 8000ba0:	2d0c      	cmp	r5, #12
 8000ba2:	bf38      	it	cc
 8000ba4:	250c      	movcc	r5, #12
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	4606      	mov	r6, r0
 8000baa:	db01      	blt.n	8000bb0 <_malloc_r+0x1c>
 8000bac:	42a9      	cmp	r1, r5
 8000bae:	d904      	bls.n	8000bba <_malloc_r+0x26>
 8000bb0:	230c      	movs	r3, #12
 8000bb2:	6033      	str	r3, [r6, #0]
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c90 <_malloc_r+0xfc>
 8000bbe:	f000 faa1 	bl	8001104 <__malloc_lock>
 8000bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8000bc6:	461c      	mov	r4, r3
 8000bc8:	bb44      	cbnz	r4, 8000c1c <_malloc_r+0x88>
 8000bca:	4629      	mov	r1, r5
 8000bcc:	4630      	mov	r0, r6
 8000bce:	f7ff ffbf 	bl	8000b50 <sbrk_aligned>
 8000bd2:	1c43      	adds	r3, r0, #1
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	d158      	bne.n	8000c8a <_malloc_r+0xf6>
 8000bd8:	f8d8 4000 	ldr.w	r4, [r8]
 8000bdc:	4627      	mov	r7, r4
 8000bde:	2f00      	cmp	r7, #0
 8000be0:	d143      	bne.n	8000c6a <_malloc_r+0xd6>
 8000be2:	2c00      	cmp	r4, #0
 8000be4:	d04b      	beq.n	8000c7e <_malloc_r+0xea>
 8000be6:	6823      	ldr	r3, [r4, #0]
 8000be8:	4639      	mov	r1, r7
 8000bea:	4630      	mov	r0, r6
 8000bec:	eb04 0903 	add.w	r9, r4, r3
 8000bf0:	f000 fc02 	bl	80013f8 <_sbrk_r>
 8000bf4:	4581      	cmp	r9, r0
 8000bf6:	d142      	bne.n	8000c7e <_malloc_r+0xea>
 8000bf8:	6821      	ldr	r1, [r4, #0]
 8000bfa:	1a6d      	subs	r5, r5, r1
 8000bfc:	4629      	mov	r1, r5
 8000bfe:	4630      	mov	r0, r6
 8000c00:	f7ff ffa6 	bl	8000b50 <sbrk_aligned>
 8000c04:	3001      	adds	r0, #1
 8000c06:	d03a      	beq.n	8000c7e <_malloc_r+0xea>
 8000c08:	6823      	ldr	r3, [r4, #0]
 8000c0a:	442b      	add	r3, r5
 8000c0c:	6023      	str	r3, [r4, #0]
 8000c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	bb62      	cbnz	r2, 8000c70 <_malloc_r+0xdc>
 8000c16:	f8c8 7000 	str.w	r7, [r8]
 8000c1a:	e00f      	b.n	8000c3c <_malloc_r+0xa8>
 8000c1c:	6822      	ldr	r2, [r4, #0]
 8000c1e:	1b52      	subs	r2, r2, r5
 8000c20:	d420      	bmi.n	8000c64 <_malloc_r+0xd0>
 8000c22:	2a0b      	cmp	r2, #11
 8000c24:	d917      	bls.n	8000c56 <_malloc_r+0xc2>
 8000c26:	1961      	adds	r1, r4, r5
 8000c28:	42a3      	cmp	r3, r4
 8000c2a:	6025      	str	r5, [r4, #0]
 8000c2c:	bf18      	it	ne
 8000c2e:	6059      	strne	r1, [r3, #4]
 8000c30:	6863      	ldr	r3, [r4, #4]
 8000c32:	bf08      	it	eq
 8000c34:	f8c8 1000 	streq.w	r1, [r8]
 8000c38:	5162      	str	r2, [r4, r5]
 8000c3a:	604b      	str	r3, [r1, #4]
 8000c3c:	4630      	mov	r0, r6
 8000c3e:	f000 fa67 	bl	8001110 <__malloc_unlock>
 8000c42:	f104 000b 	add.w	r0, r4, #11
 8000c46:	1d23      	adds	r3, r4, #4
 8000c48:	f020 0007 	bic.w	r0, r0, #7
 8000c4c:	1ac2      	subs	r2, r0, r3
 8000c4e:	bf1c      	itt	ne
 8000c50:	1a1b      	subne	r3, r3, r0
 8000c52:	50a3      	strne	r3, [r4, r2]
 8000c54:	e7af      	b.n	8000bb6 <_malloc_r+0x22>
 8000c56:	6862      	ldr	r2, [r4, #4]
 8000c58:	42a3      	cmp	r3, r4
 8000c5a:	bf0c      	ite	eq
 8000c5c:	f8c8 2000 	streq.w	r2, [r8]
 8000c60:	605a      	strne	r2, [r3, #4]
 8000c62:	e7eb      	b.n	8000c3c <_malloc_r+0xa8>
 8000c64:	4623      	mov	r3, r4
 8000c66:	6864      	ldr	r4, [r4, #4]
 8000c68:	e7ae      	b.n	8000bc8 <_malloc_r+0x34>
 8000c6a:	463c      	mov	r4, r7
 8000c6c:	687f      	ldr	r7, [r7, #4]
 8000c6e:	e7b6      	b.n	8000bde <_malloc_r+0x4a>
 8000c70:	461a      	mov	r2, r3
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	42a3      	cmp	r3, r4
 8000c76:	d1fb      	bne.n	8000c70 <_malloc_r+0xdc>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	6053      	str	r3, [r2, #4]
 8000c7c:	e7de      	b.n	8000c3c <_malloc_r+0xa8>
 8000c7e:	230c      	movs	r3, #12
 8000c80:	6033      	str	r3, [r6, #0]
 8000c82:	4630      	mov	r0, r6
 8000c84:	f000 fa44 	bl	8001110 <__malloc_unlock>
 8000c88:	e794      	b.n	8000bb4 <_malloc_r+0x20>
 8000c8a:	6005      	str	r5, [r0, #0]
 8000c8c:	e7d6      	b.n	8000c3c <_malloc_r+0xa8>
 8000c8e:	bf00      	nop
 8000c90:	200001c0 	.word	0x200001c0

08000c94 <_printf_common>:
 8000c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c98:	4616      	mov	r6, r2
 8000c9a:	4698      	mov	r8, r3
 8000c9c:	688a      	ldr	r2, [r1, #8]
 8000c9e:	690b      	ldr	r3, [r1, #16]
 8000ca0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	bfb8      	it	lt
 8000ca8:	4613      	movlt	r3, r2
 8000caa:	6033      	str	r3, [r6, #0]
 8000cac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000cb0:	4607      	mov	r7, r0
 8000cb2:	460c      	mov	r4, r1
 8000cb4:	b10a      	cbz	r2, 8000cba <_printf_common+0x26>
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	6033      	str	r3, [r6, #0]
 8000cba:	6823      	ldr	r3, [r4, #0]
 8000cbc:	0699      	lsls	r1, r3, #26
 8000cbe:	bf42      	ittt	mi
 8000cc0:	6833      	ldrmi	r3, [r6, #0]
 8000cc2:	3302      	addmi	r3, #2
 8000cc4:	6033      	strmi	r3, [r6, #0]
 8000cc6:	6825      	ldr	r5, [r4, #0]
 8000cc8:	f015 0506 	ands.w	r5, r5, #6
 8000ccc:	d106      	bne.n	8000cdc <_printf_common+0x48>
 8000cce:	f104 0a19 	add.w	sl, r4, #25
 8000cd2:	68e3      	ldr	r3, [r4, #12]
 8000cd4:	6832      	ldr	r2, [r6, #0]
 8000cd6:	1a9b      	subs	r3, r3, r2
 8000cd8:	42ab      	cmp	r3, r5
 8000cda:	dc26      	bgt.n	8000d2a <_printf_common+0x96>
 8000cdc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000ce0:	6822      	ldr	r2, [r4, #0]
 8000ce2:	3b00      	subs	r3, #0
 8000ce4:	bf18      	it	ne
 8000ce6:	2301      	movne	r3, #1
 8000ce8:	0692      	lsls	r2, r2, #26
 8000cea:	d42b      	bmi.n	8000d44 <_printf_common+0xb0>
 8000cec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000cf0:	4641      	mov	r1, r8
 8000cf2:	4638      	mov	r0, r7
 8000cf4:	47c8      	blx	r9
 8000cf6:	3001      	adds	r0, #1
 8000cf8:	d01e      	beq.n	8000d38 <_printf_common+0xa4>
 8000cfa:	6823      	ldr	r3, [r4, #0]
 8000cfc:	6922      	ldr	r2, [r4, #16]
 8000cfe:	f003 0306 	and.w	r3, r3, #6
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf02      	ittt	eq
 8000d06:	68e5      	ldreq	r5, [r4, #12]
 8000d08:	6833      	ldreq	r3, [r6, #0]
 8000d0a:	1aed      	subeq	r5, r5, r3
 8000d0c:	68a3      	ldr	r3, [r4, #8]
 8000d0e:	bf0c      	ite	eq
 8000d10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d14:	2500      	movne	r5, #0
 8000d16:	4293      	cmp	r3, r2
 8000d18:	bfc4      	itt	gt
 8000d1a:	1a9b      	subgt	r3, r3, r2
 8000d1c:	18ed      	addgt	r5, r5, r3
 8000d1e:	2600      	movs	r6, #0
 8000d20:	341a      	adds	r4, #26
 8000d22:	42b5      	cmp	r5, r6
 8000d24:	d11a      	bne.n	8000d5c <_printf_common+0xc8>
 8000d26:	2000      	movs	r0, #0
 8000d28:	e008      	b.n	8000d3c <_printf_common+0xa8>
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	4652      	mov	r2, sl
 8000d2e:	4641      	mov	r1, r8
 8000d30:	4638      	mov	r0, r7
 8000d32:	47c8      	blx	r9
 8000d34:	3001      	adds	r0, #1
 8000d36:	d103      	bne.n	8000d40 <_printf_common+0xac>
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d40:	3501      	adds	r5, #1
 8000d42:	e7c6      	b.n	8000cd2 <_printf_common+0x3e>
 8000d44:	18e1      	adds	r1, r4, r3
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	2030      	movs	r0, #48	@ 0x30
 8000d4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d4e:	4422      	add	r2, r4
 8000d50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d58:	3302      	adds	r3, #2
 8000d5a:	e7c7      	b.n	8000cec <_printf_common+0x58>
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	4622      	mov	r2, r4
 8000d60:	4641      	mov	r1, r8
 8000d62:	4638      	mov	r0, r7
 8000d64:	47c8      	blx	r9
 8000d66:	3001      	adds	r0, #1
 8000d68:	d0e6      	beq.n	8000d38 <_printf_common+0xa4>
 8000d6a:	3601      	adds	r6, #1
 8000d6c:	e7d9      	b.n	8000d22 <_printf_common+0x8e>
	...

08000d70 <_printf_i>:
 8000d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d74:	7e0f      	ldrb	r7, [r1, #24]
 8000d76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000d78:	2f78      	cmp	r7, #120	@ 0x78
 8000d7a:	4691      	mov	r9, r2
 8000d7c:	4680      	mov	r8, r0
 8000d7e:	460c      	mov	r4, r1
 8000d80:	469a      	mov	sl, r3
 8000d82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000d86:	d807      	bhi.n	8000d98 <_printf_i+0x28>
 8000d88:	2f62      	cmp	r7, #98	@ 0x62
 8000d8a:	d80a      	bhi.n	8000da2 <_printf_i+0x32>
 8000d8c:	2f00      	cmp	r7, #0
 8000d8e:	f000 80d1 	beq.w	8000f34 <_printf_i+0x1c4>
 8000d92:	2f58      	cmp	r7, #88	@ 0x58
 8000d94:	f000 80b8 	beq.w	8000f08 <_printf_i+0x198>
 8000d98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000da0:	e03a      	b.n	8000e18 <_printf_i+0xa8>
 8000da2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000da6:	2b15      	cmp	r3, #21
 8000da8:	d8f6      	bhi.n	8000d98 <_printf_i+0x28>
 8000daa:	a101      	add	r1, pc, #4	@ (adr r1, 8000db0 <_printf_i+0x40>)
 8000dac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000db0:	08000e09 	.word	0x08000e09
 8000db4:	08000e1d 	.word	0x08000e1d
 8000db8:	08000d99 	.word	0x08000d99
 8000dbc:	08000d99 	.word	0x08000d99
 8000dc0:	08000d99 	.word	0x08000d99
 8000dc4:	08000d99 	.word	0x08000d99
 8000dc8:	08000e1d 	.word	0x08000e1d
 8000dcc:	08000d99 	.word	0x08000d99
 8000dd0:	08000d99 	.word	0x08000d99
 8000dd4:	08000d99 	.word	0x08000d99
 8000dd8:	08000d99 	.word	0x08000d99
 8000ddc:	08000f1b 	.word	0x08000f1b
 8000de0:	08000e47 	.word	0x08000e47
 8000de4:	08000ed5 	.word	0x08000ed5
 8000de8:	08000d99 	.word	0x08000d99
 8000dec:	08000d99 	.word	0x08000d99
 8000df0:	08000f3d 	.word	0x08000f3d
 8000df4:	08000d99 	.word	0x08000d99
 8000df8:	08000e47 	.word	0x08000e47
 8000dfc:	08000d99 	.word	0x08000d99
 8000e00:	08000d99 	.word	0x08000d99
 8000e04:	08000edd 	.word	0x08000edd
 8000e08:	6833      	ldr	r3, [r6, #0]
 8000e0a:	1d1a      	adds	r2, r3, #4
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	6032      	str	r2, [r6, #0]
 8000e10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e09c      	b.n	8000f56 <_printf_i+0x1e6>
 8000e1c:	6833      	ldr	r3, [r6, #0]
 8000e1e:	6820      	ldr	r0, [r4, #0]
 8000e20:	1d19      	adds	r1, r3, #4
 8000e22:	6031      	str	r1, [r6, #0]
 8000e24:	0606      	lsls	r6, r0, #24
 8000e26:	d501      	bpl.n	8000e2c <_printf_i+0xbc>
 8000e28:	681d      	ldr	r5, [r3, #0]
 8000e2a:	e003      	b.n	8000e34 <_printf_i+0xc4>
 8000e2c:	0645      	lsls	r5, r0, #25
 8000e2e:	d5fb      	bpl.n	8000e28 <_printf_i+0xb8>
 8000e30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e34:	2d00      	cmp	r5, #0
 8000e36:	da03      	bge.n	8000e40 <_printf_i+0xd0>
 8000e38:	232d      	movs	r3, #45	@ 0x2d
 8000e3a:	426d      	negs	r5, r5
 8000e3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e40:	4858      	ldr	r0, [pc, #352]	@ (8000fa4 <_printf_i+0x234>)
 8000e42:	230a      	movs	r3, #10
 8000e44:	e011      	b.n	8000e6a <_printf_i+0xfa>
 8000e46:	6821      	ldr	r1, [r4, #0]
 8000e48:	6833      	ldr	r3, [r6, #0]
 8000e4a:	0608      	lsls	r0, r1, #24
 8000e4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e50:	d402      	bmi.n	8000e58 <_printf_i+0xe8>
 8000e52:	0649      	lsls	r1, r1, #25
 8000e54:	bf48      	it	mi
 8000e56:	b2ad      	uxthmi	r5, r5
 8000e58:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e5a:	4852      	ldr	r0, [pc, #328]	@ (8000fa4 <_printf_i+0x234>)
 8000e5c:	6033      	str	r3, [r6, #0]
 8000e5e:	bf14      	ite	ne
 8000e60:	230a      	movne	r3, #10
 8000e62:	2308      	moveq	r3, #8
 8000e64:	2100      	movs	r1, #0
 8000e66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000e6a:	6866      	ldr	r6, [r4, #4]
 8000e6c:	60a6      	str	r6, [r4, #8]
 8000e6e:	2e00      	cmp	r6, #0
 8000e70:	db05      	blt.n	8000e7e <_printf_i+0x10e>
 8000e72:	6821      	ldr	r1, [r4, #0]
 8000e74:	432e      	orrs	r6, r5
 8000e76:	f021 0104 	bic.w	r1, r1, #4
 8000e7a:	6021      	str	r1, [r4, #0]
 8000e7c:	d04b      	beq.n	8000f16 <_printf_i+0x1a6>
 8000e7e:	4616      	mov	r6, r2
 8000e80:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e84:	fb03 5711 	mls	r7, r3, r1, r5
 8000e88:	5dc7      	ldrb	r7, [r0, r7]
 8000e8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e8e:	462f      	mov	r7, r5
 8000e90:	42bb      	cmp	r3, r7
 8000e92:	460d      	mov	r5, r1
 8000e94:	d9f4      	bls.n	8000e80 <_printf_i+0x110>
 8000e96:	2b08      	cmp	r3, #8
 8000e98:	d10b      	bne.n	8000eb2 <_printf_i+0x142>
 8000e9a:	6823      	ldr	r3, [r4, #0]
 8000e9c:	07df      	lsls	r7, r3, #31
 8000e9e:	d508      	bpl.n	8000eb2 <_printf_i+0x142>
 8000ea0:	6923      	ldr	r3, [r4, #16]
 8000ea2:	6861      	ldr	r1, [r4, #4]
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	bfde      	ittt	le
 8000ea8:	2330      	movle	r3, #48	@ 0x30
 8000eaa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000eae:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000eb2:	1b92      	subs	r2, r2, r6
 8000eb4:	6122      	str	r2, [r4, #16]
 8000eb6:	f8cd a000 	str.w	sl, [sp]
 8000eba:	464b      	mov	r3, r9
 8000ebc:	aa03      	add	r2, sp, #12
 8000ebe:	4621      	mov	r1, r4
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	f7ff fee7 	bl	8000c94 <_printf_common>
 8000ec6:	3001      	adds	r0, #1
 8000ec8:	d14a      	bne.n	8000f60 <_printf_i+0x1f0>
 8000eca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ece:	b004      	add	sp, #16
 8000ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed4:	6823      	ldr	r3, [r4, #0]
 8000ed6:	f043 0320 	orr.w	r3, r3, #32
 8000eda:	6023      	str	r3, [r4, #0]
 8000edc:	4832      	ldr	r0, [pc, #200]	@ (8000fa8 <_printf_i+0x238>)
 8000ede:	2778      	movs	r7, #120	@ 0x78
 8000ee0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000ee4:	6823      	ldr	r3, [r4, #0]
 8000ee6:	6831      	ldr	r1, [r6, #0]
 8000ee8:	061f      	lsls	r7, r3, #24
 8000eea:	f851 5b04 	ldr.w	r5, [r1], #4
 8000eee:	d402      	bmi.n	8000ef6 <_printf_i+0x186>
 8000ef0:	065f      	lsls	r7, r3, #25
 8000ef2:	bf48      	it	mi
 8000ef4:	b2ad      	uxthmi	r5, r5
 8000ef6:	6031      	str	r1, [r6, #0]
 8000ef8:	07d9      	lsls	r1, r3, #31
 8000efa:	bf44      	itt	mi
 8000efc:	f043 0320 	orrmi.w	r3, r3, #32
 8000f00:	6023      	strmi	r3, [r4, #0]
 8000f02:	b11d      	cbz	r5, 8000f0c <_printf_i+0x19c>
 8000f04:	2310      	movs	r3, #16
 8000f06:	e7ad      	b.n	8000e64 <_printf_i+0xf4>
 8000f08:	4826      	ldr	r0, [pc, #152]	@ (8000fa4 <_printf_i+0x234>)
 8000f0a:	e7e9      	b.n	8000ee0 <_printf_i+0x170>
 8000f0c:	6823      	ldr	r3, [r4, #0]
 8000f0e:	f023 0320 	bic.w	r3, r3, #32
 8000f12:	6023      	str	r3, [r4, #0]
 8000f14:	e7f6      	b.n	8000f04 <_printf_i+0x194>
 8000f16:	4616      	mov	r6, r2
 8000f18:	e7bd      	b.n	8000e96 <_printf_i+0x126>
 8000f1a:	6833      	ldr	r3, [r6, #0]
 8000f1c:	6825      	ldr	r5, [r4, #0]
 8000f1e:	6961      	ldr	r1, [r4, #20]
 8000f20:	1d18      	adds	r0, r3, #4
 8000f22:	6030      	str	r0, [r6, #0]
 8000f24:	062e      	lsls	r6, r5, #24
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	d501      	bpl.n	8000f2e <_printf_i+0x1be>
 8000f2a:	6019      	str	r1, [r3, #0]
 8000f2c:	e002      	b.n	8000f34 <_printf_i+0x1c4>
 8000f2e:	0668      	lsls	r0, r5, #25
 8000f30:	d5fb      	bpl.n	8000f2a <_printf_i+0x1ba>
 8000f32:	8019      	strh	r1, [r3, #0]
 8000f34:	2300      	movs	r3, #0
 8000f36:	6123      	str	r3, [r4, #16]
 8000f38:	4616      	mov	r6, r2
 8000f3a:	e7bc      	b.n	8000eb6 <_printf_i+0x146>
 8000f3c:	6833      	ldr	r3, [r6, #0]
 8000f3e:	1d1a      	adds	r2, r3, #4
 8000f40:	6032      	str	r2, [r6, #0]
 8000f42:	681e      	ldr	r6, [r3, #0]
 8000f44:	6862      	ldr	r2, [r4, #4]
 8000f46:	2100      	movs	r1, #0
 8000f48:	4630      	mov	r0, r6
 8000f4a:	f7ff f941 	bl	80001d0 <memchr>
 8000f4e:	b108      	cbz	r0, 8000f54 <_printf_i+0x1e4>
 8000f50:	1b80      	subs	r0, r0, r6
 8000f52:	6060      	str	r0, [r4, #4]
 8000f54:	6863      	ldr	r3, [r4, #4]
 8000f56:	6123      	str	r3, [r4, #16]
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f5e:	e7aa      	b.n	8000eb6 <_printf_i+0x146>
 8000f60:	6923      	ldr	r3, [r4, #16]
 8000f62:	4632      	mov	r2, r6
 8000f64:	4649      	mov	r1, r9
 8000f66:	4640      	mov	r0, r8
 8000f68:	47d0      	blx	sl
 8000f6a:	3001      	adds	r0, #1
 8000f6c:	d0ad      	beq.n	8000eca <_printf_i+0x15a>
 8000f6e:	6823      	ldr	r3, [r4, #0]
 8000f70:	079b      	lsls	r3, r3, #30
 8000f72:	d413      	bmi.n	8000f9c <_printf_i+0x22c>
 8000f74:	68e0      	ldr	r0, [r4, #12]
 8000f76:	9b03      	ldr	r3, [sp, #12]
 8000f78:	4298      	cmp	r0, r3
 8000f7a:	bfb8      	it	lt
 8000f7c:	4618      	movlt	r0, r3
 8000f7e:	e7a6      	b.n	8000ece <_printf_i+0x15e>
 8000f80:	2301      	movs	r3, #1
 8000f82:	4632      	mov	r2, r6
 8000f84:	4649      	mov	r1, r9
 8000f86:	4640      	mov	r0, r8
 8000f88:	47d0      	blx	sl
 8000f8a:	3001      	adds	r0, #1
 8000f8c:	d09d      	beq.n	8000eca <_printf_i+0x15a>
 8000f8e:	3501      	adds	r5, #1
 8000f90:	68e3      	ldr	r3, [r4, #12]
 8000f92:	9903      	ldr	r1, [sp, #12]
 8000f94:	1a5b      	subs	r3, r3, r1
 8000f96:	42ab      	cmp	r3, r5
 8000f98:	dcf2      	bgt.n	8000f80 <_printf_i+0x210>
 8000f9a:	e7eb      	b.n	8000f74 <_printf_i+0x204>
 8000f9c:	2500      	movs	r5, #0
 8000f9e:	f104 0619 	add.w	r6, r4, #25
 8000fa2:	e7f5      	b.n	8000f90 <_printf_i+0x220>
 8000fa4:	080015c2 	.word	0x080015c2
 8000fa8:	080015d3 	.word	0x080015d3

08000fac <__sflush_r>:
 8000fac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fb4:	0716      	lsls	r6, r2, #28
 8000fb6:	4605      	mov	r5, r0
 8000fb8:	460c      	mov	r4, r1
 8000fba:	d454      	bmi.n	8001066 <__sflush_r+0xba>
 8000fbc:	684b      	ldr	r3, [r1, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	dc02      	bgt.n	8000fc8 <__sflush_r+0x1c>
 8000fc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	dd48      	ble.n	800105a <__sflush_r+0xae>
 8000fc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000fca:	2e00      	cmp	r6, #0
 8000fcc:	d045      	beq.n	800105a <__sflush_r+0xae>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000fd4:	682f      	ldr	r7, [r5, #0]
 8000fd6:	6a21      	ldr	r1, [r4, #32]
 8000fd8:	602b      	str	r3, [r5, #0]
 8000fda:	d030      	beq.n	800103e <__sflush_r+0x92>
 8000fdc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000fde:	89a3      	ldrh	r3, [r4, #12]
 8000fe0:	0759      	lsls	r1, r3, #29
 8000fe2:	d505      	bpl.n	8000ff0 <__sflush_r+0x44>
 8000fe4:	6863      	ldr	r3, [r4, #4]
 8000fe6:	1ad2      	subs	r2, r2, r3
 8000fe8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000fea:	b10b      	cbz	r3, 8000ff0 <__sflush_r+0x44>
 8000fec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000fee:	1ad2      	subs	r2, r2, r3
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000ff4:	6a21      	ldr	r1, [r4, #32]
 8000ff6:	4628      	mov	r0, r5
 8000ff8:	47b0      	blx	r6
 8000ffa:	1c43      	adds	r3, r0, #1
 8000ffc:	89a3      	ldrh	r3, [r4, #12]
 8000ffe:	d106      	bne.n	800100e <__sflush_r+0x62>
 8001000:	6829      	ldr	r1, [r5, #0]
 8001002:	291d      	cmp	r1, #29
 8001004:	d82b      	bhi.n	800105e <__sflush_r+0xb2>
 8001006:	4a2a      	ldr	r2, [pc, #168]	@ (80010b0 <__sflush_r+0x104>)
 8001008:	40ca      	lsrs	r2, r1
 800100a:	07d6      	lsls	r6, r2, #31
 800100c:	d527      	bpl.n	800105e <__sflush_r+0xb2>
 800100e:	2200      	movs	r2, #0
 8001010:	6062      	str	r2, [r4, #4]
 8001012:	04d9      	lsls	r1, r3, #19
 8001014:	6922      	ldr	r2, [r4, #16]
 8001016:	6022      	str	r2, [r4, #0]
 8001018:	d504      	bpl.n	8001024 <__sflush_r+0x78>
 800101a:	1c42      	adds	r2, r0, #1
 800101c:	d101      	bne.n	8001022 <__sflush_r+0x76>
 800101e:	682b      	ldr	r3, [r5, #0]
 8001020:	b903      	cbnz	r3, 8001024 <__sflush_r+0x78>
 8001022:	6560      	str	r0, [r4, #84]	@ 0x54
 8001024:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001026:	602f      	str	r7, [r5, #0]
 8001028:	b1b9      	cbz	r1, 800105a <__sflush_r+0xae>
 800102a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800102e:	4299      	cmp	r1, r3
 8001030:	d002      	beq.n	8001038 <__sflush_r+0x8c>
 8001032:	4628      	mov	r0, r5
 8001034:	f000 fa24 	bl	8001480 <_free_r>
 8001038:	2300      	movs	r3, #0
 800103a:	6363      	str	r3, [r4, #52]	@ 0x34
 800103c:	e00d      	b.n	800105a <__sflush_r+0xae>
 800103e:	2301      	movs	r3, #1
 8001040:	4628      	mov	r0, r5
 8001042:	47b0      	blx	r6
 8001044:	4602      	mov	r2, r0
 8001046:	1c50      	adds	r0, r2, #1
 8001048:	d1c9      	bne.n	8000fde <__sflush_r+0x32>
 800104a:	682b      	ldr	r3, [r5, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0c6      	beq.n	8000fde <__sflush_r+0x32>
 8001050:	2b1d      	cmp	r3, #29
 8001052:	d001      	beq.n	8001058 <__sflush_r+0xac>
 8001054:	2b16      	cmp	r3, #22
 8001056:	d11e      	bne.n	8001096 <__sflush_r+0xea>
 8001058:	602f      	str	r7, [r5, #0]
 800105a:	2000      	movs	r0, #0
 800105c:	e022      	b.n	80010a4 <__sflush_r+0xf8>
 800105e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001062:	b21b      	sxth	r3, r3
 8001064:	e01b      	b.n	800109e <__sflush_r+0xf2>
 8001066:	690f      	ldr	r7, [r1, #16]
 8001068:	2f00      	cmp	r7, #0
 800106a:	d0f6      	beq.n	800105a <__sflush_r+0xae>
 800106c:	0793      	lsls	r3, r2, #30
 800106e:	680e      	ldr	r6, [r1, #0]
 8001070:	bf08      	it	eq
 8001072:	694b      	ldreq	r3, [r1, #20]
 8001074:	600f      	str	r7, [r1, #0]
 8001076:	bf18      	it	ne
 8001078:	2300      	movne	r3, #0
 800107a:	eba6 0807 	sub.w	r8, r6, r7
 800107e:	608b      	str	r3, [r1, #8]
 8001080:	f1b8 0f00 	cmp.w	r8, #0
 8001084:	dde9      	ble.n	800105a <__sflush_r+0xae>
 8001086:	6a21      	ldr	r1, [r4, #32]
 8001088:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800108a:	4643      	mov	r3, r8
 800108c:	463a      	mov	r2, r7
 800108e:	4628      	mov	r0, r5
 8001090:	47b0      	blx	r6
 8001092:	2800      	cmp	r0, #0
 8001094:	dc08      	bgt.n	80010a8 <__sflush_r+0xfc>
 8001096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800109a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800109e:	81a3      	strh	r3, [r4, #12]
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010a8:	4407      	add	r7, r0
 80010aa:	eba8 0800 	sub.w	r8, r8, r0
 80010ae:	e7e7      	b.n	8001080 <__sflush_r+0xd4>
 80010b0:	20400001 	.word	0x20400001

080010b4 <_fflush_r>:
 80010b4:	b538      	push	{r3, r4, r5, lr}
 80010b6:	690b      	ldr	r3, [r1, #16]
 80010b8:	4605      	mov	r5, r0
 80010ba:	460c      	mov	r4, r1
 80010bc:	b913      	cbnz	r3, 80010c4 <_fflush_r+0x10>
 80010be:	2500      	movs	r5, #0
 80010c0:	4628      	mov	r0, r5
 80010c2:	bd38      	pop	{r3, r4, r5, pc}
 80010c4:	b118      	cbz	r0, 80010ce <_fflush_r+0x1a>
 80010c6:	6a03      	ldr	r3, [r0, #32]
 80010c8:	b90b      	cbnz	r3, 80010ce <_fflush_r+0x1a>
 80010ca:	f7ff fb25 	bl	8000718 <__sinit>
 80010ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0f3      	beq.n	80010be <_fflush_r+0xa>
 80010d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80010d8:	07d0      	lsls	r0, r2, #31
 80010da:	d404      	bmi.n	80010e6 <_fflush_r+0x32>
 80010dc:	0599      	lsls	r1, r3, #22
 80010de:	d402      	bmi.n	80010e6 <_fflush_r+0x32>
 80010e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80010e2:	f7ff fbf2 	bl	80008ca <__retarget_lock_acquire_recursive>
 80010e6:	4628      	mov	r0, r5
 80010e8:	4621      	mov	r1, r4
 80010ea:	f7ff ff5f 	bl	8000fac <__sflush_r>
 80010ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80010f0:	07da      	lsls	r2, r3, #31
 80010f2:	4605      	mov	r5, r0
 80010f4:	d4e4      	bmi.n	80010c0 <_fflush_r+0xc>
 80010f6:	89a3      	ldrh	r3, [r4, #12]
 80010f8:	059b      	lsls	r3, r3, #22
 80010fa:	d4e1      	bmi.n	80010c0 <_fflush_r+0xc>
 80010fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80010fe:	f7ff fbe5 	bl	80008cc <__retarget_lock_release_recursive>
 8001102:	e7dd      	b.n	80010c0 <_fflush_r+0xc>

08001104 <__malloc_lock>:
 8001104:	4801      	ldr	r0, [pc, #4]	@ (800110c <__malloc_lock+0x8>)
 8001106:	f7ff bbe0 	b.w	80008ca <__retarget_lock_acquire_recursive>
 800110a:	bf00      	nop
 800110c:	200001b8 	.word	0x200001b8

08001110 <__malloc_unlock>:
 8001110:	4801      	ldr	r0, [pc, #4]	@ (8001118 <__malloc_unlock+0x8>)
 8001112:	f7ff bbdb 	b.w	80008cc <__retarget_lock_release_recursive>
 8001116:	bf00      	nop
 8001118:	200001b8 	.word	0x200001b8

0800111c <__sread>:
 800111c:	b510      	push	{r4, lr}
 800111e:	460c      	mov	r4, r1
 8001120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001124:	f000 f956 	bl	80013d4 <_read_r>
 8001128:	2800      	cmp	r0, #0
 800112a:	bfab      	itete	ge
 800112c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800112e:	89a3      	ldrhlt	r3, [r4, #12]
 8001130:	181b      	addge	r3, r3, r0
 8001132:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001136:	bfac      	ite	ge
 8001138:	6563      	strge	r3, [r4, #84]	@ 0x54
 800113a:	81a3      	strhlt	r3, [r4, #12]
 800113c:	bd10      	pop	{r4, pc}

0800113e <__swrite>:
 800113e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001142:	461f      	mov	r7, r3
 8001144:	898b      	ldrh	r3, [r1, #12]
 8001146:	05db      	lsls	r3, r3, #23
 8001148:	4605      	mov	r5, r0
 800114a:	460c      	mov	r4, r1
 800114c:	4616      	mov	r6, r2
 800114e:	d505      	bpl.n	800115c <__swrite+0x1e>
 8001150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001154:	2302      	movs	r3, #2
 8001156:	2200      	movs	r2, #0
 8001158:	f000 f92a 	bl	80013b0 <_lseek_r>
 800115c:	89a3      	ldrh	r3, [r4, #12]
 800115e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001162:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001166:	81a3      	strh	r3, [r4, #12]
 8001168:	4632      	mov	r2, r6
 800116a:	463b      	mov	r3, r7
 800116c:	4628      	mov	r0, r5
 800116e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001172:	f000 b951 	b.w	8001418 <_write_r>

08001176 <__sseek>:
 8001176:	b510      	push	{r4, lr}
 8001178:	460c      	mov	r4, r1
 800117a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800117e:	f000 f917 	bl	80013b0 <_lseek_r>
 8001182:	1c43      	adds	r3, r0, #1
 8001184:	89a3      	ldrh	r3, [r4, #12]
 8001186:	bf15      	itete	ne
 8001188:	6560      	strne	r0, [r4, #84]	@ 0x54
 800118a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800118e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001192:	81a3      	strheq	r3, [r4, #12]
 8001194:	bf18      	it	ne
 8001196:	81a3      	strhne	r3, [r4, #12]
 8001198:	bd10      	pop	{r4, pc}

0800119a <__sclose>:
 800119a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800119e:	f000 b94d 	b.w	800143c <_close_r>

080011a2 <__swbuf_r>:
 80011a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a4:	460e      	mov	r6, r1
 80011a6:	4614      	mov	r4, r2
 80011a8:	4605      	mov	r5, r0
 80011aa:	b118      	cbz	r0, 80011b4 <__swbuf_r+0x12>
 80011ac:	6a03      	ldr	r3, [r0, #32]
 80011ae:	b90b      	cbnz	r3, 80011b4 <__swbuf_r+0x12>
 80011b0:	f7ff fab2 	bl	8000718 <__sinit>
 80011b4:	69a3      	ldr	r3, [r4, #24]
 80011b6:	60a3      	str	r3, [r4, #8]
 80011b8:	89a3      	ldrh	r3, [r4, #12]
 80011ba:	071a      	lsls	r2, r3, #28
 80011bc:	d501      	bpl.n	80011c2 <__swbuf_r+0x20>
 80011be:	6923      	ldr	r3, [r4, #16]
 80011c0:	b943      	cbnz	r3, 80011d4 <__swbuf_r+0x32>
 80011c2:	4621      	mov	r1, r4
 80011c4:	4628      	mov	r0, r5
 80011c6:	f000 f82b 	bl	8001220 <__swsetup_r>
 80011ca:	b118      	cbz	r0, 80011d4 <__swbuf_r+0x32>
 80011cc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80011d0:	4638      	mov	r0, r7
 80011d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011d4:	6823      	ldr	r3, [r4, #0]
 80011d6:	6922      	ldr	r2, [r4, #16]
 80011d8:	1a98      	subs	r0, r3, r2
 80011da:	6963      	ldr	r3, [r4, #20]
 80011dc:	b2f6      	uxtb	r6, r6
 80011de:	4283      	cmp	r3, r0
 80011e0:	4637      	mov	r7, r6
 80011e2:	dc05      	bgt.n	80011f0 <__swbuf_r+0x4e>
 80011e4:	4621      	mov	r1, r4
 80011e6:	4628      	mov	r0, r5
 80011e8:	f7ff ff64 	bl	80010b4 <_fflush_r>
 80011ec:	2800      	cmp	r0, #0
 80011ee:	d1ed      	bne.n	80011cc <__swbuf_r+0x2a>
 80011f0:	68a3      	ldr	r3, [r4, #8]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	60a3      	str	r3, [r4, #8]
 80011f6:	6823      	ldr	r3, [r4, #0]
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	6022      	str	r2, [r4, #0]
 80011fc:	701e      	strb	r6, [r3, #0]
 80011fe:	6962      	ldr	r2, [r4, #20]
 8001200:	1c43      	adds	r3, r0, #1
 8001202:	429a      	cmp	r2, r3
 8001204:	d004      	beq.n	8001210 <__swbuf_r+0x6e>
 8001206:	89a3      	ldrh	r3, [r4, #12]
 8001208:	07db      	lsls	r3, r3, #31
 800120a:	d5e1      	bpl.n	80011d0 <__swbuf_r+0x2e>
 800120c:	2e0a      	cmp	r6, #10
 800120e:	d1df      	bne.n	80011d0 <__swbuf_r+0x2e>
 8001210:	4621      	mov	r1, r4
 8001212:	4628      	mov	r0, r5
 8001214:	f7ff ff4e 	bl	80010b4 <_fflush_r>
 8001218:	2800      	cmp	r0, #0
 800121a:	d0d9      	beq.n	80011d0 <__swbuf_r+0x2e>
 800121c:	e7d6      	b.n	80011cc <__swbuf_r+0x2a>
	...

08001220 <__swsetup_r>:
 8001220:	b538      	push	{r3, r4, r5, lr}
 8001222:	4b29      	ldr	r3, [pc, #164]	@ (80012c8 <__swsetup_r+0xa8>)
 8001224:	4605      	mov	r5, r0
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	460c      	mov	r4, r1
 800122a:	b118      	cbz	r0, 8001234 <__swsetup_r+0x14>
 800122c:	6a03      	ldr	r3, [r0, #32]
 800122e:	b90b      	cbnz	r3, 8001234 <__swsetup_r+0x14>
 8001230:	f7ff fa72 	bl	8000718 <__sinit>
 8001234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001238:	0719      	lsls	r1, r3, #28
 800123a:	d422      	bmi.n	8001282 <__swsetup_r+0x62>
 800123c:	06da      	lsls	r2, r3, #27
 800123e:	d407      	bmi.n	8001250 <__swsetup_r+0x30>
 8001240:	2209      	movs	r2, #9
 8001242:	602a      	str	r2, [r5, #0]
 8001244:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001248:	81a3      	strh	r3, [r4, #12]
 800124a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800124e:	e033      	b.n	80012b8 <__swsetup_r+0x98>
 8001250:	0758      	lsls	r0, r3, #29
 8001252:	d512      	bpl.n	800127a <__swsetup_r+0x5a>
 8001254:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001256:	b141      	cbz	r1, 800126a <__swsetup_r+0x4a>
 8001258:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800125c:	4299      	cmp	r1, r3
 800125e:	d002      	beq.n	8001266 <__swsetup_r+0x46>
 8001260:	4628      	mov	r0, r5
 8001262:	f000 f90d 	bl	8001480 <_free_r>
 8001266:	2300      	movs	r3, #0
 8001268:	6363      	str	r3, [r4, #52]	@ 0x34
 800126a:	89a3      	ldrh	r3, [r4, #12]
 800126c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001270:	81a3      	strh	r3, [r4, #12]
 8001272:	2300      	movs	r3, #0
 8001274:	6063      	str	r3, [r4, #4]
 8001276:	6923      	ldr	r3, [r4, #16]
 8001278:	6023      	str	r3, [r4, #0]
 800127a:	89a3      	ldrh	r3, [r4, #12]
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	81a3      	strh	r3, [r4, #12]
 8001282:	6923      	ldr	r3, [r4, #16]
 8001284:	b94b      	cbnz	r3, 800129a <__swsetup_r+0x7a>
 8001286:	89a3      	ldrh	r3, [r4, #12]
 8001288:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800128c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001290:	d003      	beq.n	800129a <__swsetup_r+0x7a>
 8001292:	4621      	mov	r1, r4
 8001294:	4628      	mov	r0, r5
 8001296:	f000 f83f 	bl	8001318 <__smakebuf_r>
 800129a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800129e:	f013 0201 	ands.w	r2, r3, #1
 80012a2:	d00a      	beq.n	80012ba <__swsetup_r+0x9a>
 80012a4:	2200      	movs	r2, #0
 80012a6:	60a2      	str	r2, [r4, #8]
 80012a8:	6962      	ldr	r2, [r4, #20]
 80012aa:	4252      	negs	r2, r2
 80012ac:	61a2      	str	r2, [r4, #24]
 80012ae:	6922      	ldr	r2, [r4, #16]
 80012b0:	b942      	cbnz	r2, 80012c4 <__swsetup_r+0xa4>
 80012b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80012b6:	d1c5      	bne.n	8001244 <__swsetup_r+0x24>
 80012b8:	bd38      	pop	{r3, r4, r5, pc}
 80012ba:	0799      	lsls	r1, r3, #30
 80012bc:	bf58      	it	pl
 80012be:	6962      	ldrpl	r2, [r4, #20]
 80012c0:	60a2      	str	r2, [r4, #8]
 80012c2:	e7f4      	b.n	80012ae <__swsetup_r+0x8e>
 80012c4:	2000      	movs	r0, #0
 80012c6:	e7f7      	b.n	80012b8 <__swsetup_r+0x98>
 80012c8:	2000000c 	.word	0x2000000c

080012cc <__swhatbuf_r>:
 80012cc:	b570      	push	{r4, r5, r6, lr}
 80012ce:	460c      	mov	r4, r1
 80012d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012d4:	2900      	cmp	r1, #0
 80012d6:	b096      	sub	sp, #88	@ 0x58
 80012d8:	4615      	mov	r5, r2
 80012da:	461e      	mov	r6, r3
 80012dc:	da0d      	bge.n	80012fa <__swhatbuf_r+0x2e>
 80012de:	89a3      	ldrh	r3, [r4, #12]
 80012e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80012e4:	f04f 0100 	mov.w	r1, #0
 80012e8:	bf14      	ite	ne
 80012ea:	2340      	movne	r3, #64	@ 0x40
 80012ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80012f0:	2000      	movs	r0, #0
 80012f2:	6031      	str	r1, [r6, #0]
 80012f4:	602b      	str	r3, [r5, #0]
 80012f6:	b016      	add	sp, #88	@ 0x58
 80012f8:	bd70      	pop	{r4, r5, r6, pc}
 80012fa:	466a      	mov	r2, sp
 80012fc:	f000 f8ae 	bl	800145c <_fstat_r>
 8001300:	2800      	cmp	r0, #0
 8001302:	dbec      	blt.n	80012de <__swhatbuf_r+0x12>
 8001304:	9901      	ldr	r1, [sp, #4]
 8001306:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800130a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800130e:	4259      	negs	r1, r3
 8001310:	4159      	adcs	r1, r3
 8001312:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001316:	e7eb      	b.n	80012f0 <__swhatbuf_r+0x24>

08001318 <__smakebuf_r>:
 8001318:	898b      	ldrh	r3, [r1, #12]
 800131a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800131c:	079d      	lsls	r5, r3, #30
 800131e:	4606      	mov	r6, r0
 8001320:	460c      	mov	r4, r1
 8001322:	d507      	bpl.n	8001334 <__smakebuf_r+0x1c>
 8001324:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001328:	6023      	str	r3, [r4, #0]
 800132a:	6123      	str	r3, [r4, #16]
 800132c:	2301      	movs	r3, #1
 800132e:	6163      	str	r3, [r4, #20]
 8001330:	b003      	add	sp, #12
 8001332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001334:	ab01      	add	r3, sp, #4
 8001336:	466a      	mov	r2, sp
 8001338:	f7ff ffc8 	bl	80012cc <__swhatbuf_r>
 800133c:	9f00      	ldr	r7, [sp, #0]
 800133e:	4605      	mov	r5, r0
 8001340:	4639      	mov	r1, r7
 8001342:	4630      	mov	r0, r6
 8001344:	f7ff fc26 	bl	8000b94 <_malloc_r>
 8001348:	b948      	cbnz	r0, 800135e <__smakebuf_r+0x46>
 800134a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800134e:	059a      	lsls	r2, r3, #22
 8001350:	d4ee      	bmi.n	8001330 <__smakebuf_r+0x18>
 8001352:	f023 0303 	bic.w	r3, r3, #3
 8001356:	f043 0302 	orr.w	r3, r3, #2
 800135a:	81a3      	strh	r3, [r4, #12]
 800135c:	e7e2      	b.n	8001324 <__smakebuf_r+0xc>
 800135e:	89a3      	ldrh	r3, [r4, #12]
 8001360:	6020      	str	r0, [r4, #0]
 8001362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001366:	81a3      	strh	r3, [r4, #12]
 8001368:	9b01      	ldr	r3, [sp, #4]
 800136a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800136e:	b15b      	cbz	r3, 8001388 <__smakebuf_r+0x70>
 8001370:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001374:	4630      	mov	r0, r6
 8001376:	f000 f80b 	bl	8001390 <_isatty_r>
 800137a:	b128      	cbz	r0, 8001388 <__smakebuf_r+0x70>
 800137c:	89a3      	ldrh	r3, [r4, #12]
 800137e:	f023 0303 	bic.w	r3, r3, #3
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	81a3      	strh	r3, [r4, #12]
 8001388:	89a3      	ldrh	r3, [r4, #12]
 800138a:	431d      	orrs	r5, r3
 800138c:	81a5      	strh	r5, [r4, #12]
 800138e:	e7cf      	b.n	8001330 <__smakebuf_r+0x18>

08001390 <_isatty_r>:
 8001390:	b538      	push	{r3, r4, r5, lr}
 8001392:	4d06      	ldr	r5, [pc, #24]	@ (80013ac <_isatty_r+0x1c>)
 8001394:	2300      	movs	r3, #0
 8001396:	4604      	mov	r4, r0
 8001398:	4608      	mov	r0, r1
 800139a:	602b      	str	r3, [r5, #0]
 800139c:	f7ff f8b7 	bl	800050e <_isatty>
 80013a0:	1c43      	adds	r3, r0, #1
 80013a2:	d102      	bne.n	80013aa <_isatty_r+0x1a>
 80013a4:	682b      	ldr	r3, [r5, #0]
 80013a6:	b103      	cbz	r3, 80013aa <_isatty_r+0x1a>
 80013a8:	6023      	str	r3, [r4, #0]
 80013aa:	bd38      	pop	{r3, r4, r5, pc}
 80013ac:	200001c4 	.word	0x200001c4

080013b0 <_lseek_r>:
 80013b0:	b538      	push	{r3, r4, r5, lr}
 80013b2:	4d07      	ldr	r5, [pc, #28]	@ (80013d0 <_lseek_r+0x20>)
 80013b4:	4604      	mov	r4, r0
 80013b6:	4608      	mov	r0, r1
 80013b8:	4611      	mov	r1, r2
 80013ba:	2200      	movs	r2, #0
 80013bc:	602a      	str	r2, [r5, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	f7ff f8b0 	bl	8000524 <_lseek>
 80013c4:	1c43      	adds	r3, r0, #1
 80013c6:	d102      	bne.n	80013ce <_lseek_r+0x1e>
 80013c8:	682b      	ldr	r3, [r5, #0]
 80013ca:	b103      	cbz	r3, 80013ce <_lseek_r+0x1e>
 80013cc:	6023      	str	r3, [r4, #0]
 80013ce:	bd38      	pop	{r3, r4, r5, pc}
 80013d0:	200001c4 	.word	0x200001c4

080013d4 <_read_r>:
 80013d4:	b538      	push	{r3, r4, r5, lr}
 80013d6:	4d07      	ldr	r5, [pc, #28]	@ (80013f4 <_read_r+0x20>)
 80013d8:	4604      	mov	r4, r0
 80013da:	4608      	mov	r0, r1
 80013dc:	4611      	mov	r1, r2
 80013de:	2200      	movs	r2, #0
 80013e0:	602a      	str	r2, [r5, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	f7ff f83e 	bl	8000464 <_read>
 80013e8:	1c43      	adds	r3, r0, #1
 80013ea:	d102      	bne.n	80013f2 <_read_r+0x1e>
 80013ec:	682b      	ldr	r3, [r5, #0]
 80013ee:	b103      	cbz	r3, 80013f2 <_read_r+0x1e>
 80013f0:	6023      	str	r3, [r4, #0]
 80013f2:	bd38      	pop	{r3, r4, r5, pc}
 80013f4:	200001c4 	.word	0x200001c4

080013f8 <_sbrk_r>:
 80013f8:	b538      	push	{r3, r4, r5, lr}
 80013fa:	4d06      	ldr	r5, [pc, #24]	@ (8001414 <_sbrk_r+0x1c>)
 80013fc:	2300      	movs	r3, #0
 80013fe:	4604      	mov	r4, r0
 8001400:	4608      	mov	r0, r1
 8001402:	602b      	str	r3, [r5, #0]
 8001404:	f7ff f89c 	bl	8000540 <_sbrk>
 8001408:	1c43      	adds	r3, r0, #1
 800140a:	d102      	bne.n	8001412 <_sbrk_r+0x1a>
 800140c:	682b      	ldr	r3, [r5, #0]
 800140e:	b103      	cbz	r3, 8001412 <_sbrk_r+0x1a>
 8001410:	6023      	str	r3, [r4, #0]
 8001412:	bd38      	pop	{r3, r4, r5, pc}
 8001414:	200001c4 	.word	0x200001c4

08001418 <_write_r>:
 8001418:	b538      	push	{r3, r4, r5, lr}
 800141a:	4d07      	ldr	r5, [pc, #28]	@ (8001438 <_write_r+0x20>)
 800141c:	4604      	mov	r4, r0
 800141e:	4608      	mov	r0, r1
 8001420:	4611      	mov	r1, r2
 8001422:	2200      	movs	r2, #0
 8001424:	602a      	str	r2, [r5, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	f7ff f839 	bl	800049e <_write>
 800142c:	1c43      	adds	r3, r0, #1
 800142e:	d102      	bne.n	8001436 <_write_r+0x1e>
 8001430:	682b      	ldr	r3, [r5, #0]
 8001432:	b103      	cbz	r3, 8001436 <_write_r+0x1e>
 8001434:	6023      	str	r3, [r4, #0]
 8001436:	bd38      	pop	{r3, r4, r5, pc}
 8001438:	200001c4 	.word	0x200001c4

0800143c <_close_r>:
 800143c:	b538      	push	{r3, r4, r5, lr}
 800143e:	4d06      	ldr	r5, [pc, #24]	@ (8001458 <_close_r+0x1c>)
 8001440:	2300      	movs	r3, #0
 8001442:	4604      	mov	r4, r0
 8001444:	4608      	mov	r0, r1
 8001446:	602b      	str	r3, [r5, #0]
 8001448:	f7ff f845 	bl	80004d6 <_close>
 800144c:	1c43      	adds	r3, r0, #1
 800144e:	d102      	bne.n	8001456 <_close_r+0x1a>
 8001450:	682b      	ldr	r3, [r5, #0]
 8001452:	b103      	cbz	r3, 8001456 <_close_r+0x1a>
 8001454:	6023      	str	r3, [r4, #0]
 8001456:	bd38      	pop	{r3, r4, r5, pc}
 8001458:	200001c4 	.word	0x200001c4

0800145c <_fstat_r>:
 800145c:	b538      	push	{r3, r4, r5, lr}
 800145e:	4d07      	ldr	r5, [pc, #28]	@ (800147c <_fstat_r+0x20>)
 8001460:	2300      	movs	r3, #0
 8001462:	4604      	mov	r4, r0
 8001464:	4608      	mov	r0, r1
 8001466:	4611      	mov	r1, r2
 8001468:	602b      	str	r3, [r5, #0]
 800146a:	f7ff f840 	bl	80004ee <_fstat>
 800146e:	1c43      	adds	r3, r0, #1
 8001470:	d102      	bne.n	8001478 <_fstat_r+0x1c>
 8001472:	682b      	ldr	r3, [r5, #0]
 8001474:	b103      	cbz	r3, 8001478 <_fstat_r+0x1c>
 8001476:	6023      	str	r3, [r4, #0]
 8001478:	bd38      	pop	{r3, r4, r5, pc}
 800147a:	bf00      	nop
 800147c:	200001c4 	.word	0x200001c4

08001480 <_free_r>:
 8001480:	b538      	push	{r3, r4, r5, lr}
 8001482:	4605      	mov	r5, r0
 8001484:	2900      	cmp	r1, #0
 8001486:	d041      	beq.n	800150c <_free_r+0x8c>
 8001488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800148c:	1f0c      	subs	r4, r1, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	bfb8      	it	lt
 8001492:	18e4      	addlt	r4, r4, r3
 8001494:	f7ff fe36 	bl	8001104 <__malloc_lock>
 8001498:	4a1d      	ldr	r2, [pc, #116]	@ (8001510 <_free_r+0x90>)
 800149a:	6813      	ldr	r3, [r2, #0]
 800149c:	b933      	cbnz	r3, 80014ac <_free_r+0x2c>
 800149e:	6063      	str	r3, [r4, #4]
 80014a0:	6014      	str	r4, [r2, #0]
 80014a2:	4628      	mov	r0, r5
 80014a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014a8:	f7ff be32 	b.w	8001110 <__malloc_unlock>
 80014ac:	42a3      	cmp	r3, r4
 80014ae:	d908      	bls.n	80014c2 <_free_r+0x42>
 80014b0:	6820      	ldr	r0, [r4, #0]
 80014b2:	1821      	adds	r1, r4, r0
 80014b4:	428b      	cmp	r3, r1
 80014b6:	bf01      	itttt	eq
 80014b8:	6819      	ldreq	r1, [r3, #0]
 80014ba:	685b      	ldreq	r3, [r3, #4]
 80014bc:	1809      	addeq	r1, r1, r0
 80014be:	6021      	streq	r1, [r4, #0]
 80014c0:	e7ed      	b.n	800149e <_free_r+0x1e>
 80014c2:	461a      	mov	r2, r3
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	b10b      	cbz	r3, 80014cc <_free_r+0x4c>
 80014c8:	42a3      	cmp	r3, r4
 80014ca:	d9fa      	bls.n	80014c2 <_free_r+0x42>
 80014cc:	6811      	ldr	r1, [r2, #0]
 80014ce:	1850      	adds	r0, r2, r1
 80014d0:	42a0      	cmp	r0, r4
 80014d2:	d10b      	bne.n	80014ec <_free_r+0x6c>
 80014d4:	6820      	ldr	r0, [r4, #0]
 80014d6:	4401      	add	r1, r0
 80014d8:	1850      	adds	r0, r2, r1
 80014da:	4283      	cmp	r3, r0
 80014dc:	6011      	str	r1, [r2, #0]
 80014de:	d1e0      	bne.n	80014a2 <_free_r+0x22>
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	6053      	str	r3, [r2, #4]
 80014e6:	4408      	add	r0, r1
 80014e8:	6010      	str	r0, [r2, #0]
 80014ea:	e7da      	b.n	80014a2 <_free_r+0x22>
 80014ec:	d902      	bls.n	80014f4 <_free_r+0x74>
 80014ee:	230c      	movs	r3, #12
 80014f0:	602b      	str	r3, [r5, #0]
 80014f2:	e7d6      	b.n	80014a2 <_free_r+0x22>
 80014f4:	6820      	ldr	r0, [r4, #0]
 80014f6:	1821      	adds	r1, r4, r0
 80014f8:	428b      	cmp	r3, r1
 80014fa:	bf04      	itt	eq
 80014fc:	6819      	ldreq	r1, [r3, #0]
 80014fe:	685b      	ldreq	r3, [r3, #4]
 8001500:	6063      	str	r3, [r4, #4]
 8001502:	bf04      	itt	eq
 8001504:	1809      	addeq	r1, r1, r0
 8001506:	6021      	streq	r1, [r4, #0]
 8001508:	6054      	str	r4, [r2, #4]
 800150a:	e7ca      	b.n	80014a2 <_free_r+0x22>
 800150c:	bd38      	pop	{r3, r4, r5, pc}
 800150e:	bf00      	nop
 8001510:	200001c0 	.word	0x200001c0

08001514 <_init>:
 8001514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001516:	bf00      	nop
 8001518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800151a:	bc08      	pop	{r3}
 800151c:	469e      	mov	lr, r3
 800151e:	4770      	bx	lr

08001520 <_fini>:
 8001520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001522:	bf00      	nop
 8001524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001526:	bc08      	pop	{r3}
 8001528:	469e      	mov	lr, r3
 800152a:	4770      	bx	lr
