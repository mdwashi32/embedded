
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021c8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002350  08002350  00003350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023b4  080023b4  0000407c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080023b4  080023b4  0000407c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080023b4  080023b4  0000407c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023b4  080023b4  000033b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080023b8  080023b8  000033b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080023bc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000407c  2**0
                  CONTENTS
 10 .bss          000001ac  2000007c  2000007c  0000407c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000228  20000228  0000407c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002bec  00000000  00000000  000040ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c44  00000000  00000000  00006c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003b0  00000000  00000000  000078e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002ad  00000000  00000000  00007c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003fcf  00000000  00000000  00007f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000042bd  00000000  00000000  0000bf0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000d723  00000000  00000000  000101c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001d8ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001418  00000000  00000000  0001d930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  0001ed48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002338 	.word	0x08002338

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08002338 	.word	0x08002338

080001c8 <init_systick_timer>:
#include "lcd.h"

#define  SYSTICK_TIM_CLK 16000000UL

void init_systick_timer(uint32_t tick_hz) //systick timer interrupt every second
{
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014; //systick timer registers
 80001d0:	4b15      	ldr	r3, [pc, #84]	@ (8000228 <init_systick_timer+0x60>)
 80001d2:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80001d4:	4b15      	ldr	r3, [pc, #84]	@ (800022c <init_systick_timer+0x64>)
 80001d6:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 80001d8:	4a15      	ldr	r2, [pc, #84]	@ (8000230 <init_systick_timer+0x68>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80001e0:	3b01      	subs	r3, #1
 80001e2:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 80001e4:	697b      	ldr	r3, [r7, #20]
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 80001ea:	697b      	ldr	r3, [r7, #20]
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	431a      	orrs	r2, r3
 80001f2:	697b      	ldr	r3, [r7, #20]
 80001f4:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 80001f6:	693b      	ldr	r3, [r7, #16]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f043 0202 	orr.w	r2, r3, #2
 80001fe:	693b      	ldr	r3, [r7, #16]
 8000200:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 8000202:	693b      	ldr	r3, [r7, #16]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f043 0204 	orr.w	r2, r3, #4
 800020a:	693b      	ldr	r3, [r7, #16]
 800020c:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 800020e:	693b      	ldr	r3, [r7, #16]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f043 0201 	orr.w	r2, r3, #1
 8000216:	693b      	ldr	r3, [r7, #16]
 8000218:	601a      	str	r2, [r3, #0]

}
 800021a:	bf00      	nop
 800021c:	371c      	adds	r7, #28
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	e000e014 	.word	0xe000e014
 800022c:	e000e010 	.word	0xe000e010
 8000230:	00f42400 	.word	0x00f42400

08000234 <get_day_of_week>:

char* get_day_of_week(uint8_t day)
{
 8000234:	b4b0      	push	{r4, r5, r7}
 8000236:	b08b      	sub	sp, #44	@ 0x2c
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	char* days[] = {"SUN","MON","TUES","WED","THURS","FRI","SAT"};
 800023e:	4b0b      	ldr	r3, [pc, #44]	@ (800026c <get_day_of_week+0x38>)
 8000240:	f107 040c 	add.w	r4, r7, #12
 8000244:	461d      	mov	r5, r3
 8000246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800024a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800024e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[day - 1];
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	3b01      	subs	r3, #1
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	3328      	adds	r3, #40	@ 0x28
 800025a:	443b      	add	r3, r7
 800025c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8000260:	4618      	mov	r0, r3
 8000262:	372c      	adds	r7, #44	@ 0x2c
 8000264:	46bd      	mov	sp, r7
 8000266:	bcb0      	pop	{r4, r5, r7}
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	08002374 	.word	0x08002374

08000270 <number_to_string>:

void number_to_string(uint8_t num, char* buffer)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	6039      	str	r1, [r7, #0]
 800027a:	71fb      	strb	r3, [r7, #7]
	if(num < 10)
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	2b09      	cmp	r3, #9
 8000280:	d809      	bhi.n	8000296 <number_to_string+0x26>
	{
		buffer[0] = '0';
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	2230      	movs	r2, #48	@ 0x30
 8000286:	701a      	strb	r2, [r3, #0]
		buffer[1] = num + 48; // ascii value of a number is number + 48
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	3301      	adds	r3, #1
 800028c:	79fa      	ldrb	r2, [r7, #7]
 800028e:	3230      	adds	r2, #48	@ 0x30
 8000290:	b2d2      	uxtb	r2, r2
 8000292:	701a      	strb	r2, [r3, #0]
	else if (num >= 10 && num < 99)
	{
		buffer[0] = (num / 10) + 48;
		buffer[1] = (num % 10 ) + 48;
	}
}
 8000294:	e01f      	b.n	80002d6 <number_to_string+0x66>
	else if (num >= 10 && num < 99)
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	2b09      	cmp	r3, #9
 800029a:	d91c      	bls.n	80002d6 <number_to_string+0x66>
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	2b62      	cmp	r3, #98	@ 0x62
 80002a0:	d819      	bhi.n	80002d6 <number_to_string+0x66>
		buffer[0] = (num / 10) + 48;
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	4a0f      	ldr	r2, [pc, #60]	@ (80002e4 <number_to_string+0x74>)
 80002a6:	fba2 2303 	umull	r2, r3, r2, r3
 80002aa:	08db      	lsrs	r3, r3, #3
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	3330      	adds	r3, #48	@ 0x30
 80002b0:	b2da      	uxtb	r2, r3
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	701a      	strb	r2, [r3, #0]
		buffer[1] = (num % 10 ) + 48;
 80002b6:	79fa      	ldrb	r2, [r7, #7]
 80002b8:	4b0a      	ldr	r3, [pc, #40]	@ (80002e4 <number_to_string+0x74>)
 80002ba:	fba3 1302 	umull	r1, r3, r3, r2
 80002be:	08d9      	lsrs	r1, r3, #3
 80002c0:	460b      	mov	r3, r1
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	440b      	add	r3, r1
 80002c6:	005b      	lsls	r3, r3, #1
 80002c8:	1ad3      	subs	r3, r2, r3
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	3301      	adds	r3, #1
 80002d0:	3230      	adds	r2, #48	@ 0x30
 80002d2:	b2d2      	uxtb	r2, r2
 80002d4:	701a      	strb	r2, [r3, #0]
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	cccccccd 	.word	0xcccccccd

080002e8 <time_to_string>:

// format: hh:mm:ss
char* time_to_string(RTC_Time_t *rtc_time)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	static char buffer[9];

	buffer[2] = ':';
 80002f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000330 <time_to_string+0x48>)
 80002f2:	223a      	movs	r2, #58	@ 0x3a
 80002f4:	709a      	strb	r2, [r3, #2]
	buffer[5] = ':';
 80002f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000330 <time_to_string+0x48>)
 80002f8:	223a      	movs	r2, #58	@ 0x3a
 80002fa:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours,buffer);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	789b      	ldrb	r3, [r3, #2]
 8000300:	490b      	ldr	r1, [pc, #44]	@ (8000330 <time_to_string+0x48>)
 8000302:	4618      	mov	r0, r3
 8000304:	f7ff ffb4 	bl	8000270 <number_to_string>
	number_to_string(rtc_time->minutes,&buffer[3]);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	785b      	ldrb	r3, [r3, #1]
 800030c:	4909      	ldr	r1, [pc, #36]	@ (8000334 <time_to_string+0x4c>)
 800030e:	4618      	mov	r0, r3
 8000310:	f7ff ffae 	bl	8000270 <number_to_string>
	number_to_string(rtc_time->seconds,&buffer[6]);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	4907      	ldr	r1, [pc, #28]	@ (8000338 <time_to_string+0x50>)
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ffa8 	bl	8000270 <number_to_string>

	buffer[8] = '\0';
 8000320:	4b03      	ldr	r3, [pc, #12]	@ (8000330 <time_to_string+0x48>)
 8000322:	2200      	movs	r2, #0
 8000324:	721a      	strb	r2, [r3, #8]

	return buffer;
 8000326:	4b02      	ldr	r3, [pc, #8]	@ (8000330 <time_to_string+0x48>)
}
 8000328:	4618      	mov	r0, r3
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000098 	.word	0x20000098
 8000334:	2000009b 	.word	0x2000009b
 8000338:	2000009e 	.word	0x2000009e

0800033c <date_to_string>:

// format: dd/mm/yy
char* date_to_string(RTC_Date_t *rtc_date)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	static char buffer[9];

	buffer[2] = '/';
 8000344:	4b0f      	ldr	r3, [pc, #60]	@ (8000384 <date_to_string+0x48>)
 8000346:	222f      	movs	r2, #47	@ 0x2f
 8000348:	709a      	strb	r2, [r3, #2]
	buffer[5] = '/';
 800034a:	4b0e      	ldr	r3, [pc, #56]	@ (8000384 <date_to_string+0x48>)
 800034c:	222f      	movs	r2, #47	@ 0x2f
 800034e:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->month,buffer);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	789b      	ldrb	r3, [r3, #2]
 8000354:	490b      	ldr	r1, [pc, #44]	@ (8000384 <date_to_string+0x48>)
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ff8a 	bl	8000270 <number_to_string>
	number_to_string(rtc_date->date,&buffer[3]);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	785b      	ldrb	r3, [r3, #1]
 8000360:	4909      	ldr	r1, [pc, #36]	@ (8000388 <date_to_string+0x4c>)
 8000362:	4618      	mov	r0, r3
 8000364:	f7ff ff84 	bl	8000270 <number_to_string>
	number_to_string(rtc_date->year,&buffer[6]);
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	78db      	ldrb	r3, [r3, #3]
 800036c:	4907      	ldr	r1, [pc, #28]	@ (800038c <date_to_string+0x50>)
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff7e 	bl	8000270 <number_to_string>

	buffer[8] = '\0';
 8000374:	4b03      	ldr	r3, [pc, #12]	@ (8000384 <date_to_string+0x48>)
 8000376:	2200      	movs	r2, #0
 8000378:	721a      	strb	r2, [r3, #8]

	return buffer;
 800037a:	4b02      	ldr	r3, [pc, #8]	@ (8000384 <date_to_string+0x48>)
}
 800037c:	4618      	mov	r0, r3
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	200000a4 	.word	0x200000a4
 8000388:	200000a7 	.word	0x200000a7
 800038c:	200000aa 	.word	0x200000aa

08000390 <main>:



int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
	RTC_Time_t current_time;
	RTC_Date_t current_date;

	//printf("RTC test\n");

	lcd_init();
 8000396:	f000 fc03 	bl	8000ba0 <lcd_init>

	lcd_print_string("RTC Test...");
 800039a:	4839      	ldr	r0, [pc, #228]	@ (8000480 <main+0xf0>)
 800039c:	f000 fbec 	bl	8000b78 <lcd_print_string>
	mdelay(2000);
 80003a0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80003a4:	f000 fd10 	bl	8000dc8 <mdelay>

	lcd_display_clear();
 80003a8:	f000 fcbc 	bl	8000d24 <lcd_display_clear>
	lcd_display_return_home();
 80003ac:	f000 fcc4 	bl	8000d38 <lcd_display_return_home>

	if(ds1307_init())
 80003b0:	f000 f9b4 	bl	800071c <ds1307_init>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d004      	beq.n	80003c4 <main+0x34>
	{
		printf("Init has failed\n");
 80003ba:	4832      	ldr	r0, [pc, #200]	@ (8000484 <main+0xf4>)
 80003bc:	f001 fc28 	bl	8001c10 <puts>
		while(1);
 80003c0:	bf00      	nop
 80003c2:	e7fd      	b.n	80003c0 <main+0x30>
	}

	init_systick_timer(1);
 80003c4:	2001      	movs	r0, #1
 80003c6:	f7ff feff 	bl	80001c8 <init_systick_timer>

	current_date.day = WEDNESDAY;
 80003ca:	2304      	movs	r3, #4
 80003cc:	713b      	strb	r3, [r7, #4]
	current_date.date = 13;
 80003ce:	230d      	movs	r3, #13
 80003d0:	717b      	strb	r3, [r7, #5]
	current_date.month = 8;
 80003d2:	2308      	movs	r3, #8
 80003d4:	71bb      	strb	r3, [r7, #6]
	current_date.year = 25;
 80003d6:	2319      	movs	r3, #25
 80003d8:	71fb      	strb	r3, [r7, #7]

	current_time.hours = 10;
 80003da:	230a      	movs	r3, #10
 80003dc:	72bb      	strb	r3, [r7, #10]
	current_time.minutes = 59;
 80003de:	233b      	movs	r3, #59	@ 0x3b
 80003e0:	727b      	strb	r3, [r7, #9]
	current_time.seconds = 40;
 80003e2:	2328      	movs	r3, #40	@ 0x28
 80003e4:	723b      	strb	r3, [r7, #8]
	current_time.time_format = TIME_FORMAT_12HRS_AM;
 80003e6:	2300      	movs	r3, #0
 80003e8:	72fb      	strb	r3, [r7, #11]

	ds1307_set_current_date(&current_date);
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	4618      	mov	r0, r3
 80003ee:	f000 fa45 	bl	800087c <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 80003f2:	f107 0308 	add.w	r3, r7, #8
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 f9ae 	bl	8000758 <ds1307_set_current_time>

	ds1307_get_current_date(&current_date);
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	4618      	mov	r0, r3
 8000400:	f000 fa6c 	bl	80008dc <ds1307_get_current_date>
	ds1307_get_current_time(&current_time);
 8000404:	f107 0308 	add.w	r3, r7, #8
 8000408:	4618      	mov	r0, r3
 800040a:	f000 f9ee 	bl	80007ea <ds1307_get_current_time>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS)
 800040e:	7afb      	ldrb	r3, [r7, #11]
 8000410:	2b02      	cmp	r3, #2
 8000412:	d013      	beq.n	800043c <main+0xac>
	{
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8000414:	7afb      	ldrb	r3, [r7, #11]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <main+0x8e>
 800041a:	4b1b      	ldr	r3, [pc, #108]	@ (8000488 <main+0xf8>)
 800041c:	e000      	b.n	8000420 <main+0x90>
 800041e:	4b1b      	ldr	r3, [pc, #108]	@ (800048c <main+0xfc>)
 8000420:	60fb      	str	r3, [r7, #12]
		//printf("Current time: <%s %s>\n",time_to_string(&current_time),am_pm); // e.g. 4:25:41 PM
		lcd_print_string(time_to_string(&current_time));
 8000422:	f107 0308 	add.w	r3, r7, #8
 8000426:	4618      	mov	r0, r3
 8000428:	f7ff ff5e 	bl	80002e8 <time_to_string>
 800042c:	4603      	mov	r3, r0
 800042e:	4618      	mov	r0, r3
 8000430:	f000 fba2 	bl	8000b78 <lcd_print_string>
		lcd_print_string(am_pm);
 8000434:	68f8      	ldr	r0, [r7, #12]
 8000436:	f000 fb9f 	bl	8000b78 <lcd_print_string>
 800043a:	e008      	b.n	800044e <main+0xbe>
	}
	else
	{
		//printf("Current time: <%s>\n",time_to_string(&current_time));
		lcd_print_string(time_to_string(&current_time));
 800043c:	f107 0308 	add.w	r3, r7, #8
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ff51 	bl	80002e8 <time_to_string>
 8000446:	4603      	mov	r3, r0
 8000448:	4618      	mov	r0, r3
 800044a:	f000 fb95 	bl	8000b78 <lcd_print_string>
	}

	//printf("Current date: <%s, %s>\n",get_day_of_week(current_date.day),date_to_string(&current_date));
	lcd_set_cursor(2, 1);
 800044e:	2101      	movs	r1, #1
 8000450:	2002      	movs	r0, #2
 8000452:	f000 fc7b 	bl	8000d4c <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff ff6f 	bl	800033c <date_to_string>
 800045e:	4603      	mov	r3, r0
 8000460:	4618      	mov	r0, r3
 8000462:	f000 fb89 	bl	8000b78 <lcd_print_string>
	lcd_send_char(' ');
 8000466:	2020      	movs	r0, #32
 8000468:	f000 fb64 	bl	8000b34 <lcd_send_char>
	lcd_print_string(get_day_of_week(current_date.day));
 800046c:	793b      	ldrb	r3, [r7, #4]
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff fee0 	bl	8000234 <get_day_of_week>
 8000474:	4603      	mov	r3, r0
 8000476:	4618      	mov	r0, r3
 8000478:	f000 fb7e 	bl	8000b78 <lcd_print_string>

	while(1);
 800047c:	bf00      	nop
 800047e:	e7fd      	b.n	800047c <main+0xec>
 8000480:	08002390 	.word	0x08002390
 8000484:	0800239c 	.word	0x0800239c
 8000488:	080023ac 	.word	0x080023ac
 800048c:	080023b0 	.word	0x080023b0

08000490 <SysTick_Handler>:
	return 0;
}

void SysTick_Handler(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
	RTC_Time_t current_time;
	RTC_Date_t current_date;
	ds1307_get_current_time(&current_time);
 8000496:	f107 0308 	add.w	r3, r7, #8
 800049a:	4618      	mov	r0, r3
 800049c:	f000 f9a5 	bl	80007ea <ds1307_get_current_time>

	lcd_set_cursor(1, 1);
 80004a0:	2101      	movs	r1, #1
 80004a2:	2001      	movs	r0, #1
 80004a4:	f000 fc52 	bl	8000d4c <lcd_set_cursor>
	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS)
 80004a8:	7afb      	ldrb	r3, [r7, #11]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d013      	beq.n	80004d6 <SysTick_Handler+0x46>
	{
		am_pm = (current_time.time_format) ? "PM" : "AM";
 80004ae:	7afb      	ldrb	r3, [r7, #11]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <SysTick_Handler+0x28>
 80004b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000528 <SysTick_Handler+0x98>)
 80004b6:	e000      	b.n	80004ba <SysTick_Handler+0x2a>
 80004b8:	4b1c      	ldr	r3, [pc, #112]	@ (800052c <SysTick_Handler+0x9c>)
 80004ba:	60fb      	str	r3, [r7, #12]
		//printf("Current time: <%s %s>\n",time_to_string(&current_time),am_pm); // e.g. 4:25:41 PM
		lcd_print_string(time_to_string(&current_time));
 80004bc:	f107 0308 	add.w	r3, r7, #8
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff ff11 	bl	80002e8 <time_to_string>
 80004c6:	4603      	mov	r3, r0
 80004c8:	4618      	mov	r0, r3
 80004ca:	f000 fb55 	bl	8000b78 <lcd_print_string>
		lcd_print_string(am_pm);
 80004ce:	68f8      	ldr	r0, [r7, #12]
 80004d0:	f000 fb52 	bl	8000b78 <lcd_print_string>
 80004d4:	e008      	b.n	80004e8 <SysTick_Handler+0x58>
	}
	else
	{
		//printf("Current time: <%s>\n",time_to_string(&current_time));
		lcd_print_string(time_to_string(&current_time));
 80004d6:	f107 0308 	add.w	r3, r7, #8
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff ff04 	bl	80002e8 <time_to_string>
 80004e0:	4603      	mov	r3, r0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 fb48 	bl	8000b78 <lcd_print_string>
	}

	ds1307_get_current_date(&current_date);
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	4618      	mov	r0, r3
 80004ec:	f000 f9f6 	bl	80008dc <ds1307_get_current_date>
	//printf("Current date: <%s, %s>\n",get_day_of_week(current_date.day),date_to_string(&current_date));
	lcd_set_cursor(2, 1);
 80004f0:	2101      	movs	r1, #1
 80004f2:	2002      	movs	r0, #2
 80004f4:	f000 fc2a 	bl	8000d4c <lcd_set_cursor>
	lcd_print_string(date_to_string(&current_date));
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff ff1e 	bl	800033c <date_to_string>
 8000500:	4603      	mov	r3, r0
 8000502:	4618      	mov	r0, r3
 8000504:	f000 fb38 	bl	8000b78 <lcd_print_string>
	lcd_send_char(' ');
 8000508:	2020      	movs	r0, #32
 800050a:	f000 fb13 	bl	8000b34 <lcd_send_char>
	lcd_print_string(get_day_of_week(current_date.day));
 800050e:	793b      	ldrb	r3, [r7, #4]
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff fe8f 	bl	8000234 <get_day_of_week>
 8000516:	4603      	mov	r3, r0
 8000518:	4618      	mov	r0, r3
 800051a:	f000 fb2d 	bl	8000b78 <lcd_print_string>
}
 800051e:	bf00      	nop
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	080023ac 	.word	0x080023ac
 800052c:	080023b0 	.word	0x080023b0

08000530 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800053a:	4b0f      	ldr	r3, [pc, #60]	@ (8000578 <ITM_SendChar+0x48>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a0e      	ldr	r2, [pc, #56]	@ (8000578 <ITM_SendChar+0x48>)
 8000540:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000544:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000546:	4b0d      	ldr	r3, [pc, #52]	@ (800057c <ITM_SendChar+0x4c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a0c      	ldr	r2, [pc, #48]	@ (800057c <ITM_SendChar+0x4c>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000552:	bf00      	nop
 8000554:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	2b00      	cmp	r3, #0
 8000560:	d0f8      	beq.n	8000554 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000562:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	6013      	str	r3, [r2, #0]
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	e000edfc 	.word	0xe000edfc
 800057c:	e0000e00 	.word	0xe0000e00

08000580 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
 8000590:	e00a      	b.n	80005a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000592:	f3af 8000 	nop.w
 8000596:	4601      	mov	r1, r0
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	1c5a      	adds	r2, r3, #1
 800059c:	60ba      	str	r2, [r7, #8]
 800059e:	b2ca      	uxtb	r2, r1
 80005a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	3301      	adds	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	697a      	ldr	r2, [r7, #20]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	dbf0      	blt.n	8000592 <_read+0x12>
  }

  return len;
 80005b0:	687b      	ldr	r3, [r7, #4]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	3718      	adds	r7, #24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b086      	sub	sp, #24
 80005be:	af00      	add	r7, sp, #0
 80005c0:	60f8      	str	r0, [r7, #12]
 80005c2:	60b9      	str	r1, [r7, #8]
 80005c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	e009      	b.n	80005e0 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	60ba      	str	r2, [r7, #8]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffab 	bl	8000530 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	dbf1      	blt.n	80005cc <_write+0x12>
  }
  return len;
 80005e8:	687b      	ldr	r3, [r7, #4]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <_close>:

int _close(int file)
{
 80005f2:	b480      	push	{r7}
 80005f4:	b083      	sub	sp, #12
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800060a:	b480      	push	{r7}
 800060c:	b083      	sub	sp, #12
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800061a:	605a      	str	r2, [r3, #4]
  return 0;
 800061c:	2300      	movs	r3, #0
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <_isatty>:

int _isatty(int file)
{
 800062a:	b480      	push	{r7}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000632:	2301      	movs	r3, #1
}
 8000634:	4618      	mov	r0, r3
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
	...

0800065c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000664:	4a14      	ldr	r2, [pc, #80]	@ (80006b8 <_sbrk+0x5c>)
 8000666:	4b15      	ldr	r3, [pc, #84]	@ (80006bc <_sbrk+0x60>)
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000670:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <_sbrk+0x64>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d102      	bne.n	800067e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <_sbrk+0x64>)
 800067a:	4a12      	ldr	r2, [pc, #72]	@ (80006c4 <_sbrk+0x68>)
 800067c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800067e:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <_sbrk+0x64>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	693a      	ldr	r2, [r7, #16]
 8000688:	429a      	cmp	r2, r3
 800068a:	d207      	bcs.n	800069c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800068c:	f001 fad0 	bl	8001c30 <__errno>
 8000690:	4603      	mov	r3, r0
 8000692:	220c      	movs	r2, #12
 8000694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000696:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800069a:	e009      	b.n	80006b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800069c:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <_sbrk+0x64>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006a2:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <_sbrk+0x64>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	4a05      	ldr	r2, [pc, #20]	@ (80006c0 <_sbrk+0x64>)
 80006ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ae:	68fb      	ldr	r3, [r7, #12]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20020000 	.word	0x20020000
 80006bc:	00000400 	.word	0x00000400
 80006c0:	200000b0 	.word	0x200000b0
 80006c4:	20000228 	.word	0x20000228

080006c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006c8:	480d      	ldr	r0, [pc, #52]	@ (8000700 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d0:	480c      	ldr	r0, [pc, #48]	@ (8000704 <LoopForever+0x6>)
  ldr r1, =_edata
 80006d2:	490d      	ldr	r1, [pc, #52]	@ (8000708 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d4:	4a0d      	ldr	r2, [pc, #52]	@ (800070c <LoopForever+0xe>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d8:	e002      	b.n	80006e0 <LoopCopyDataInit>

080006da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006de:	3304      	adds	r3, #4

080006e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e4:	d3f9      	bcc.n	80006da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000714 <LoopForever+0x16>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ec:	e001      	b.n	80006f2 <LoopFillZerobss>

080006ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f0:	3204      	adds	r2, #4

080006f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f4:	d3fb      	bcc.n	80006ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006f6:	f001 faa1 	bl	8001c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fa:	f7ff fe49 	bl	8000390 <main>

080006fe <LoopForever>:

LoopForever:
  b LoopForever
 80006fe:	e7fe      	b.n	80006fe <LoopForever>
  ldr   r0, =_estack
 8000700:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800070c:	080023bc 	.word	0x080023bc
  ldr r2, =_sbss
 8000710:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000714:	20000228 	.word	0x20000228

08000718 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC_IRQHandler>
	...

0800071c <ds1307_init>:

//returns 1? CH = 1 i.e. clock halted
//returns 0? CH= 0 i.e. clock not halted

uint8_t ds1307_init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
	//1. initialize i2c pins
	ds1307_i2c_pin_config();
 8000722:	f000 f90f 	bl	8000944 <ds1307_i2c_pin_config>

	//2. initialize i2c peripheral
	ds1307_i2c_config();
 8000726:	f000 f949 	bl	80009bc <ds1307_i2c_config>

	//3. Enable I2C Peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 800072a:	2101      	movs	r1, #1
 800072c:	4809      	ldr	r0, [pc, #36]	@ (8000754 <ds1307_init+0x38>)
 800072e:	f001 f8d6 	bl	80018de <I2C_PeripheralControl>

	//4. Disable clock halt
	ds1307_write(0x00, DS1307_ADDR_SEC);
 8000732:	2100      	movs	r1, #0
 8000734:	2000      	movs	r0, #0
 8000736:	f000 f957 	bl	80009e8 <ds1307_write>

	//5. Read back clock halt bit
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 800073a:	2000      	movs	r0, #0
 800073c:	f000 f970 	bl	8000a20 <ds1307_read>
 8000740:	4603      	mov	r3, r0
 8000742:	71fb      	strb	r3, [r7, #7]

	return ((clock_state >> 7) & 0x1); // return only halt state
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	09db      	lsrs	r3, r3, #7
 8000748:	b2db      	uxtb	r3, r3
	//returns 1? CH = 1 i.e. clock halted; init failed!
	//returns 0? CH= 0 i.e. clock not halted; init success.
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40005400 	.word	0x40005400

08000758 <ds1307_set_current_time>:

void ds1307_set_current_time(RTC_Time_t *rtc_time)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hours;
	seconds = binary_to_bcd(rtc_time->seconds);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4618      	mov	r0, r3
 8000766:	f000 f979 	bl	8000a5c <binary_to_bcd>
 800076a:	4603      	mov	r3, r0
 800076c:	73bb      	strb	r3, [r7, #14]
	seconds &= ~( 1<< 7); // clear clock halt bit just in case
 800076e:	7bbb      	ldrb	r3, [r7, #14]
 8000770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000774:	73bb      	strb	r3, [r7, #14]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 8000776:	7bbb      	ldrb	r3, [r7, #14]
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f934 	bl	80009e8 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	785b      	ldrb	r3, [r3, #1]
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f969 	bl	8000a5c <binary_to_bcd>
 800078a:	4603      	mov	r3, r0
 800078c:	2101      	movs	r1, #1
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f92a 	bl	80009e8 <ds1307_write>

	hours = binary_to_bcd(rtc_time->hours);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	789b      	ldrb	r3, [r3, #2]
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f95f 	bl	8000a5c <binary_to_bcd>
 800079e:	4603      	mov	r3, r0
 80007a0:	73fb      	strb	r3, [r7, #15]
	if (rtc_time->time_format == TIME_FORMAT_24HRS)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	78db      	ldrb	r3, [r3, #3]
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	d104      	bne.n	80007b4 <ds1307_set_current_time+0x5c>
	{
		hours &= ~(1 << 6);
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80007b0:	73fb      	strb	r3, [r7, #15]
 80007b2:	e011      	b.n	80007d8 <ds1307_set_current_time+0x80>
	}
	else
	{
		hours |= (1 << 6);
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ba:	73fb      	strb	r3, [r7, #15]
		hours = (rtc_time->time_format == TIME_FORMAT_12HRS_PM) ? hours | (1 << 5) : hours & ~(1 << 5);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	78db      	ldrb	r3, [r3, #3]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d104      	bne.n	80007ce <ds1307_set_current_time+0x76>
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	f043 0320 	orr.w	r3, r3, #32
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	e003      	b.n	80007d6 <ds1307_set_current_time+0x7e>
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	f023 0320 	bic.w	r3, r3, #32
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	73fb      	strb	r3, [r7, #15]
	}
	ds1307_write(hours, DS1307_ADDR_HRS);
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	2102      	movs	r1, #2
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 f903 	bl	80009e8 <ds1307_write>
}
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <ds1307_get_current_time>:

void ds1307_get_current_time(RTC_Time_t *rtc_time)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b084      	sub	sp, #16
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hours;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f000 f914 	bl	8000a20 <ds1307_read>
 80007f8:	4603      	mov	r3, r0
 80007fa:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7); // clear CH bit
 80007fc:	7bbb      	ldrb	r3, [r7, #14]
 80007fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000802:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f956 	bl	8000ab8 <bcd_to_binary>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 8000814:	2001      	movs	r0, #1
 8000816:	f000 f903 	bl	8000a20 <ds1307_read>
 800081a:	4603      	mov	r3, r0
 800081c:	4618      	mov	r0, r3
 800081e:	f000 f94b 	bl	8000ab8 <bcd_to_binary>
 8000822:	4603      	mov	r3, r0
 8000824:	461a      	mov	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	705a      	strb	r2, [r3, #1]

	hours = ds1307_read(DS1307_ADDR_HRS);
 800082a:	2002      	movs	r0, #2
 800082c:	f000 f8f8 	bl	8000a20 <ds1307_read>
 8000830:	4603      	mov	r3, r0
 8000832:	73fb      	strb	r3, [r7, #15]
	if(hours & (1 << 6))
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800083a:	2b00      	cmp	r3, #0
 800083c:	d00f      	beq.n	800085e <ds1307_get_current_time+0x74>
	{
	//12 hour format
		rtc_time->time_format = !((hours & (1 << 5)) == 0); // AM (0) or PM (1)
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	f003 0320 	and.w	r3, r3, #32
 8000844:	2b00      	cmp	r3, #0
 8000846:	bf14      	ite	ne
 8000848:	2301      	movne	r3, #1
 800084a:	2300      	moveq	r3, #0
 800084c:	b2db      	uxtb	r3, r3
 800084e:	461a      	mov	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	70da      	strb	r2, [r3, #3]
		hours &= ~(0x3 << 5); // Clear bits 6 and 5
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800085a:	73fb      	strb	r3, [r7, #15]
 800085c:	e002      	b.n	8000864 <ds1307_get_current_time+0x7a>
	}
	else
	{
		//24 hour format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2202      	movs	r2, #2
 8000862:	70da      	strb	r2, [r3, #3]
	}
	rtc_time->hours = bcd_to_binary(hours);
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	4618      	mov	r0, r3
 8000868:	f000 f926 	bl	8000ab8 <bcd_to_binary>
 800086c:	4603      	mov	r3, r0
 800086e:	461a      	mov	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	709a      	strb	r2, [r3, #2]

}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_Date_t *rtc_date)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(rtc_date->date), DS1307_ADDR_DATE);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	785b      	ldrb	r3, [r3, #1]
 8000888:	4618      	mov	r0, r3
 800088a:	f000 f8e7 	bl	8000a5c <binary_to_bcd>
 800088e:	4603      	mov	r3, r0
 8000890:	2104      	movs	r1, #4
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f8a8 	bl	80009e8 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	789b      	ldrb	r3, [r3, #2]
 800089c:	4618      	mov	r0, r3
 800089e:	f000 f8dd 	bl	8000a5c <binary_to_bcd>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2105      	movs	r1, #5
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f89e 	bl	80009e8 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 f8d3 	bl	8000a5c <binary_to_bcd>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2103      	movs	r1, #3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f894 	bl	80009e8 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	78db      	ldrb	r3, [r3, #3]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 f8c9 	bl	8000a5c <binary_to_bcd>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2106      	movs	r1, #6
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f88a 	bl	80009e8 <ds1307_write>
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_Date_t *rtc_date)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 80008e4:	2004      	movs	r0, #4
 80008e6:	f000 f89b 	bl	8000a20 <ds1307_read>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f8e3 	bl	8000ab8 <bcd_to_binary>
 80008f2:	4603      	mov	r3, r0
 80008f4:	461a      	mov	r2, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	705a      	strb	r2, [r3, #1]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 80008fa:	2005      	movs	r0, #5
 80008fc:	f000 f890 	bl	8000a20 <ds1307_read>
 8000900:	4603      	mov	r3, r0
 8000902:	4618      	mov	r0, r3
 8000904:	f000 f8d8 	bl	8000ab8 <bcd_to_binary>
 8000908:	4603      	mov	r3, r0
 800090a:	461a      	mov	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	709a      	strb	r2, [r3, #2]
	rtc_date->day = bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 8000910:	2003      	movs	r0, #3
 8000912:	f000 f885 	bl	8000a20 <ds1307_read>
 8000916:	4603      	mov	r3, r0
 8000918:	4618      	mov	r0, r3
 800091a:	f000 f8cd 	bl	8000ab8 <bcd_to_binary>
 800091e:	4603      	mov	r3, r0
 8000920:	461a      	mov	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	701a      	strb	r2, [r3, #0]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 8000926:	2006      	movs	r0, #6
 8000928:	f000 f87a 	bl	8000a20 <ds1307_read>
 800092c:	4603      	mov	r3, r0
 800092e:	4618      	mov	r0, r3
 8000930:	f000 f8c2 	bl	8000ab8 <bcd_to_binary>
 8000934:	4603      	mov	r3, r0
 8000936:	461a      	mov	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	70da      	strb	r2, [r3, #3]
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <ds1307_i2c_pin_config>:

static void ds1307_i2c_pin_config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda, i2c_scl;

	memset(&i2c_sda,0,sizeof(i2c_sda));
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	220c      	movs	r2, #12
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f001 f964 	bl	8001c20 <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 8000958:	463b      	mov	r3, r7
 800095a:	220c      	movs	r2, #12
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f001 f95e 	bl	8001c20 <memset>
	/*
	 * I2C1_SCL -> PB6
	 * I2C1_SDA -> PB7
	 */

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000964:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <ds1307_i2c_pin_config+0x74>)
 8000966:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000968:	2304      	movs	r3, #4
 800096a:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800096c:	2302      	movs	r3, #2
 800096e:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 8000970:	2307      	movs	r3, #7
 8000972:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000974:	2301      	movs	r3, #1
 8000976:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000978:	2301      	movs	r3, #1
 800097a:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800097c:	2302      	movs	r3, #2
 800097e:	74bb      	strb	r3, [r7, #18]
	GPIO_Init(&i2c_sda);
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fb35 	bl	8000ff4 <GPIO_Init>

	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 800098a:	4b0b      	ldr	r3, [pc, #44]	@ (80009b8 <ds1307_i2c_pin_config+0x74>)
 800098c:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800098e:	2304      	movs	r3, #4
 8000990:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000992:	2302      	movs	r3, #2
 8000994:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 8000996:	2306      	movs	r3, #6
 8000998:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 800099a:	2301      	movs	r3, #1
 800099c:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 800099e:	2301      	movs	r3, #1
 80009a0:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80009a2:	2302      	movs	r3, #2
 80009a4:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(&i2c_scl);
 80009a6:	463b      	mov	r3, r7
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 fb23 	bl	8000ff4 <GPIO_Init>
}
 80009ae:	bf00      	nop
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40020400 	.word	0x40020400

080009bc <ds1307_i2c_config>:

static void ds1307_i2c_config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	ds1307I2CHandle.pI2Cx = DS1307_I2C;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <ds1307_i2c_config+0x20>)
 80009c2:	4a07      	ldr	r2, [pc, #28]	@ (80009e0 <ds1307_i2c_config+0x24>)
 80009c4:	601a      	str	r2, [r3, #0]
	ds1307I2CHandle.I2C_Config.I2C_ACKControl = I2C_ACK_EN;
 80009c6:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <ds1307_i2c_config+0x20>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	725a      	strb	r2, [r3, #9]
	ds1307I2CHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 80009cc:	4b03      	ldr	r3, [pc, #12]	@ (80009dc <ds1307_i2c_config+0x20>)
 80009ce:	4a05      	ldr	r2, [pc, #20]	@ (80009e4 <ds1307_i2c_config+0x28>)
 80009d0:	605a      	str	r2, [r3, #4]
	I2C_Init(&ds1307I2CHandle);
 80009d2:	4802      	ldr	r0, [pc, #8]	@ (80009dc <ds1307_i2c_config+0x20>)
 80009d4:	f000 fdd4 	bl	8001580 <I2C_Init>
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200000b4 	.word	0x200000b4
 80009e0:	40005400 	.word	0x40005400
 80009e4:	000186a0 	.word	0x000186a0

080009e8 <ds1307_write>:

static void ds1307_write(uint8_t value, uint8_t register_address)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af02      	add	r7, sp, #8
 80009ee:	4603      	mov	r3, r0
 80009f0:	460a      	mov	r2, r1
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	4613      	mov	r3, r2
 80009f6:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = register_address;
 80009f8:	79bb      	ldrb	r3, [r7, #6]
 80009fa:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&ds1307I2CHandle, tx, 2, DS1307_I2C_ADDR, I2C_NO_SR);
 8000a00:	f107 010c 	add.w	r1, r7, #12
 8000a04:	2300      	movs	r3, #0
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	2368      	movs	r3, #104	@ 0x68
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	4803      	ldr	r0, [pc, #12]	@ (8000a1c <ds1307_write+0x34>)
 8000a0e:	f000 fe7b 	bl	8001708 <I2C_MasterSendData>
}
 8000a12:	bf00      	nop
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200000b4 	.word	0x200000b4

08000a20 <ds1307_read>:

static uint8_t ds1307_read(uint8_t register_address)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af02      	add	r7, sp, #8
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	I2C_MasterSendData(&ds1307I2CHandle, &register_address, 1, DS1307_I2C_ADDR, I2C_NO_SR);
 8000a2a:	1df9      	adds	r1, r7, #7
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	2368      	movs	r3, #104	@ 0x68
 8000a32:	2201      	movs	r2, #1
 8000a34:	4808      	ldr	r0, [pc, #32]	@ (8000a58 <ds1307_read+0x38>)
 8000a36:	f000 fe67 	bl	8001708 <I2C_MasterSendData>
	I2C_MasterReceiveData(&ds1307I2CHandle, &data, 1, DS1307_I2C_ADDR, I2C_NO_SR);
 8000a3a:	f107 010f 	add.w	r1, r7, #15
 8000a3e:	2300      	movs	r3, #0
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2368      	movs	r3, #104	@ 0x68
 8000a44:	2201      	movs	r2, #1
 8000a46:	4804      	ldr	r0, [pc, #16]	@ (8000a58 <ds1307_read+0x38>)
 8000a48:	f000 feb7 	bl	80017ba <I2C_MasterReceiveData>

	return data;
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]

}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200000b4 	.word	0x200000b4

08000a5c <binary_to_bcd>:

static uint8_t binary_to_bcd(uint8_t value)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
	uint8_t m,n;
	uint8_t bcd = value;
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	73fb      	strb	r3, [r7, #15]

	if( value >= 10)
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b09      	cmp	r3, #9
 8000a6e:	d919      	bls.n	8000aa4 <binary_to_bcd+0x48>
	{
		m = value / 10; //grab tens place
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	4a10      	ldr	r2, [pc, #64]	@ (8000ab4 <binary_to_bcd+0x58>)
 8000a74:	fba2 2303 	umull	r2, r3, r2, r3
 8000a78:	08db      	lsrs	r3, r3, #3
 8000a7a:	73bb      	strb	r3, [r7, #14]
		n = value % 10; //grab ones place
 8000a7c:	79fa      	ldrb	r2, [r7, #7]
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <binary_to_bcd+0x58>)
 8000a80:	fba3 1302 	umull	r1, r3, r3, r2
 8000a84:	08d9      	lsrs	r1, r3, #3
 8000a86:	460b      	mov	r3, r1
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	737b      	strb	r3, [r7, #13]
		bcd = (uint8_t) ((m << 4) | n); // shift tens place into bcd position and OR with lower 4 bits
 8000a92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a96:	011b      	lsls	r3, r3, #4
 8000a98:	b25a      	sxtb	r2, r3
 8000a9a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	b25b      	sxtb	r3, r3
 8000aa2:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	cccccccd 	.word	0xcccccccd

08000ab8 <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t bcd)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
	uint8_t m,n;
	uint8_t binary;

	m = (uint8_t)((bcd >> 4) * 10); // upper 4 bits shifted back to 0th bit, multiply by 10 to get into decimal based tens place
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	091b      	lsrs	r3, r3, #4
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	461a      	mov	r2, r3
 8000aca:	0092      	lsls	r2, r2, #2
 8000acc:	4413      	add	r3, r2
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	73fb      	strb	r3, [r7, #15]
	n = bcd & (uint8_t)0x0F; // masking upper 4 bits to grab only lower bits
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f003 030f 	and.w	r3, r3, #15
 8000ad8:	73bb      	strb	r3, [r7, #14]
	binary = (uint8_t) (m + n); // add together to get normal decimal (binary)
 8000ada:	7bfa      	ldrb	r2, [r7, #15]
 8000adc:	7bbb      	ldrb	r3, [r7, #14]
 8000ade:	4413      	add	r3, r2
 8000ae0:	737b      	strb	r3, [r7, #13]

	return binary;
 8000ae2:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <lcd_send_command>:

static void write_4_bits(uint8_t value);
static void lcd_enable(void);

void lcd_send_command(uint8_t cmd)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
	// RS = 0 for LCD Instruction Register
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	480c      	ldr	r0, [pc, #48]	@ (8000b30 <lcd_send_command+0x40>)
 8000b00:	f000 fc22 	bl	8001348 <GPIO_WriteToOutputPin>

	// RnW = 0, for write
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2101      	movs	r1, #1
 8000b08:	4809      	ldr	r0, [pc, #36]	@ (8000b30 <lcd_send_command+0x40>)
 8000b0a:	f000 fc1d 	bl	8001348 <GPIO_WriteToOutputPin>

	// Send Upper Nibble
	write_4_bits(cmd >> 4);
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	091b      	lsrs	r3, r3, #4
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 f8cd 	bl	8000cb4 <write_4_bits>

	// Send Lower Nibble
	write_4_bits(cmd & 0XF);
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	f003 030f 	and.w	r3, r3, #15
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 f8c6 	bl	8000cb4 <write_4_bits>

}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40020c00 	.word	0x40020c00

08000b34 <lcd_send_char>:

void lcd_send_char(uint8_t data)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	// RS = 1 for LCD Data Register
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2100      	movs	r1, #0
 8000b42:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <lcd_send_char+0x40>)
 8000b44:	f000 fc00 	bl	8001348 <GPIO_WriteToOutputPin>

	// RnW = 0, for write
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	4809      	ldr	r0, [pc, #36]	@ (8000b74 <lcd_send_char+0x40>)
 8000b4e:	f000 fbfb 	bl	8001348 <GPIO_WriteToOutputPin>

	// Send Upper Nibble
	write_4_bits(data >> 4);
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	091b      	lsrs	r3, r3, #4
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 f8ab 	bl	8000cb4 <write_4_bits>

	// Send Lower Nibble
	write_4_bits(data & 0XF);
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	f003 030f 	and.w	r3, r3, #15
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 f8a4 	bl	8000cb4 <write_4_bits>

}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40020c00 	.word	0x40020c00

08000b78 <lcd_print_string>:

void lcd_print_string(char *message)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	do
	{
		lcd_send_char((uint8_t)*message++);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	1c5a      	adds	r2, r3, #1
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ffd3 	bl	8000b34 <lcd_send_char>
	}while(*message !=  '\0');
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1f4      	bne.n	8000b80 <lcd_print_string+0x8>
}
 8000b96:	bf00      	nop
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <lcd_init>:

void lcd_init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
	//1. Configure GPIO pins for LCD connections
	GPIO_Handle_t lcd;

	// All pins have same output config
	lcd.pGPIOx = LCD_GPIO_PORT;
 8000ba6:	4b42      	ldr	r3, [pc, #264]	@ (8000cb0 <lcd_init+0x110>)
 8000ba8:	607b      	str	r3, [r7, #4]
	lcd.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000baa:	2301      	movs	r3, #1
 8000bac:	727b      	strb	r3, [r7, #9]
	lcd.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	733b      	strb	r3, [r7, #12]
	lcd.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	72fb      	strb	r3, [r7, #11]
	lcd.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	72bb      	strb	r3, [r7, #10]

	//RS
	lcd.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd);
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 fa17 	bl	8000ff4 <GPIO_Init>

	//RW
	lcd.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd);
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 fa11 	bl	8000ff4 <GPIO_Init>

	//EN
	lcd.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd);
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 fa0b 	bl	8000ff4 <GPIO_Init>

	//D4
	lcd.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 8000bde:	2303      	movs	r3, #3
 8000be0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd);
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 fa05 	bl	8000ff4 <GPIO_Init>

	//D5
	lcd.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 8000bea:	2304      	movs	r3, #4
 8000bec:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd);
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 f9ff 	bl	8000ff4 <GPIO_Init>

	//D6
	lcd.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd);
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 f9f9 	bl	8000ff4 <GPIO_Init>

	//D7
	lcd.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 8000c02:	2306      	movs	r3, #6
 8000c04:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd);
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 f9f3 	bl	8000ff4 <GPIO_Init>

	// initialize all pins to 0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	4827      	ldr	r0, [pc, #156]	@ (8000cb0 <lcd_init+0x110>)
 8000c14:	f000 fb98 	bl	8001348 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	4824      	ldr	r0, [pc, #144]	@ (8000cb0 <lcd_init+0x110>)
 8000c1e:	f000 fb93 	bl	8001348 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2102      	movs	r1, #2
 8000c26:	4822      	ldr	r0, [pc, #136]	@ (8000cb0 <lcd_init+0x110>)
 8000c28:	f000 fb8e 	bl	8001348 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2103      	movs	r1, #3
 8000c30:	481f      	ldr	r0, [pc, #124]	@ (8000cb0 <lcd_init+0x110>)
 8000c32:	f000 fb89 	bl	8001348 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2104      	movs	r1, #4
 8000c3a:	481d      	ldr	r0, [pc, #116]	@ (8000cb0 <lcd_init+0x110>)
 8000c3c:	f000 fb84 	bl	8001348 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2105      	movs	r1, #5
 8000c44:	481a      	ldr	r0, [pc, #104]	@ (8000cb0 <lcd_init+0x110>)
 8000c46:	f000 fb7f 	bl	8001348 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2106      	movs	r1, #6
 8000c4e:	4818      	ldr	r0, [pc, #96]	@ (8000cb0 <lcd_init+0x110>)
 8000c50:	f000 fb7a 	bl	8001348 <GPIO_WriteToOutputPin>


	//2. LCD Initialization Sequence

	// step 1: delay at least 40 ms
	mdelay(40);
 8000c54:	2028      	movs	r0, #40	@ 0x28
 8000c56:	f000 f8b7 	bl	8000dc8 <mdelay>

	// step 2: RESET RS (Data register for write RS = 0) and RnW (Writing to LCD so RnW = 0).
	//		   DB7, DB6 = 0, DB5, DB4= 1.
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4814      	ldr	r0, [pc, #80]	@ (8000cb0 <lcd_init+0x110>)
 8000c60:	f000 fb72 	bl	8001348 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2101      	movs	r1, #1
 8000c68:	4811      	ldr	r0, [pc, #68]	@ (8000cb0 <lcd_init+0x110>)
 8000c6a:	f000 fb6d 	bl	8001348 <GPIO_WriteToOutputPin>

	// write to 4 data bits
	write_4_bits(0x3); // write 0011 across D7-D4
 8000c6e:	2003      	movs	r0, #3
 8000c70:	f000 f820 	bl	8000cb4 <write_4_bits>

	// step 3: delay at least 4.1ms
	mdelay(5);
 8000c74:	2005      	movs	r0, #5
 8000c76:	f000 f8a7 	bl	8000dc8 <mdelay>

	// step 4: Repeat step 2 data write
	write_4_bits(0x3); // write 0011 across D7-D4
 8000c7a:	2003      	movs	r0, #3
 8000c7c:	f000 f81a 	bl	8000cb4 <write_4_bits>

	// step 5: delay at least 100 microseconds
	udelay(150);
 8000c80:	2096      	movs	r0, #150	@ 0x96
 8000c82:	f000 f8ba 	bl	8000dfa <udelay>

	// step 6: Repeat step 2 data write
	write_4_bits(0x3); // write 0011 across D7-D4
 8000c86:	2003      	movs	r0, #3
 8000c88:	f000 f814 	bl	8000cb4 <write_4_bits>

	// step 7: RS,RnW,DB7,DB6,DB4 = 0, DB5 = 1
	// write to 4 data bits
	write_4_bits(0x2); // write 0010 across D7-D4
 8000c8c:	2002      	movs	r0, #2
 8000c8e:	f000 f811 	bl	8000cb4 <write_4_bits>

	// step 8: Function set command
	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 8000c92:	2028      	movs	r0, #40	@ 0x28
 8000c94:	f7ff ff2c 	bl	8000af0 <lcd_send_command>

	// step 9: Display function command
	// Display ON and Cursor ON
	lcd_send_command(LCD_CMD_DISON_CURSON);
 8000c98:	200e      	movs	r0, #14
 8000c9a:	f7ff ff29 	bl	8000af0 <lcd_send_command>

	// step 10: Display clear command
	// Display clear (w/ delay following)
	lcd_display_clear();
 8000c9e:	f000 f841 	bl	8000d24 <lcd_display_clear>

	// Step 11: Entry mode set
	lcd_send_command(LCD_CMD_INCADD);
 8000ca2:	2006      	movs	r0, #6
 8000ca4:	f7ff ff24 	bl	8000af0 <lcd_send_command>

}
 8000ca8:	bf00      	nop
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40020c00 	.word	0x40020c00

08000cb4 <write_4_bits>:

// write 4 bits of data across D7-D4
static void write_4_bits(uint8_t value)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, (value >> 0) & 0x1);
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	2103      	movs	r1, #3
 8000cca:	4815      	ldr	r0, [pc, #84]	@ (8000d20 <write_4_bits+0x6c>)
 8000ccc:	f000 fb3c 	bl	8001348 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, (value >> 1) & 0x1);
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	461a      	mov	r2, r3
 8000cde:	2104      	movs	r1, #4
 8000ce0:	480f      	ldr	r0, [pc, #60]	@ (8000d20 <write_4_bits+0x6c>)
 8000ce2:	f000 fb31 	bl	8001348 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, (value >> 2) & 0x1);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	089b      	lsrs	r3, r3, #2
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	2105      	movs	r1, #5
 8000cf6:	480a      	ldr	r0, [pc, #40]	@ (8000d20 <write_4_bits+0x6c>)
 8000cf8:	f000 fb26 	bl	8001348 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, (value >> 3) & 0x1);
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	08db      	lsrs	r3, r3, #3
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	461a      	mov	r2, r3
 8000d0a:	2106      	movs	r1, #6
 8000d0c:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <write_4_bits+0x6c>)
 8000d0e:	f000 fb1b 	bl	8001348 <GPIO_WriteToOutputPin>

	lcd_enable(); // need to latch data onto lcd after write
 8000d12:	f000 f843 	bl	8000d9c <lcd_enable>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40020c00 	.word	0x40020c00

08000d24 <lcd_display_clear>:

void lcd_display_clear(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0

	lcd_send_command(LCD_CMD_DIS_CLR);
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f7ff fee1 	bl	8000af0 <lcd_send_command>

	// Delay of at least 2 ms required per datasheet (pg. 24)
	mdelay(2);
 8000d2e:	2002      	movs	r0, #2
 8000d30:	f000 f84a 	bl	8000dc8 <mdelay>
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <lcd_display_return_home>:

void lcd_display_return_home(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	lcd_send_command(LCD_CMD_DIS_RTN_HOME);
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	f7ff fed7 	bl	8000af0 <lcd_send_command>

	// Delay of at least 2 ms required per datasheet (pg. 24)
	mdelay(2);
 8000d42:	2002      	movs	r0, #2
 8000d44:	f000 f840 	bl	8000dc8 <mdelay>
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <lcd_set_cursor>:
 * Set 16 x 2 LCD to specified location given row and column information
 * Row ( 1 to 2)
 * Column (1 to 16)
 */
void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
	column--;
 8000d5c:	79bb      	ldrb	r3, [r7, #6]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	71bb      	strb	r3, [r7, #6]
	switch(row)
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d002      	beq.n	8000d6e <lcd_set_cursor+0x22>
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d009      	beq.n	8000d80 <lcd_set_cursor+0x34>
			break;
		case 2: // Set cursor to 2nd row address and add index, (11XX XXXX column offset)
			lcd_send_command((column |= 0xC0));
			break;
		default:
			break;
 8000d6c:	e011      	b.n	8000d92 <lcd_set_cursor+0x46>
			lcd_send_command((column |= 0x80)); // D7 always needs to be kept 1 to change DDRAM address, so 10XX XXXX column offset
 8000d6e:	79bb      	ldrb	r3, [r7, #6]
 8000d70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d74:	71bb      	strb	r3, [r7, #6]
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff feb9 	bl	8000af0 <lcd_send_command>
			break;
 8000d7e:	e008      	b.n	8000d92 <lcd_set_cursor+0x46>
			lcd_send_command((column |= 0xC0));
 8000d80:	79bb      	ldrb	r3, [r7, #6]
 8000d82:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000d86:	71bb      	strb	r3, [r7, #6]
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff feb0 	bl	8000af0 <lcd_send_command>
			break;
 8000d90:	bf00      	nop
	}
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <lcd_enable>:

static void lcd_enable(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	2102      	movs	r1, #2
 8000da4:	4807      	ldr	r0, [pc, #28]	@ (8000dc4 <lcd_enable+0x28>)
 8000da6:	f000 facf 	bl	8001348 <GPIO_WriteToOutputPin>
	udelay(10);
 8000daa:	200a      	movs	r0, #10
 8000dac:	f000 f825 	bl	8000dfa <udelay>

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2102      	movs	r1, #2
 8000db4:	4803      	ldr	r0, [pc, #12]	@ (8000dc4 <lcd_enable+0x28>)
 8000db6:	f000 fac7 	bl	8001348 <GPIO_WriteToOutputPin>
	udelay(100); // execution time > 37 micro seconds
 8000dba:	2064      	movs	r0, #100	@ 0x64
 8000dbc:	f000 f81d 	bl	8000dfa <udelay>
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40020c00 	.word	0x40020c00

08000dc8 <mdelay>:

void mdelay(uint32_t count)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < (count * 1000); i++); //milliseconds delay
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	e002      	b.n	8000ddc <mdelay+0x14>
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000de2:	fb02 f303 	mul.w	r3, r2, r3
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d3f4      	bcc.n	8000dd6 <mdelay+0xe>
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <udelay>:

void udelay(uint32_t count)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b085      	sub	sp, #20
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < (count * 1); i++); //microseconds delay
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	e002      	b.n	8000e0e <udelay+0x14>
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d3f8      	bcc.n	8000e08 <udelay+0xe>
}
 8000e16:	bf00      	nop
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <GPIO_PeriClockControl>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000e30:	78fb      	ldrb	r3, [r7, #3]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d162      	bne.n	8000efc <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a64      	ldr	r2, [pc, #400]	@ (8000fcc <GPIO_PeriClockControl+0x1a8>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d106      	bne.n	8000e4c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000e3e:	4b64      	ldr	r3, [pc, #400]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a63      	ldr	r2, [pc, #396]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8000e4a:	e0b9      	b.n	8000fc0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a61      	ldr	r2, [pc, #388]	@ (8000fd4 <GPIO_PeriClockControl+0x1b0>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d106      	bne.n	8000e62 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000e54:	4b5e      	ldr	r3, [pc, #376]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e58:	4a5d      	ldr	r2, [pc, #372]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000e5a:	f043 0302 	orr.w	r3, r3, #2
 8000e5e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000e60:	e0ae      	b.n	8000fc0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a5c      	ldr	r2, [pc, #368]	@ (8000fd8 <GPIO_PeriClockControl+0x1b4>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d106      	bne.n	8000e78 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000e6a:	4b59      	ldr	r3, [pc, #356]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a58      	ldr	r2, [pc, #352]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000e76:	e0a3      	b.n	8000fc0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a58      	ldr	r2, [pc, #352]	@ (8000fdc <GPIO_PeriClockControl+0x1b8>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d106      	bne.n	8000e8e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000e80:	4b53      	ldr	r3, [pc, #332]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e84:	4a52      	ldr	r2, [pc, #328]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000e86:	f043 0308 	orr.w	r3, r3, #8
 8000e8a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000e8c:	e098      	b.n	8000fc0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a53      	ldr	r2, [pc, #332]	@ (8000fe0 <GPIO_PeriClockControl+0x1bc>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d106      	bne.n	8000ea4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000e96:	4b4e      	ldr	r3, [pc, #312]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a4d      	ldr	r2, [pc, #308]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000e9c:	f043 0310 	orr.w	r3, r3, #16
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ea2:	e08d      	b.n	8000fc0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a4f      	ldr	r2, [pc, #316]	@ (8000fe4 <GPIO_PeriClockControl+0x1c0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d106      	bne.n	8000eba <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000eac:	4b48      	ldr	r3, [pc, #288]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb0:	4a47      	ldr	r2, [pc, #284]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000eb2:	f043 0320 	orr.w	r3, r3, #32
 8000eb6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000eb8:	e082      	b.n	8000fc0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a4a      	ldr	r2, [pc, #296]	@ (8000fe8 <GPIO_PeriClockControl+0x1c4>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d106      	bne.n	8000ed0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000ec2:	4b43      	ldr	r3, [pc, #268]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a42      	ldr	r2, [pc, #264]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ece:	e077      	b.n	8000fc0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a46      	ldr	r2, [pc, #280]	@ (8000fec <GPIO_PeriClockControl+0x1c8>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d106      	bne.n	8000ee6 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000ed8:	4b3d      	ldr	r3, [pc, #244]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000edc:	4a3c      	ldr	r2, [pc, #240]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000ede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ee2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ee4:	e06c      	b.n	8000fc0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a41      	ldr	r2, [pc, #260]	@ (8000ff0 <GPIO_PeriClockControl+0x1cc>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d168      	bne.n	8000fc0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000eee:	4b38      	ldr	r3, [pc, #224]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4a37      	ldr	r2, [pc, #220]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000ef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000efa:	e061      	b.n	8000fc0 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a33      	ldr	r2, [pc, #204]	@ (8000fcc <GPIO_PeriClockControl+0x1a8>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d106      	bne.n	8000f12 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000f04:	4b32      	ldr	r3, [pc, #200]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f08:	4a31      	ldr	r2, [pc, #196]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000f0a:	f023 0301 	bic.w	r3, r3, #1
 8000f0e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f10:	e056      	b.n	8000fc0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a2f      	ldr	r2, [pc, #188]	@ (8000fd4 <GPIO_PeriClockControl+0x1b0>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d106      	bne.n	8000f28 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a2c      	ldr	r2, [pc, #176]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000f20:	f023 0302 	bic.w	r3, r3, #2
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f26:	e04b      	b.n	8000fc0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a2b      	ldr	r2, [pc, #172]	@ (8000fd8 <GPIO_PeriClockControl+0x1b4>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d106      	bne.n	8000f3e <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000f30:	4b27      	ldr	r3, [pc, #156]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f34:	4a26      	ldr	r2, [pc, #152]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000f36:	f023 0304 	bic.w	r3, r3, #4
 8000f3a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f3c:	e040      	b.n	8000fc0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a26      	ldr	r2, [pc, #152]	@ (8000fdc <GPIO_PeriClockControl+0x1b8>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d106      	bne.n	8000f54 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000f46:	4b22      	ldr	r3, [pc, #136]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a21      	ldr	r2, [pc, #132]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000f4c:	f023 0308 	bic.w	r3, r3, #8
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f52:	e035      	b.n	8000fc0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a22      	ldr	r2, [pc, #136]	@ (8000fe0 <GPIO_PeriClockControl+0x1bc>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d106      	bne.n	8000f6a <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f60:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000f62:	f023 0310 	bic.w	r3, r3, #16
 8000f66:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f68:	e02a      	b.n	8000fc0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe4 <GPIO_PeriClockControl+0x1c0>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d106      	bne.n	8000f80 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000f72:	4b17      	ldr	r3, [pc, #92]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	4a16      	ldr	r2, [pc, #88]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000f78:	f023 0320 	bic.w	r3, r3, #32
 8000f7c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f7e:	e01f      	b.n	8000fc0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a19      	ldr	r2, [pc, #100]	@ (8000fe8 <GPIO_PeriClockControl+0x1c4>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d106      	bne.n	8000f96 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000f88:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8c:	4a10      	ldr	r2, [pc, #64]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000f8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000f92:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000f94:	e014      	b.n	8000fc0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a14      	ldr	r2, [pc, #80]	@ (8000fec <GPIO_PeriClockControl+0x1c8>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d106      	bne.n	8000fac <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a0b      	ldr	r2, [pc, #44]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000fa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000faa:	e009      	b.n	8000fc0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a10      	ldr	r2, [pc, #64]	@ (8000ff0 <GPIO_PeriClockControl+0x1cc>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d105      	bne.n	8000fc0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000fb4:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb8:	4a05      	ldr	r2, [pc, #20]	@ (8000fd0 <GPIO_PeriClockControl+0x1ac>)
 8000fba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000fbe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	40020c00 	.word	0x40020c00
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40021400 	.word	0x40021400
 8000fe8:	40021800 	.word	0x40021800
 8000fec:	40021c00 	.word	0x40021c00
 8000ff0:	40022000 	.word	0x40022000

08000ff4 <GPIO_Init>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0; // temporary register
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2101      	movs	r1, #1
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff0c 	bl	8000e24 <GPIO_PeriClockControl>


	// 1. Configure mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	795b      	ldrb	r3, [r3, #5]
 8001010:	2b03      	cmp	r3, #3
 8001012:	d820      	bhi.n	8001056 <GPIO_Init+0x62>
	{
		//Non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	795b      	ldrb	r3, [r3, #5]
 8001018:	461a      	mov	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	791b      	ldrb	r3, [r3, #4]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clear
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	791b      	ldrb	r3, [r3, #4]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	2103      	movs	r1, #3
 8001034:	fa01 f303 	lsl.w	r3, r1, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	4619      	mov	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	400a      	ands	r2, r1
 8001042:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //set
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6819      	ldr	r1, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	430a      	orrs	r2, r1
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	e0d2      	b.n	80011fc <GPIO_Init+0x208>
	}
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	795b      	ldrb	r3, [r3, #5]
 800105a:	2b04      	cmp	r3, #4
 800105c:	d117      	bne.n	800108e <GPIO_Init+0x9a>
		{
			//1. Configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800105e:	4b4b      	ldr	r3, [pc, #300]	@ (800118c <GPIO_Init+0x198>)
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	7912      	ldrb	r2, [r2, #4]
 8001066:	4611      	mov	r1, r2
 8001068:	2201      	movs	r2, #1
 800106a:	408a      	lsls	r2, r1
 800106c:	4611      	mov	r1, r2
 800106e:	4a47      	ldr	r2, [pc, #284]	@ (800118c <GPIO_Init+0x198>)
 8001070:	430b      	orrs	r3, r1
 8001072:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001074:	4b45      	ldr	r3, [pc, #276]	@ (800118c <GPIO_Init+0x198>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	7912      	ldrb	r2, [r2, #4]
 800107c:	4611      	mov	r1, r2
 800107e:	2201      	movs	r2, #1
 8001080:	408a      	lsls	r2, r1
 8001082:	43d2      	mvns	r2, r2
 8001084:	4611      	mov	r1, r2
 8001086:	4a41      	ldr	r2, [pc, #260]	@ (800118c <GPIO_Init+0x198>)
 8001088:	400b      	ands	r3, r1
 800108a:	6093      	str	r3, [r2, #8]
 800108c:	e035      	b.n	80010fa <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	795b      	ldrb	r3, [r3, #5]
 8001092:	2b05      	cmp	r3, #5
 8001094:	d117      	bne.n	80010c6 <GPIO_Init+0xd2>
		{
			//1. Configure RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001096:	4b3d      	ldr	r3, [pc, #244]	@ (800118c <GPIO_Init+0x198>)
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	7912      	ldrb	r2, [r2, #4]
 800109e:	4611      	mov	r1, r2
 80010a0:	2201      	movs	r2, #1
 80010a2:	408a      	lsls	r2, r1
 80010a4:	4611      	mov	r1, r2
 80010a6:	4a39      	ldr	r2, [pc, #228]	@ (800118c <GPIO_Init+0x198>)
 80010a8:	430b      	orrs	r3, r1
 80010aa:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010ac:	4b37      	ldr	r3, [pc, #220]	@ (800118c <GPIO_Init+0x198>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	7912      	ldrb	r2, [r2, #4]
 80010b4:	4611      	mov	r1, r2
 80010b6:	2201      	movs	r2, #1
 80010b8:	408a      	lsls	r2, r1
 80010ba:	43d2      	mvns	r2, r2
 80010bc:	4611      	mov	r1, r2
 80010be:	4a33      	ldr	r2, [pc, #204]	@ (800118c <GPIO_Init+0x198>)
 80010c0:	400b      	ands	r3, r1
 80010c2:	60d3      	str	r3, [r2, #12]
 80010c4:	e019      	b.n	80010fa <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	795b      	ldrb	r3, [r3, #5]
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d115      	bne.n	80010fa <GPIO_Init+0x106>
		{
			//1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010ce:	4b2f      	ldr	r3, [pc, #188]	@ (800118c <GPIO_Init+0x198>)
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	7912      	ldrb	r2, [r2, #4]
 80010d6:	4611      	mov	r1, r2
 80010d8:	2201      	movs	r2, #1
 80010da:	408a      	lsls	r2, r1
 80010dc:	4611      	mov	r1, r2
 80010de:	4a2b      	ldr	r2, [pc, #172]	@ (800118c <GPIO_Init+0x198>)
 80010e0:	430b      	orrs	r3, r1
 80010e2:	60d3      	str	r3, [r2, #12]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010e4:	4b29      	ldr	r3, [pc, #164]	@ (800118c <GPIO_Init+0x198>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	7912      	ldrb	r2, [r2, #4]
 80010ec:	4611      	mov	r1, r2
 80010ee:	2201      	movs	r2, #1
 80010f0:	408a      	lsls	r2, r1
 80010f2:	4611      	mov	r1, r2
 80010f4:	4a25      	ldr	r2, [pc, #148]	@ (800118c <GPIO_Init+0x198>)
 80010f6:	430b      	orrs	r3, r1
 80010f8:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	791b      	ldrb	r3, [r3, #4]
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	791b      	ldrb	r3, [r3, #4]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a1f      	ldr	r2, [pc, #124]	@ (8001190 <GPIO_Init+0x19c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d04e      	beq.n	80011b4 <GPIO_Init+0x1c0>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a1e      	ldr	r2, [pc, #120]	@ (8001194 <GPIO_Init+0x1a0>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d032      	beq.n	8001186 <GPIO_Init+0x192>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a1c      	ldr	r2, [pc, #112]	@ (8001198 <GPIO_Init+0x1a4>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d02b      	beq.n	8001182 <GPIO_Init+0x18e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a1b      	ldr	r2, [pc, #108]	@ (800119c <GPIO_Init+0x1a8>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d024      	beq.n	800117e <GPIO_Init+0x18a>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a19      	ldr	r2, [pc, #100]	@ (80011a0 <GPIO_Init+0x1ac>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d01d      	beq.n	800117a <GPIO_Init+0x186>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a18      	ldr	r2, [pc, #96]	@ (80011a4 <GPIO_Init+0x1b0>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d016      	beq.n	8001176 <GPIO_Init+0x182>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a16      	ldr	r2, [pc, #88]	@ (80011a8 <GPIO_Init+0x1b4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d00f      	beq.n	8001172 <GPIO_Init+0x17e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a15      	ldr	r2, [pc, #84]	@ (80011ac <GPIO_Init+0x1b8>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d008      	beq.n	800116e <GPIO_Init+0x17a>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a13      	ldr	r2, [pc, #76]	@ (80011b0 <GPIO_Init+0x1bc>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d101      	bne.n	800116a <GPIO_Init+0x176>
 8001166:	2308      	movs	r3, #8
 8001168:	e025      	b.n	80011b6 <GPIO_Init+0x1c2>
 800116a:	2300      	movs	r3, #0
 800116c:	e023      	b.n	80011b6 <GPIO_Init+0x1c2>
 800116e:	2307      	movs	r3, #7
 8001170:	e021      	b.n	80011b6 <GPIO_Init+0x1c2>
 8001172:	2306      	movs	r3, #6
 8001174:	e01f      	b.n	80011b6 <GPIO_Init+0x1c2>
 8001176:	2305      	movs	r3, #5
 8001178:	e01d      	b.n	80011b6 <GPIO_Init+0x1c2>
 800117a:	2304      	movs	r3, #4
 800117c:	e01b      	b.n	80011b6 <GPIO_Init+0x1c2>
 800117e:	2303      	movs	r3, #3
 8001180:	e019      	b.n	80011b6 <GPIO_Init+0x1c2>
 8001182:	2302      	movs	r3, #2
 8001184:	e017      	b.n	80011b6 <GPIO_Init+0x1c2>
 8001186:	2301      	movs	r3, #1
 8001188:	e015      	b.n	80011b6 <GPIO_Init+0x1c2>
 800118a:	bf00      	nop
 800118c:	40013c00 	.word	0x40013c00
 8001190:	40020000 	.word	0x40020000
 8001194:	40020400 	.word	0x40020400
 8001198:	40020800 	.word	0x40020800
 800119c:	40020c00 	.word	0x40020c00
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40021400 	.word	0x40021400
 80011a8:	40021800 	.word	0x40021800
 80011ac:	40021c00 	.word	0x40021c00
 80011b0:	40022000 	.word	0x40022000
 80011b4:	2300      	movs	r3, #0
 80011b6:	747b      	strb	r3, [r7, #17]

		SYSCFG_PCLK_EN();
 80011b8:	4b60      	ldr	r3, [pc, #384]	@ (800133c <GPIO_Init+0x348>)
 80011ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011bc:	4a5f      	ldr	r2, [pc, #380]	@ (800133c <GPIO_Init+0x348>)
 80011be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c2:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] |= portCode << (temp2 * 4);
 80011c4:	4a5e      	ldr	r2, [pc, #376]	@ (8001340 <GPIO_Init+0x34c>)
 80011c6:	7cfb      	ldrb	r3, [r7, #19]
 80011c8:	3302      	adds	r3, #2
 80011ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011ce:	7c79      	ldrb	r1, [r7, #17]
 80011d0:	7cbb      	ldrb	r3, [r7, #18]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	fa01 f303 	lsl.w	r3, r1, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	4959      	ldr	r1, [pc, #356]	@ (8001340 <GPIO_Init+0x34c>)
 80011dc:	7cfb      	ldrb	r3, [r7, #19]
 80011de:	4302      	orrs	r2, r0
 80011e0:	3302      	adds	r3, #2
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3. Enable the EXTI delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80011e6:	4b57      	ldr	r3, [pc, #348]	@ (8001344 <GPIO_Init+0x350>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	7912      	ldrb	r2, [r2, #4]
 80011ee:	4611      	mov	r1, r2
 80011f0:	2201      	movs	r2, #1
 80011f2:	408a      	lsls	r2, r1
 80011f4:	4611      	mov	r1, r2
 80011f6:	4a53      	ldr	r2, [pc, #332]	@ (8001344 <GPIO_Init+0x350>)
 80011f8:	430b      	orrs	r3, r1
 80011fa:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	799b      	ldrb	r3, [r3, #6]
 8001204:	461a      	mov	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	791b      	ldrb	r3, [r3, #4]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	791b      	ldrb	r3, [r3, #4]
 800121c:	4619      	mov	r1, r3
 800121e:	2303      	movs	r3, #3
 8001220:	408b      	lsls	r3, r1
 8001222:	43db      	mvns	r3, r3
 8001224:	4619      	mov	r1, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	400a      	ands	r2, r1
 800122c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6899      	ldr	r1, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	430a      	orrs	r2, r1
 800123c:	609a      	str	r2, [r3, #8]

	temp = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]

	// 3. Configure the pull-up/pull-down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	79db      	ldrb	r3, [r3, #7]
 8001246:	461a      	mov	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	791b      	ldrb	r3, [r3, #4]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	791b      	ldrb	r3, [r3, #4]
 800125e:	4619      	mov	r1, r3
 8001260:	2303      	movs	r3, #3
 8001262:	408b      	lsls	r3, r1
 8001264:	43db      	mvns	r3, r3
 8001266:	4619      	mov	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	400a      	ands	r2, r1
 800126e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68d9      	ldr	r1, [r3, #12]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	430a      	orrs	r2, r1
 800127e:	60da      	str	r2, [r3, #12]

	temp = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

	// 4. Configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	7a1b      	ldrb	r3, [r3, #8]
 8001288:	461a      	mov	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	791b      	ldrb	r3, [r3, #4]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	791b      	ldrb	r3, [r3, #4]
 800129e:	4619      	mov	r1, r3
 80012a0:	2301      	movs	r3, #1
 80012a2:	408b      	lsls	r3, r1
 80012a4:	43db      	mvns	r3, r3
 80012a6:	4619      	mov	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	400a      	ands	r2, r1
 80012ae:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6859      	ldr	r1, [r3, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	430a      	orrs	r2, r1
 80012be:	605a      	str	r2, [r3, #4]

	temp = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

	// 5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	795b      	ldrb	r3, [r3, #5]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d131      	bne.n	8001330 <GPIO_Init+0x33c>
	{
		// configure the alternate function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	791b      	ldrb	r3, [r3, #4]
 80012d0:	08db      	lsrs	r3, r3, #3
 80012d2:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	791b      	ldrb	r3, [r3, #4]
 80012d8:	f003 0307 	and.w	r3, r3, #7
 80012dc:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	7c3a      	ldrb	r2, [r7, #16]
 80012e4:	3208      	adds	r2, #8
 80012e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	220f      	movs	r2, #15
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	7c3a      	ldrb	r2, [r7, #16]
 80012fe:	4001      	ands	r1, r0
 8001300:	3208      	adds	r2, #8
 8001302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	7c3a      	ldrb	r2, [r7, #16]
 800130c:	3208      	adds	r2, #8
 800130e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	7a5b      	ldrb	r3, [r3, #9]
 8001316:	461a      	mov	r2, r3
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	4618      	mov	r0, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	7c3a      	ldrb	r2, [r7, #16]
 8001328:	4301      	orrs	r1, r0
 800132a:	3208      	adds	r2, #8
 800132c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

	temp = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
}
 8001334:	bf00      	nop
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	40013800 	.word	0x40013800
 8001344:	40013c00 	.word	0x40013c00

08001348 <GPIO_WriteToOutputPin>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	70fb      	strb	r3, [r7, #3]
 8001354:	4613      	mov	r3, r2
 8001356:	70bb      	strb	r3, [r7, #2]
	if(Value == GPIO_PIN_SET)
 8001358:	78bb      	ldrb	r3, [r7, #2]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d109      	bne.n	8001372 <GPIO_WriteToOutputPin+0x2a>
	{
		// write 1 at the bit field corresponding to the pin number
		pGPIOx->ODR |= (1 << PinNumber);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	78fa      	ldrb	r2, [r7, #3]
 8001364:	2101      	movs	r1, #1
 8001366:	fa01 f202 	lsl.w	r2, r1, r2
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	615a      	str	r2, [r3, #20]
	else
	{
		// write 0
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 8001370:	e009      	b.n	8001386 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	78fa      	ldrb	r2, [r7, #3]
 8001378:	2101      	movs	r1, #1
 800137a:	fa01 f202 	lsl.w	r2, r1, r2
 800137e:	43d2      	mvns	r2, r2
 8001380:	401a      	ands	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	615a      	str	r2, [r3, #20]
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <I2C_GenerateStartCondition>:
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle);


static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	601a      	str	r2, [r3, #0]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <I2C_Write_ExecuteAddressPhase>:

static void I2C_Write_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	460b      	mov	r3, r1
 80013bc:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1; //makes space for R/WR bit
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1 << 0); //clear 0th bit so SlaveAddr is Slave address + r/nw bit (write = 0)
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	f023 0301 	bic.w	r3, r3, #1
 80013ca:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80013cc:	78fa      	ldrb	r2, [r7, #3]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	611a      	str	r2, [r3, #16]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <I2C_Read_ExecuteAddressPhase>:

static void I2C_Read_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	460b      	mov	r3, r1
 80013e8:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1; //makes space for R/WR bit
 80013ea:	78fb      	ldrb	r3, [r7, #3]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= (1 << 0); //set 0th bit so SlaveAddr is Slave address + r/nw bit (read = 1)
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80013f8:	78fa      	ldrb	r2, [r7, #3]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	611a      	str	r2, [r3, #16]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b084      	sub	sp, #16
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	// Check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d01f      	beq.n	8001460 <I2C_ClearADDRFlag+0x56>
	{
		// Device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7f1b      	ldrb	r3, [r3, #28]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d112      	bne.n	800144e <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d11f      	bne.n	8001470 <I2C_ClearADDRFlag+0x66>
			{
				// First disable ACKing
				I2C_ACK_EN_DI(pI2CHandle->pI2Cx, DISABLE);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f82e 	bl	8001498 <I2C_ACK_EN_DI>

				// Clear ADDR flag by reading SR1 and then reading SR2

				dummyRead = pI2CHandle->pI2Cx->SR1;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR1;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	60fb      	str	r3, [r7, #12]

		dummyRead = pI2CHandle->pI2Cx->SR1;
		dummyRead = pI2CHandle->pI2Cx->SR1;
		(void)dummyRead; //suppress unused variable warning
	}
}
 800144c:	e010      	b.n	8001470 <I2C_ClearADDRFlag+0x66>
			dummyRead = pI2CHandle->pI2Cx->SR1;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR1;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	60fb      	str	r3, [r7, #12]
}
 800145e:	e007      	b.n	8001470 <I2C_ClearADDRFlag+0x66>
		dummyRead = pI2CHandle->pI2Cx->SR1;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR1;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	60fb      	str	r3, [r7, #12]
}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	601a      	str	r2, [r3, #0]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <I2C_ACK_EN_DI>:
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
	}
}

static void I2C_ACK_EN_DI(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d106      	bne.n	80014b8 <I2C_ACK_EN_DI+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 80014b6:	e005      	b.n	80014c4 <I2C_ACK_EN_DI+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	601a      	str	r2, [r3, #0]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <I2C_PeriClockControl>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d120      	bne.n	8001524 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a22      	ldr	r2, [pc, #136]	@ (8001570 <I2C_PeriClockControl+0xa0>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d106      	bne.n	80014f8 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 80014ea:	4b22      	ldr	r3, [pc, #136]	@ (8001574 <I2C_PeriClockControl+0xa4>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	4a21      	ldr	r2, [pc, #132]	@ (8001574 <I2C_PeriClockControl+0xa4>)
 80014f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014f4:	6413      	str	r3, [r2, #64]	@ 0x40
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 80014f6:	e035      	b.n	8001564 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001578 <I2C_PeriClockControl+0xa8>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d106      	bne.n	800150e <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8001500:	4b1c      	ldr	r3, [pc, #112]	@ (8001574 <I2C_PeriClockControl+0xa4>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001504:	4a1b      	ldr	r2, [pc, #108]	@ (8001574 <I2C_PeriClockControl+0xa4>)
 8001506:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800150a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800150c:	e02a      	b.n	8001564 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a1a      	ldr	r2, [pc, #104]	@ (800157c <I2C_PeriClockControl+0xac>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d126      	bne.n	8001564 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8001516:	4b17      	ldr	r3, [pc, #92]	@ (8001574 <I2C_PeriClockControl+0xa4>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	4a16      	ldr	r2, [pc, #88]	@ (8001574 <I2C_PeriClockControl+0xa4>)
 800151c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001520:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001522:	e01f      	b.n	8001564 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a12      	ldr	r2, [pc, #72]	@ (8001570 <I2C_PeriClockControl+0xa0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d106      	bne.n	800153a <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 800152c:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <I2C_PeriClockControl+0xa4>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001530:	4a10      	ldr	r2, [pc, #64]	@ (8001574 <I2C_PeriClockControl+0xa4>)
 8001532:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001536:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001538:	e014      	b.n	8001564 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a0e      	ldr	r2, [pc, #56]	@ (8001578 <I2C_PeriClockControl+0xa8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d106      	bne.n	8001550 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8001542:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <I2C_PeriClockControl+0xa4>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	4a0b      	ldr	r2, [pc, #44]	@ (8001574 <I2C_PeriClockControl+0xa4>)
 8001548:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800154c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800154e:	e009      	b.n	8001564 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <I2C_PeriClockControl+0xac>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d105      	bne.n	8001564 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <I2C_PeriClockControl+0xa4>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155c:	4a05      	ldr	r2, [pc, #20]	@ (8001574 <I2C_PeriClockControl+0xa4>)
 800155e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001562:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	40005400 	.word	0x40005400
 8001574:	40023800 	.word	0x40023800
 8001578:	40005800 	.word	0x40005800
 800157c:	40005c00 	.word	0x40005c00

08001580 <I2C_Init>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]

	// Enable clock for I2Cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2101      	movs	r1, #1
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff ff9c 	bl	80014d0 <I2C_PeriClockControl>
//	// ACK control bit < -- broken, Cannot set ACK when PE = 0, moved to I2C_Peripheral Control
//	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
//	pI2CHandle->pI2Cx->CR1 = tempreg;

	// FREQ Configuration
	tempreg = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 800159c:	f000 f9be 	bl	800191c <RCC_GetPCLK1Value>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4a4c      	ldr	r2, [pc, #304]	@ (80016d4 <I2C_Init+0x154>)
 80015a4:	fba2 2303 	umull	r2, r3, r2, r3
 80015a8:	0c9b      	lsrs	r3, r3, #18
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F); // mask all except first 5 bits
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80015ba:	605a      	str	r2, [r3, #4]

	// Device Own Address Configuration (OAR1)
	tempreg = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	7a1b      	ldrb	r3, [r3, #8]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015d2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	609a      	str	r2, [r3, #8]

	// CCR Configuration
	tempreg = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
	uint16_t ccr_value = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	817b      	strh	r3, [r7, #10]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	4a3b      	ldr	r2, [pc, #236]	@ (80016d8 <I2C_Init+0x158>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d80f      	bhi.n	800160e <I2C_Init+0x8e>
	{
		// standard mode
		ccr_value =(RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 80015ee:	f000 f995 	bl	800191c <RCC_GetPCLK1Value>
 80015f2:	4602      	mov	r2, r0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fe:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8001600:	897b      	ldrh	r3, [r7, #10]
 8001602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	4313      	orrs	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	e02c      	b.n	8001668 <I2C_Init+0xe8>
	}
	else
	{
		// fast mode
		tempreg |= (1 << 15); //set fast mode
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001614:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	895b      	ldrh	r3, [r3, #10]
 800161a:	039b      	lsls	r3, r3, #14
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	4313      	orrs	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	895b      	ldrh	r3, [r3, #10]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10b      	bne.n	8001642 <I2C_Init+0xc2>
		{
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 800162a:	f000 f977 	bl	800191c <RCC_GetPCLK1Value>
 800162e:	4601      	mov	r1, r0
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4413      	add	r3, r2
 800163a:	fbb1 f3f3 	udiv	r3, r1, r3
 800163e:	817b      	strh	r3, [r7, #10]
 8001640:	e00c      	b.n	800165c <I2C_Init+0xdc>
		}
		else
		{
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8001642:	f000 f96b 	bl	800191c <RCC_GetPCLK1Value>
 8001646:	4601      	mov	r1, r0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	009a      	lsls	r2, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	fbb1 f3f3 	udiv	r3, r1, r3
 800165a:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 800165c:	897b      	ldrh	r3, [r7, #10]
 800165e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	4313      	orrs	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	tempreg = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	4a17      	ldr	r2, [pc, #92]	@ (80016d8 <I2C_Init+0x158>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d809      	bhi.n	8001692 <I2C_Init+0x112>
	{
		// standard mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 800167e:	f000 f94d 	bl	800191c <RCC_GetPCLK1Value>
 8001682:	4603      	mov	r3, r0
 8001684:	4a13      	ldr	r2, [pc, #76]	@ (80016d4 <I2C_Init+0x154>)
 8001686:	fba2 2303 	umull	r2, r3, r2, r3
 800168a:	0c9b      	lsrs	r3, r3, #18
 800168c:	3301      	adds	r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	e00d      	b.n	80016ae <I2C_Init+0x12e>
	}
	else
	{
		// fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300U) / 1000000000U) + 1;
 8001692:	f000 f943 	bl	800191c <RCC_GetPCLK1Value>
 8001696:	4603      	mov	r3, r0
 8001698:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800169c:	fb02 f303 	mul.w	r3, r2, r3
 80016a0:	0a5b      	lsrs	r3, r3, #9
 80016a2:	4a0e      	ldr	r2, [pc, #56]	@ (80016dc <I2C_Init+0x15c>)
 80016a4:	fba2 2303 	umull	r2, r3, r2, r3
 80016a8:	09db      	lsrs	r3, r3, #7
 80016aa:	3301      	adds	r3, #1
 80016ac:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE = 0;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2200      	movs	r2, #0
 80016b4:	621a      	str	r2, [r3, #32]
	pI2CHandle->pI2Cx->TRISE |= (tempreg & 0x3F);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6a19      	ldr	r1, [r3, #32]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	621a      	str	r2, [r3, #32]
}
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	431bde83 	.word	0x431bde83
 80016d8:	000186a0 	.word	0x000186a0
 80016dc:	00044b83 	.word	0x00044b83

080016e0 <I2C_GetFlagStatus>:
/*
 * Data Send and Receive
 */

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	695a      	ldr	r2, [r3, #20]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <I2C_MasterSendData>:
 * 	@return					-	none
 *
 * 	@Note					-	blocking/polling api
 *************************************************************************************************************/
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t StartRepeated)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	70fb      	strb	r3, [r7, #3]
	//1. Generate START Condition

	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fe39 	bl	8001392 <I2C_GenerateStartCondition>

	//2. Confirm that start generation is completed by checking the SB flag in SR1
	//	 Note: Until SB is cleared SCL will be stretched (pulled LOW)

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG));
 8001720:	bf00      	nop
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2101      	movs	r1, #1
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ffd9 	bl	80016e0 <I2C_GetFlagStatus>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f6      	beq.n	8001722 <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to Write (0) (total 8 bits)

	I2C_Write_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fe38 	bl	80013b2 <I2C_Write_ExecuteAddressPhase>

	//4. Confirm that the address phase is completed by checking the ADDR flag in the SR1

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG));
 8001742:	bf00      	nop
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2102      	movs	r1, #2
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff ffc8 	bl	80016e0 <I2C_GetFlagStatus>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f6      	beq.n	8001744 <I2C_MasterSendData+0x3c>

	//5. Clear the ADDR flag according to its software sequence
	//	 Note: Until ADDR is cleared SCL will be stretched (pulled LOW)

	I2C_ClearADDRFlag(pI2CHandle);
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f7ff fe57 	bl	800140a <I2C_ClearADDRFlag>

	//6. Send the data until Len is 0 (Tx empty)

	while(Len > 0)
 800175c:	e014      	b.n	8001788 <I2C_MasterSendData+0x80>
	{
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TXE_FLAG)); // Wait for TXE to be set
 800175e:	bf00      	nop
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2180      	movs	r1, #128	@ 0x80
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ffba 	bl	80016e0 <I2C_GetFlagStatus>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f6      	beq.n	8001760 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	781a      	ldrb	r2, [r3, #0]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3301      	adds	r3, #1
 8001780:	60bb      	str	r3, [r7, #8]
		Len--;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3b01      	subs	r3, #1
 8001786:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1e7      	bne.n	800175e <I2C_MasterSendData+0x56>
	//	 Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//	 When BTF=1 , SCL will be stretched (pulled LOW)

	//while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TXE_FLAG)); // Wait for TXE to be set

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_BTF_FLAG)); // Wait for TXE to be set
 800178e:	bf00      	nop
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2104      	movs	r1, #4
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ffa2 	bl	80016e0 <I2C_GetFlagStatus>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f6      	beq.n	8001790 <I2C_MasterSendData+0x88>

	//ORIGINAL: 8. Generate STOP Condition and master need not wait for the completion of STOP condition
	//	 Note: Generating STOP automatically clears the BTF

	//8. Expanded for SR: Generate Repeated Start to hold bus otherwise generate Stop
	if(StartRepeated == I2C_NO_SR)
 80017a2:	7e3b      	ldrb	r3, [r7, #24]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d104      	bne.n	80017b2 <I2C_MasterSendData+0xaa>
	{
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fe63 	bl	8001478 <I2C_GenerateStopCondition>
	}
}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <I2C_MasterReceiveData>:
 *
 * 	@Note					-	blocking/polling API
 *************************************************************************************************************/

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t StartRepeated)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	60f8      	str	r0, [r7, #12]
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	4611      	mov	r1, r2
 80017c6:	461a      	mov	r2, r3
 80017c8:	460b      	mov	r3, r1
 80017ca:	71fb      	strb	r3, [r7, #7]
 80017cc:	4613      	mov	r3, r2
 80017ce:	71bb      	strb	r3, [r7, #6]
	//1. Generate START condition

	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fddc 	bl	8001392 <I2C_GenerateStartCondition>

	//2. Confirm START generation is completed by checking SB flag in SR1
	//	 Note: Until SB is cleared SCL will be stretched (pulled LOW)

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG));
 80017da:	bf00      	nop
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2101      	movs	r1, #1
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff7c 	bl	80016e0 <I2C_GetFlagStatus>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f6      	beq.n	80017dc <I2C_MasterReceiveData+0x22>

	//3. Send address of Slave with r/nw but set to Read (1) (total 8 bits)

	I2C_Read_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	79ba      	ldrb	r2, [r7, #6]
 80017f4:	4611      	mov	r1, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fdf1 	bl	80013de <I2C_Read_ExecuteAddressPhase>

	//4. Wait until address phase is completed by checking ADDR flag in SR1

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG));
 80017fc:	bf00      	nop
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2102      	movs	r1, #2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff6b 	bl	80016e0 <I2C_GetFlagStatus>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f6      	beq.n	80017fe <I2C_MasterReceiveData+0x44>

	// If reading only one byte from slave

	if(Len == 1)
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d121      	bne.n	800185a <I2C_MasterReceiveData+0xa0>
	{
		// Disable ACK in CR1

		I2C_ACK_EN_DI(pI2CHandle->pI2Cx, DISABLE); // Clear ACK bit
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fe3b 	bl	8001498 <I2C_ACK_EN_DI>

		// Clear ADDR flag

		I2C_ClearADDRFlag(pI2CHandle);
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f7ff fdf1 	bl	800140a <I2C_ClearADDRFlag>

		// Wait until RXNE = 1

		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_RXNE_FLAG));
 8001828:	bf00      	nop
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2140      	movs	r1, #64	@ 0x40
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff55 	bl	80016e0 <I2C_GetFlagStatus>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f6      	beq.n	800182a <I2C_MasterReceiveData+0x70>

		// Generate STOP condition if no SR

		if(StartRepeated == I2C_NO_SR)
 800183c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d104      	bne.n	800184e <I2C_MasterReceiveData+0x94>
		{
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fe15 	bl	8001478 <I2C_GenerateStopCondition>
		}

		// Read data into buffer

		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	701a      	strb	r2, [r3, #0]
	}

	// If reading more than one byte from Slave
	if(Len > 1)
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d930      	bls.n	80018c2 <I2C_MasterReceiveData+0x108>
	{
		// Clear ADDR flag

		I2C_ClearADDRFlag(pI2CHandle);
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f7ff fdd2 	bl	800140a <I2C_ClearADDRFlag>

		// Read data until Len = 0

		for(uint32_t i = Len; i > 0; i--)
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	e027      	b.n	80018bc <I2C_MasterReceiveData+0x102>
		{
			// Wait until RXNE = 1

			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_RXNE_FLAG));
 800186c:	bf00      	nop
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2140      	movs	r1, #64	@ 0x40
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff33 	bl	80016e0 <I2C_GetFlagStatus>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f6      	beq.n	800186e <I2C_MasterReceiveData+0xb4>

			if(i == 2) // Last 2 bytes
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d10e      	bne.n	80018a4 <I2C_MasterReceiveData+0xea>
			{
				// Disable ACK (CR1) here to prevent slave from sending more data after last byte read

				I2C_ACK_EN_DI(pI2CHandle->pI2Cx,DISABLE); // Clear ACK bit
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fe03 	bl	8001498 <I2C_ACK_EN_DI>

				// Generate STOP condition if no SR

				if(StartRepeated == I2C_NO_SR)
 8001892:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d104      	bne.n	80018a4 <I2C_MasterReceiveData+0xea>
				{
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fdea 	bl	8001478 <I2C_GenerateStopCondition>
				}

			}
			// Read data into buffer

			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	701a      	strb	r2, [r3, #0]

			// increment RxBuffer address

			pRxBuffer++;
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	3301      	adds	r3, #1
 80018b4:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Len; i > 0; i--)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1d4      	bne.n	800186c <I2C_MasterReceiveData+0xb2>
		}
	}

	// Re-Enable ACK in CR1 (if it was enabled before entering current API)

	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_EN)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	7a5b      	ldrb	r3, [r3, #9]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d105      	bne.n	80018d6 <I2C_MasterReceiveData+0x11c>
	{
		I2C_ACK_EN_DI(pI2CHandle->pI2Cx,ENABLE); // Set ACK bit
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2101      	movs	r1, #1
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fde1 	bl	8001498 <I2C_ACK_EN_DI>
	}
}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <I2C_PeripheralControl>:
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
 80018e6:	460b      	mov	r3, r1
 80018e8:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80018ea:	78fb      	ldrb	r3, [r7, #3]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d10a      	bne.n	8001906 <I2C_PeripheralControl+0x28>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f043 0201 	orr.w	r2, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	601a      	str	r2, [r3, #0]

		// Can enable ACK now that PE = 1, moved from I2C_Init
		I2C_ACK_EN_DI(pI2Cx,ENABLE);
 80018fc:	2101      	movs	r1, #1
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fdca 	bl	8001498 <I2C_ACK_EN_DI>
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8001904:	e005      	b.n	8001912 <I2C_PeripheralControl+0x34>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f023 0201 	bic.w	r2, r3, #1
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	601a      	str	r2, [r3, #0]
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <RCC_GetPCLK1Value>:
uint16_t AHB1_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint16_t APB1_PreScaler[8] = {2,4,8,16};
uint16_t APB2_PreScaler[8] = {2,4,8,16};

uint32_t RCC_GetPCLK1Value(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahb1p,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3); // only want bit positions 0 and 1
 8001922:	4b26      	ldr	r3, [pc, #152]	@ (80019bc <RCC_GetPCLK1Value+0xa0>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	b2db      	uxtb	r3, r3
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	727b      	strb	r3, [r7, #9]

	if (clksrc == 0)
 8001930:	7a7b      	ldrb	r3, [r7, #9]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8001936:	4b22      	ldr	r3, [pc, #136]	@ (80019c0 <RCC_GetPCLK1Value+0xa4>)
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	e00b      	b.n	8001954 <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 1)
 800193c:	7a7b      	ldrb	r3, [r7, #9]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d102      	bne.n	8001948 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8001942:	4b20      	ldr	r3, [pc, #128]	@ (80019c4 <RCC_GetPCLK1Value+0xa8>)
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	e005      	b.n	8001954 <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 2)
 8001948:	7a7b      	ldrb	r3, [r7, #9]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d102      	bne.n	8001954 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock(); // not implemented
 800194e:	f000 f83f 	bl	80019d0 <RCC_GetPLLOutputClock>
 8001952:	60f8      	str	r0, [r7, #12]
	}

	//ahb1 pre-scaler
	temp = ((RCC->CFGR >> 4) & 0xF);
 8001954:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <RCC_GetPCLK1Value+0xa0>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	b2db      	uxtb	r3, r3
 800195c:	f003 030f 	and.w	r3, r3, #15
 8001960:	723b      	strb	r3, [r7, #8]

	if (temp < 8)
 8001962:	7a3b      	ldrb	r3, [r7, #8]
 8001964:	2b07      	cmp	r3, #7
 8001966:	d802      	bhi.n	800196e <RCC_GetPCLK1Value+0x52>
	{
		ahb1p = 1;
 8001968:	2301      	movs	r3, #1
 800196a:	72fb      	strb	r3, [r7, #11]
 800196c:	e005      	b.n	800197a <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahb1p = AHB1_PreScaler[temp - 8]; // if ahb1 prescaler greater than 8, fetch first value of array
 800196e:	7a3b      	ldrb	r3, [r7, #8]
 8001970:	3b08      	subs	r3, #8
 8001972:	4a15      	ldr	r2, [pc, #84]	@ (80019c8 <RCC_GetPCLK1Value+0xac>)
 8001974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001978:	72fb      	strb	r3, [r7, #11]
	}

	//apb1 pre-scaler
	temp = ((RCC->CFGR >> 10) & 0x7);
 800197a:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <RCC_GetPCLK1Value+0xa0>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	0a9b      	lsrs	r3, r3, #10
 8001980:	b2db      	uxtb	r3, r3
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	723b      	strb	r3, [r7, #8]

	if (temp < 4)
 8001988:	7a3b      	ldrb	r3, [r7, #8]
 800198a:	2b03      	cmp	r3, #3
 800198c:	d802      	bhi.n	8001994 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 800198e:	2301      	movs	r3, #1
 8001990:	72bb      	strb	r3, [r7, #10]
 8001992:	e005      	b.n	80019a0 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		apb1p = APB1_PreScaler[temp - 4]; // if apb1 prescaler greater than 4, fetch first value of array
 8001994:	7a3b      	ldrb	r3, [r7, #8]
 8001996:	3b04      	subs	r3, #4
 8001998:	4a0c      	ldr	r2, [pc, #48]	@ (80019cc <RCC_GetPCLK1Value+0xb0>)
 800199a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800199e:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahb1p) / apb1p;
 80019a0:	7afb      	ldrb	r3, [r7, #11]
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80019a8:	7abb      	ldrb	r3, [r7, #10]
 80019aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ae:	607b      	str	r3, [r7, #4]

	return pclk1;
 80019b0:	687b      	ldr	r3, [r7, #4]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	00f42400 	.word	0x00f42400
 80019c4:	007a1200 	.word	0x007a1200
 80019c8:	20000000 	.word	0x20000000
 80019cc:	20000010 	.word	0x20000010

080019d0 <RCC_GetPLLOutputClock>:

	return pclk2;
}

uint32_t RCC_GetPLLOutputClock(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
	return 0; // not implemented
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <std>:
 80019e0:	2300      	movs	r3, #0
 80019e2:	b510      	push	{r4, lr}
 80019e4:	4604      	mov	r4, r0
 80019e6:	e9c0 3300 	strd	r3, r3, [r0]
 80019ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80019ee:	6083      	str	r3, [r0, #8]
 80019f0:	8181      	strh	r1, [r0, #12]
 80019f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80019f4:	81c2      	strh	r2, [r0, #14]
 80019f6:	6183      	str	r3, [r0, #24]
 80019f8:	4619      	mov	r1, r3
 80019fa:	2208      	movs	r2, #8
 80019fc:	305c      	adds	r0, #92	@ 0x5c
 80019fe:	f000 f90f 	bl	8001c20 <memset>
 8001a02:	4b0d      	ldr	r3, [pc, #52]	@ (8001a38 <std+0x58>)
 8001a04:	6263      	str	r3, [r4, #36]	@ 0x24
 8001a06:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <std+0x5c>)
 8001a08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <std+0x60>)
 8001a0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a44 <std+0x64>)
 8001a10:	6323      	str	r3, [r4, #48]	@ 0x30
 8001a12:	4b0d      	ldr	r3, [pc, #52]	@ (8001a48 <std+0x68>)
 8001a14:	6224      	str	r4, [r4, #32]
 8001a16:	429c      	cmp	r4, r3
 8001a18:	d006      	beq.n	8001a28 <std+0x48>
 8001a1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001a1e:	4294      	cmp	r4, r2
 8001a20:	d002      	beq.n	8001a28 <std+0x48>
 8001a22:	33d0      	adds	r3, #208	@ 0xd0
 8001a24:	429c      	cmp	r4, r3
 8001a26:	d105      	bne.n	8001a34 <std+0x54>
 8001a28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a30:	f000 b928 	b.w	8001c84 <__retarget_lock_init_recursive>
 8001a34:	bd10      	pop	{r4, pc}
 8001a36:	bf00      	nop
 8001a38:	08001f41 	.word	0x08001f41
 8001a3c:	08001f63 	.word	0x08001f63
 8001a40:	08001f9b 	.word	0x08001f9b
 8001a44:	08001fbf 	.word	0x08001fbf
 8001a48:	200000dc 	.word	0x200000dc

08001a4c <stdio_exit_handler>:
 8001a4c:	4a02      	ldr	r2, [pc, #8]	@ (8001a58 <stdio_exit_handler+0xc>)
 8001a4e:	4903      	ldr	r1, [pc, #12]	@ (8001a5c <stdio_exit_handler+0x10>)
 8001a50:	4803      	ldr	r0, [pc, #12]	@ (8001a60 <stdio_exit_handler+0x14>)
 8001a52:	f000 b869 	b.w	8001b28 <_fwalk_sglue>
 8001a56:	bf00      	nop
 8001a58:	20000020 	.word	0x20000020
 8001a5c:	08001ed9 	.word	0x08001ed9
 8001a60:	20000030 	.word	0x20000030

08001a64 <cleanup_stdio>:
 8001a64:	6841      	ldr	r1, [r0, #4]
 8001a66:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <cleanup_stdio+0x34>)
 8001a68:	4299      	cmp	r1, r3
 8001a6a:	b510      	push	{r4, lr}
 8001a6c:	4604      	mov	r4, r0
 8001a6e:	d001      	beq.n	8001a74 <cleanup_stdio+0x10>
 8001a70:	f000 fa32 	bl	8001ed8 <_fflush_r>
 8001a74:	68a1      	ldr	r1, [r4, #8]
 8001a76:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <cleanup_stdio+0x38>)
 8001a78:	4299      	cmp	r1, r3
 8001a7a:	d002      	beq.n	8001a82 <cleanup_stdio+0x1e>
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f000 fa2b 	bl	8001ed8 <_fflush_r>
 8001a82:	68e1      	ldr	r1, [r4, #12]
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <cleanup_stdio+0x3c>)
 8001a86:	4299      	cmp	r1, r3
 8001a88:	d004      	beq.n	8001a94 <cleanup_stdio+0x30>
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a90:	f000 ba22 	b.w	8001ed8 <_fflush_r>
 8001a94:	bd10      	pop	{r4, pc}
 8001a96:	bf00      	nop
 8001a98:	200000dc 	.word	0x200000dc
 8001a9c:	20000144 	.word	0x20000144
 8001aa0:	200001ac 	.word	0x200001ac

08001aa4 <global_stdio_init.part.0>:
 8001aa4:	b510      	push	{r4, lr}
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <global_stdio_init.part.0+0x30>)
 8001aa8:	4c0b      	ldr	r4, [pc, #44]	@ (8001ad8 <global_stdio_init.part.0+0x34>)
 8001aaa:	4a0c      	ldr	r2, [pc, #48]	@ (8001adc <global_stdio_init.part.0+0x38>)
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	4620      	mov	r0, r4
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2104      	movs	r1, #4
 8001ab4:	f7ff ff94 	bl	80019e0 <std>
 8001ab8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001abc:	2201      	movs	r2, #1
 8001abe:	2109      	movs	r1, #9
 8001ac0:	f7ff ff8e 	bl	80019e0 <std>
 8001ac4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001ac8:	2202      	movs	r2, #2
 8001aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ace:	2112      	movs	r1, #18
 8001ad0:	f7ff bf86 	b.w	80019e0 <std>
 8001ad4:	20000214 	.word	0x20000214
 8001ad8:	200000dc 	.word	0x200000dc
 8001adc:	08001a4d 	.word	0x08001a4d

08001ae0 <__sfp_lock_acquire>:
 8001ae0:	4801      	ldr	r0, [pc, #4]	@ (8001ae8 <__sfp_lock_acquire+0x8>)
 8001ae2:	f000 b8d0 	b.w	8001c86 <__retarget_lock_acquire_recursive>
 8001ae6:	bf00      	nop
 8001ae8:	20000219 	.word	0x20000219

08001aec <__sfp_lock_release>:
 8001aec:	4801      	ldr	r0, [pc, #4]	@ (8001af4 <__sfp_lock_release+0x8>)
 8001aee:	f000 b8cb 	b.w	8001c88 <__retarget_lock_release_recursive>
 8001af2:	bf00      	nop
 8001af4:	20000219 	.word	0x20000219

08001af8 <__sinit>:
 8001af8:	b510      	push	{r4, lr}
 8001afa:	4604      	mov	r4, r0
 8001afc:	f7ff fff0 	bl	8001ae0 <__sfp_lock_acquire>
 8001b00:	6a23      	ldr	r3, [r4, #32]
 8001b02:	b11b      	cbz	r3, 8001b0c <__sinit+0x14>
 8001b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b08:	f7ff bff0 	b.w	8001aec <__sfp_lock_release>
 8001b0c:	4b04      	ldr	r3, [pc, #16]	@ (8001b20 <__sinit+0x28>)
 8001b0e:	6223      	str	r3, [r4, #32]
 8001b10:	4b04      	ldr	r3, [pc, #16]	@ (8001b24 <__sinit+0x2c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f5      	bne.n	8001b04 <__sinit+0xc>
 8001b18:	f7ff ffc4 	bl	8001aa4 <global_stdio_init.part.0>
 8001b1c:	e7f2      	b.n	8001b04 <__sinit+0xc>
 8001b1e:	bf00      	nop
 8001b20:	08001a65 	.word	0x08001a65
 8001b24:	20000214 	.word	0x20000214

08001b28 <_fwalk_sglue>:
 8001b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b2c:	4607      	mov	r7, r0
 8001b2e:	4688      	mov	r8, r1
 8001b30:	4614      	mov	r4, r2
 8001b32:	2600      	movs	r6, #0
 8001b34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001b38:	f1b9 0901 	subs.w	r9, r9, #1
 8001b3c:	d505      	bpl.n	8001b4a <_fwalk_sglue+0x22>
 8001b3e:	6824      	ldr	r4, [r4, #0]
 8001b40:	2c00      	cmp	r4, #0
 8001b42:	d1f7      	bne.n	8001b34 <_fwalk_sglue+0xc>
 8001b44:	4630      	mov	r0, r6
 8001b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b4a:	89ab      	ldrh	r3, [r5, #12]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d907      	bls.n	8001b60 <_fwalk_sglue+0x38>
 8001b50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001b54:	3301      	adds	r3, #1
 8001b56:	d003      	beq.n	8001b60 <_fwalk_sglue+0x38>
 8001b58:	4629      	mov	r1, r5
 8001b5a:	4638      	mov	r0, r7
 8001b5c:	47c0      	blx	r8
 8001b5e:	4306      	orrs	r6, r0
 8001b60:	3568      	adds	r5, #104	@ 0x68
 8001b62:	e7e9      	b.n	8001b38 <_fwalk_sglue+0x10>

08001b64 <_puts_r>:
 8001b64:	6a03      	ldr	r3, [r0, #32]
 8001b66:	b570      	push	{r4, r5, r6, lr}
 8001b68:	6884      	ldr	r4, [r0, #8]
 8001b6a:	4605      	mov	r5, r0
 8001b6c:	460e      	mov	r6, r1
 8001b6e:	b90b      	cbnz	r3, 8001b74 <_puts_r+0x10>
 8001b70:	f7ff ffc2 	bl	8001af8 <__sinit>
 8001b74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001b76:	07db      	lsls	r3, r3, #31
 8001b78:	d405      	bmi.n	8001b86 <_puts_r+0x22>
 8001b7a:	89a3      	ldrh	r3, [r4, #12]
 8001b7c:	0598      	lsls	r0, r3, #22
 8001b7e:	d402      	bmi.n	8001b86 <_puts_r+0x22>
 8001b80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001b82:	f000 f880 	bl	8001c86 <__retarget_lock_acquire_recursive>
 8001b86:	89a3      	ldrh	r3, [r4, #12]
 8001b88:	0719      	lsls	r1, r3, #28
 8001b8a:	d502      	bpl.n	8001b92 <_puts_r+0x2e>
 8001b8c:	6923      	ldr	r3, [r4, #16]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d135      	bne.n	8001bfe <_puts_r+0x9a>
 8001b92:	4621      	mov	r1, r4
 8001b94:	4628      	mov	r0, r5
 8001b96:	f000 fa55 	bl	8002044 <__swsetup_r>
 8001b9a:	b380      	cbz	r0, 8001bfe <_puts_r+0x9a>
 8001b9c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8001ba0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001ba2:	07da      	lsls	r2, r3, #31
 8001ba4:	d405      	bmi.n	8001bb2 <_puts_r+0x4e>
 8001ba6:	89a3      	ldrh	r3, [r4, #12]
 8001ba8:	059b      	lsls	r3, r3, #22
 8001baa:	d402      	bmi.n	8001bb2 <_puts_r+0x4e>
 8001bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001bae:	f000 f86b 	bl	8001c88 <__retarget_lock_release_recursive>
 8001bb2:	4628      	mov	r0, r5
 8001bb4:	bd70      	pop	{r4, r5, r6, pc}
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	da04      	bge.n	8001bc4 <_puts_r+0x60>
 8001bba:	69a2      	ldr	r2, [r4, #24]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	dc17      	bgt.n	8001bf0 <_puts_r+0x8c>
 8001bc0:	290a      	cmp	r1, #10
 8001bc2:	d015      	beq.n	8001bf0 <_puts_r+0x8c>
 8001bc4:	6823      	ldr	r3, [r4, #0]
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	6022      	str	r2, [r4, #0]
 8001bca:	7019      	strb	r1, [r3, #0]
 8001bcc:	68a3      	ldr	r3, [r4, #8]
 8001bce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	60a3      	str	r3, [r4, #8]
 8001bd6:	2900      	cmp	r1, #0
 8001bd8:	d1ed      	bne.n	8001bb6 <_puts_r+0x52>
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	da11      	bge.n	8001c02 <_puts_r+0x9e>
 8001bde:	4622      	mov	r2, r4
 8001be0:	210a      	movs	r1, #10
 8001be2:	4628      	mov	r0, r5
 8001be4:	f000 f9ef 	bl	8001fc6 <__swbuf_r>
 8001be8:	3001      	adds	r0, #1
 8001bea:	d0d7      	beq.n	8001b9c <_puts_r+0x38>
 8001bec:	250a      	movs	r5, #10
 8001bee:	e7d7      	b.n	8001ba0 <_puts_r+0x3c>
 8001bf0:	4622      	mov	r2, r4
 8001bf2:	4628      	mov	r0, r5
 8001bf4:	f000 f9e7 	bl	8001fc6 <__swbuf_r>
 8001bf8:	3001      	adds	r0, #1
 8001bfa:	d1e7      	bne.n	8001bcc <_puts_r+0x68>
 8001bfc:	e7ce      	b.n	8001b9c <_puts_r+0x38>
 8001bfe:	3e01      	subs	r6, #1
 8001c00:	e7e4      	b.n	8001bcc <_puts_r+0x68>
 8001c02:	6823      	ldr	r3, [r4, #0]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	6022      	str	r2, [r4, #0]
 8001c08:	220a      	movs	r2, #10
 8001c0a:	701a      	strb	r2, [r3, #0]
 8001c0c:	e7ee      	b.n	8001bec <_puts_r+0x88>
	...

08001c10 <puts>:
 8001c10:	4b02      	ldr	r3, [pc, #8]	@ (8001c1c <puts+0xc>)
 8001c12:	4601      	mov	r1, r0
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	f7ff bfa5 	b.w	8001b64 <_puts_r>
 8001c1a:	bf00      	nop
 8001c1c:	2000002c 	.word	0x2000002c

08001c20 <memset>:
 8001c20:	4402      	add	r2, r0
 8001c22:	4603      	mov	r3, r0
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d100      	bne.n	8001c2a <memset+0xa>
 8001c28:	4770      	bx	lr
 8001c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8001c2e:	e7f9      	b.n	8001c24 <memset+0x4>

08001c30 <__errno>:
 8001c30:	4b01      	ldr	r3, [pc, #4]	@ (8001c38 <__errno+0x8>)
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	2000002c 	.word	0x2000002c

08001c3c <__libc_init_array>:
 8001c3c:	b570      	push	{r4, r5, r6, lr}
 8001c3e:	4d0d      	ldr	r5, [pc, #52]	@ (8001c74 <__libc_init_array+0x38>)
 8001c40:	4c0d      	ldr	r4, [pc, #52]	@ (8001c78 <__libc_init_array+0x3c>)
 8001c42:	1b64      	subs	r4, r4, r5
 8001c44:	10a4      	asrs	r4, r4, #2
 8001c46:	2600      	movs	r6, #0
 8001c48:	42a6      	cmp	r6, r4
 8001c4a:	d109      	bne.n	8001c60 <__libc_init_array+0x24>
 8001c4c:	4d0b      	ldr	r5, [pc, #44]	@ (8001c7c <__libc_init_array+0x40>)
 8001c4e:	4c0c      	ldr	r4, [pc, #48]	@ (8001c80 <__libc_init_array+0x44>)
 8001c50:	f000 fb72 	bl	8002338 <_init>
 8001c54:	1b64      	subs	r4, r4, r5
 8001c56:	10a4      	asrs	r4, r4, #2
 8001c58:	2600      	movs	r6, #0
 8001c5a:	42a6      	cmp	r6, r4
 8001c5c:	d105      	bne.n	8001c6a <__libc_init_array+0x2e>
 8001c5e:	bd70      	pop	{r4, r5, r6, pc}
 8001c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c64:	4798      	blx	r3
 8001c66:	3601      	adds	r6, #1
 8001c68:	e7ee      	b.n	8001c48 <__libc_init_array+0xc>
 8001c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c6e:	4798      	blx	r3
 8001c70:	3601      	adds	r6, #1
 8001c72:	e7f2      	b.n	8001c5a <__libc_init_array+0x1e>
 8001c74:	080023b4 	.word	0x080023b4
 8001c78:	080023b4 	.word	0x080023b4
 8001c7c:	080023b4 	.word	0x080023b4
 8001c80:	080023b8 	.word	0x080023b8

08001c84 <__retarget_lock_init_recursive>:
 8001c84:	4770      	bx	lr

08001c86 <__retarget_lock_acquire_recursive>:
 8001c86:	4770      	bx	lr

08001c88 <__retarget_lock_release_recursive>:
 8001c88:	4770      	bx	lr
	...

08001c8c <sbrk_aligned>:
 8001c8c:	b570      	push	{r4, r5, r6, lr}
 8001c8e:	4e0f      	ldr	r6, [pc, #60]	@ (8001ccc <sbrk_aligned+0x40>)
 8001c90:	460c      	mov	r4, r1
 8001c92:	6831      	ldr	r1, [r6, #0]
 8001c94:	4605      	mov	r5, r0
 8001c96:	b911      	cbnz	r1, 8001c9e <sbrk_aligned+0x12>
 8001c98:	f000 fac0 	bl	800221c <_sbrk_r>
 8001c9c:	6030      	str	r0, [r6, #0]
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	4628      	mov	r0, r5
 8001ca2:	f000 fabb 	bl	800221c <_sbrk_r>
 8001ca6:	1c43      	adds	r3, r0, #1
 8001ca8:	d103      	bne.n	8001cb2 <sbrk_aligned+0x26>
 8001caa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001cae:	4620      	mov	r0, r4
 8001cb0:	bd70      	pop	{r4, r5, r6, pc}
 8001cb2:	1cc4      	adds	r4, r0, #3
 8001cb4:	f024 0403 	bic.w	r4, r4, #3
 8001cb8:	42a0      	cmp	r0, r4
 8001cba:	d0f8      	beq.n	8001cae <sbrk_aligned+0x22>
 8001cbc:	1a21      	subs	r1, r4, r0
 8001cbe:	4628      	mov	r0, r5
 8001cc0:	f000 faac 	bl	800221c <_sbrk_r>
 8001cc4:	3001      	adds	r0, #1
 8001cc6:	d1f2      	bne.n	8001cae <sbrk_aligned+0x22>
 8001cc8:	e7ef      	b.n	8001caa <sbrk_aligned+0x1e>
 8001cca:	bf00      	nop
 8001ccc:	2000021c 	.word	0x2000021c

08001cd0 <_malloc_r>:
 8001cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cd4:	1ccd      	adds	r5, r1, #3
 8001cd6:	f025 0503 	bic.w	r5, r5, #3
 8001cda:	3508      	adds	r5, #8
 8001cdc:	2d0c      	cmp	r5, #12
 8001cde:	bf38      	it	cc
 8001ce0:	250c      	movcc	r5, #12
 8001ce2:	2d00      	cmp	r5, #0
 8001ce4:	4606      	mov	r6, r0
 8001ce6:	db01      	blt.n	8001cec <_malloc_r+0x1c>
 8001ce8:	42a9      	cmp	r1, r5
 8001cea:	d904      	bls.n	8001cf6 <_malloc_r+0x26>
 8001cec:	230c      	movs	r3, #12
 8001cee:	6033      	str	r3, [r6, #0]
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001cf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001dcc <_malloc_r+0xfc>
 8001cfa:	f000 f915 	bl	8001f28 <__malloc_lock>
 8001cfe:	f8d8 3000 	ldr.w	r3, [r8]
 8001d02:	461c      	mov	r4, r3
 8001d04:	bb44      	cbnz	r4, 8001d58 <_malloc_r+0x88>
 8001d06:	4629      	mov	r1, r5
 8001d08:	4630      	mov	r0, r6
 8001d0a:	f7ff ffbf 	bl	8001c8c <sbrk_aligned>
 8001d0e:	1c43      	adds	r3, r0, #1
 8001d10:	4604      	mov	r4, r0
 8001d12:	d158      	bne.n	8001dc6 <_malloc_r+0xf6>
 8001d14:	f8d8 4000 	ldr.w	r4, [r8]
 8001d18:	4627      	mov	r7, r4
 8001d1a:	2f00      	cmp	r7, #0
 8001d1c:	d143      	bne.n	8001da6 <_malloc_r+0xd6>
 8001d1e:	2c00      	cmp	r4, #0
 8001d20:	d04b      	beq.n	8001dba <_malloc_r+0xea>
 8001d22:	6823      	ldr	r3, [r4, #0]
 8001d24:	4639      	mov	r1, r7
 8001d26:	4630      	mov	r0, r6
 8001d28:	eb04 0903 	add.w	r9, r4, r3
 8001d2c:	f000 fa76 	bl	800221c <_sbrk_r>
 8001d30:	4581      	cmp	r9, r0
 8001d32:	d142      	bne.n	8001dba <_malloc_r+0xea>
 8001d34:	6821      	ldr	r1, [r4, #0]
 8001d36:	1a6d      	subs	r5, r5, r1
 8001d38:	4629      	mov	r1, r5
 8001d3a:	4630      	mov	r0, r6
 8001d3c:	f7ff ffa6 	bl	8001c8c <sbrk_aligned>
 8001d40:	3001      	adds	r0, #1
 8001d42:	d03a      	beq.n	8001dba <_malloc_r+0xea>
 8001d44:	6823      	ldr	r3, [r4, #0]
 8001d46:	442b      	add	r3, r5
 8001d48:	6023      	str	r3, [r4, #0]
 8001d4a:	f8d8 3000 	ldr.w	r3, [r8]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	bb62      	cbnz	r2, 8001dac <_malloc_r+0xdc>
 8001d52:	f8c8 7000 	str.w	r7, [r8]
 8001d56:	e00f      	b.n	8001d78 <_malloc_r+0xa8>
 8001d58:	6822      	ldr	r2, [r4, #0]
 8001d5a:	1b52      	subs	r2, r2, r5
 8001d5c:	d420      	bmi.n	8001da0 <_malloc_r+0xd0>
 8001d5e:	2a0b      	cmp	r2, #11
 8001d60:	d917      	bls.n	8001d92 <_malloc_r+0xc2>
 8001d62:	1961      	adds	r1, r4, r5
 8001d64:	42a3      	cmp	r3, r4
 8001d66:	6025      	str	r5, [r4, #0]
 8001d68:	bf18      	it	ne
 8001d6a:	6059      	strne	r1, [r3, #4]
 8001d6c:	6863      	ldr	r3, [r4, #4]
 8001d6e:	bf08      	it	eq
 8001d70:	f8c8 1000 	streq.w	r1, [r8]
 8001d74:	5162      	str	r2, [r4, r5]
 8001d76:	604b      	str	r3, [r1, #4]
 8001d78:	4630      	mov	r0, r6
 8001d7a:	f000 f8db 	bl	8001f34 <__malloc_unlock>
 8001d7e:	f104 000b 	add.w	r0, r4, #11
 8001d82:	1d23      	adds	r3, r4, #4
 8001d84:	f020 0007 	bic.w	r0, r0, #7
 8001d88:	1ac2      	subs	r2, r0, r3
 8001d8a:	bf1c      	itt	ne
 8001d8c:	1a1b      	subne	r3, r3, r0
 8001d8e:	50a3      	strne	r3, [r4, r2]
 8001d90:	e7af      	b.n	8001cf2 <_malloc_r+0x22>
 8001d92:	6862      	ldr	r2, [r4, #4]
 8001d94:	42a3      	cmp	r3, r4
 8001d96:	bf0c      	ite	eq
 8001d98:	f8c8 2000 	streq.w	r2, [r8]
 8001d9c:	605a      	strne	r2, [r3, #4]
 8001d9e:	e7eb      	b.n	8001d78 <_malloc_r+0xa8>
 8001da0:	4623      	mov	r3, r4
 8001da2:	6864      	ldr	r4, [r4, #4]
 8001da4:	e7ae      	b.n	8001d04 <_malloc_r+0x34>
 8001da6:	463c      	mov	r4, r7
 8001da8:	687f      	ldr	r7, [r7, #4]
 8001daa:	e7b6      	b.n	8001d1a <_malloc_r+0x4a>
 8001dac:	461a      	mov	r2, r3
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	42a3      	cmp	r3, r4
 8001db2:	d1fb      	bne.n	8001dac <_malloc_r+0xdc>
 8001db4:	2300      	movs	r3, #0
 8001db6:	6053      	str	r3, [r2, #4]
 8001db8:	e7de      	b.n	8001d78 <_malloc_r+0xa8>
 8001dba:	230c      	movs	r3, #12
 8001dbc:	6033      	str	r3, [r6, #0]
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	f000 f8b8 	bl	8001f34 <__malloc_unlock>
 8001dc4:	e794      	b.n	8001cf0 <_malloc_r+0x20>
 8001dc6:	6005      	str	r5, [r0, #0]
 8001dc8:	e7d6      	b.n	8001d78 <_malloc_r+0xa8>
 8001dca:	bf00      	nop
 8001dcc:	20000220 	.word	0x20000220

08001dd0 <__sflush_r>:
 8001dd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dd8:	0716      	lsls	r6, r2, #28
 8001dda:	4605      	mov	r5, r0
 8001ddc:	460c      	mov	r4, r1
 8001dde:	d454      	bmi.n	8001e8a <__sflush_r+0xba>
 8001de0:	684b      	ldr	r3, [r1, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	dc02      	bgt.n	8001dec <__sflush_r+0x1c>
 8001de6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	dd48      	ble.n	8001e7e <__sflush_r+0xae>
 8001dec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001dee:	2e00      	cmp	r6, #0
 8001df0:	d045      	beq.n	8001e7e <__sflush_r+0xae>
 8001df2:	2300      	movs	r3, #0
 8001df4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001df8:	682f      	ldr	r7, [r5, #0]
 8001dfa:	6a21      	ldr	r1, [r4, #32]
 8001dfc:	602b      	str	r3, [r5, #0]
 8001dfe:	d030      	beq.n	8001e62 <__sflush_r+0x92>
 8001e00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001e02:	89a3      	ldrh	r3, [r4, #12]
 8001e04:	0759      	lsls	r1, r3, #29
 8001e06:	d505      	bpl.n	8001e14 <__sflush_r+0x44>
 8001e08:	6863      	ldr	r3, [r4, #4]
 8001e0a:	1ad2      	subs	r2, r2, r3
 8001e0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001e0e:	b10b      	cbz	r3, 8001e14 <__sflush_r+0x44>
 8001e10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e12:	1ad2      	subs	r2, r2, r3
 8001e14:	2300      	movs	r3, #0
 8001e16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e18:	6a21      	ldr	r1, [r4, #32]
 8001e1a:	4628      	mov	r0, r5
 8001e1c:	47b0      	blx	r6
 8001e1e:	1c43      	adds	r3, r0, #1
 8001e20:	89a3      	ldrh	r3, [r4, #12]
 8001e22:	d106      	bne.n	8001e32 <__sflush_r+0x62>
 8001e24:	6829      	ldr	r1, [r5, #0]
 8001e26:	291d      	cmp	r1, #29
 8001e28:	d82b      	bhi.n	8001e82 <__sflush_r+0xb2>
 8001e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ed4 <__sflush_r+0x104>)
 8001e2c:	40ca      	lsrs	r2, r1
 8001e2e:	07d6      	lsls	r6, r2, #31
 8001e30:	d527      	bpl.n	8001e82 <__sflush_r+0xb2>
 8001e32:	2200      	movs	r2, #0
 8001e34:	6062      	str	r2, [r4, #4]
 8001e36:	04d9      	lsls	r1, r3, #19
 8001e38:	6922      	ldr	r2, [r4, #16]
 8001e3a:	6022      	str	r2, [r4, #0]
 8001e3c:	d504      	bpl.n	8001e48 <__sflush_r+0x78>
 8001e3e:	1c42      	adds	r2, r0, #1
 8001e40:	d101      	bne.n	8001e46 <__sflush_r+0x76>
 8001e42:	682b      	ldr	r3, [r5, #0]
 8001e44:	b903      	cbnz	r3, 8001e48 <__sflush_r+0x78>
 8001e46:	6560      	str	r0, [r4, #84]	@ 0x54
 8001e48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001e4a:	602f      	str	r7, [r5, #0]
 8001e4c:	b1b9      	cbz	r1, 8001e7e <__sflush_r+0xae>
 8001e4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001e52:	4299      	cmp	r1, r3
 8001e54:	d002      	beq.n	8001e5c <__sflush_r+0x8c>
 8001e56:	4628      	mov	r0, r5
 8001e58:	f000 fa24 	bl	80022a4 <_free_r>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001e60:	e00d      	b.n	8001e7e <__sflush_r+0xae>
 8001e62:	2301      	movs	r3, #1
 8001e64:	4628      	mov	r0, r5
 8001e66:	47b0      	blx	r6
 8001e68:	4602      	mov	r2, r0
 8001e6a:	1c50      	adds	r0, r2, #1
 8001e6c:	d1c9      	bne.n	8001e02 <__sflush_r+0x32>
 8001e6e:	682b      	ldr	r3, [r5, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0c6      	beq.n	8001e02 <__sflush_r+0x32>
 8001e74:	2b1d      	cmp	r3, #29
 8001e76:	d001      	beq.n	8001e7c <__sflush_r+0xac>
 8001e78:	2b16      	cmp	r3, #22
 8001e7a:	d11e      	bne.n	8001eba <__sflush_r+0xea>
 8001e7c:	602f      	str	r7, [r5, #0]
 8001e7e:	2000      	movs	r0, #0
 8001e80:	e022      	b.n	8001ec8 <__sflush_r+0xf8>
 8001e82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e86:	b21b      	sxth	r3, r3
 8001e88:	e01b      	b.n	8001ec2 <__sflush_r+0xf2>
 8001e8a:	690f      	ldr	r7, [r1, #16]
 8001e8c:	2f00      	cmp	r7, #0
 8001e8e:	d0f6      	beq.n	8001e7e <__sflush_r+0xae>
 8001e90:	0793      	lsls	r3, r2, #30
 8001e92:	680e      	ldr	r6, [r1, #0]
 8001e94:	bf08      	it	eq
 8001e96:	694b      	ldreq	r3, [r1, #20]
 8001e98:	600f      	str	r7, [r1, #0]
 8001e9a:	bf18      	it	ne
 8001e9c:	2300      	movne	r3, #0
 8001e9e:	eba6 0807 	sub.w	r8, r6, r7
 8001ea2:	608b      	str	r3, [r1, #8]
 8001ea4:	f1b8 0f00 	cmp.w	r8, #0
 8001ea8:	dde9      	ble.n	8001e7e <__sflush_r+0xae>
 8001eaa:	6a21      	ldr	r1, [r4, #32]
 8001eac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001eae:	4643      	mov	r3, r8
 8001eb0:	463a      	mov	r2, r7
 8001eb2:	4628      	mov	r0, r5
 8001eb4:	47b0      	blx	r6
 8001eb6:	2800      	cmp	r0, #0
 8001eb8:	dc08      	bgt.n	8001ecc <__sflush_r+0xfc>
 8001eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ec2:	81a3      	strh	r3, [r4, #12]
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ecc:	4407      	add	r7, r0
 8001ece:	eba8 0800 	sub.w	r8, r8, r0
 8001ed2:	e7e7      	b.n	8001ea4 <__sflush_r+0xd4>
 8001ed4:	20400001 	.word	0x20400001

08001ed8 <_fflush_r>:
 8001ed8:	b538      	push	{r3, r4, r5, lr}
 8001eda:	690b      	ldr	r3, [r1, #16]
 8001edc:	4605      	mov	r5, r0
 8001ede:	460c      	mov	r4, r1
 8001ee0:	b913      	cbnz	r3, 8001ee8 <_fflush_r+0x10>
 8001ee2:	2500      	movs	r5, #0
 8001ee4:	4628      	mov	r0, r5
 8001ee6:	bd38      	pop	{r3, r4, r5, pc}
 8001ee8:	b118      	cbz	r0, 8001ef2 <_fflush_r+0x1a>
 8001eea:	6a03      	ldr	r3, [r0, #32]
 8001eec:	b90b      	cbnz	r3, 8001ef2 <_fflush_r+0x1a>
 8001eee:	f7ff fe03 	bl	8001af8 <__sinit>
 8001ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f3      	beq.n	8001ee2 <_fflush_r+0xa>
 8001efa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001efc:	07d0      	lsls	r0, r2, #31
 8001efe:	d404      	bmi.n	8001f0a <_fflush_r+0x32>
 8001f00:	0599      	lsls	r1, r3, #22
 8001f02:	d402      	bmi.n	8001f0a <_fflush_r+0x32>
 8001f04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f06:	f7ff febe 	bl	8001c86 <__retarget_lock_acquire_recursive>
 8001f0a:	4628      	mov	r0, r5
 8001f0c:	4621      	mov	r1, r4
 8001f0e:	f7ff ff5f 	bl	8001dd0 <__sflush_r>
 8001f12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f14:	07da      	lsls	r2, r3, #31
 8001f16:	4605      	mov	r5, r0
 8001f18:	d4e4      	bmi.n	8001ee4 <_fflush_r+0xc>
 8001f1a:	89a3      	ldrh	r3, [r4, #12]
 8001f1c:	059b      	lsls	r3, r3, #22
 8001f1e:	d4e1      	bmi.n	8001ee4 <_fflush_r+0xc>
 8001f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f22:	f7ff feb1 	bl	8001c88 <__retarget_lock_release_recursive>
 8001f26:	e7dd      	b.n	8001ee4 <_fflush_r+0xc>

08001f28 <__malloc_lock>:
 8001f28:	4801      	ldr	r0, [pc, #4]	@ (8001f30 <__malloc_lock+0x8>)
 8001f2a:	f7ff beac 	b.w	8001c86 <__retarget_lock_acquire_recursive>
 8001f2e:	bf00      	nop
 8001f30:	20000218 	.word	0x20000218

08001f34 <__malloc_unlock>:
 8001f34:	4801      	ldr	r0, [pc, #4]	@ (8001f3c <__malloc_unlock+0x8>)
 8001f36:	f7ff bea7 	b.w	8001c88 <__retarget_lock_release_recursive>
 8001f3a:	bf00      	nop
 8001f3c:	20000218 	.word	0x20000218

08001f40 <__sread>:
 8001f40:	b510      	push	{r4, lr}
 8001f42:	460c      	mov	r4, r1
 8001f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f48:	f000 f956 	bl	80021f8 <_read_r>
 8001f4c:	2800      	cmp	r0, #0
 8001f4e:	bfab      	itete	ge
 8001f50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001f52:	89a3      	ldrhlt	r3, [r4, #12]
 8001f54:	181b      	addge	r3, r3, r0
 8001f56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001f5a:	bfac      	ite	ge
 8001f5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001f5e:	81a3      	strhlt	r3, [r4, #12]
 8001f60:	bd10      	pop	{r4, pc}

08001f62 <__swrite>:
 8001f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f66:	461f      	mov	r7, r3
 8001f68:	898b      	ldrh	r3, [r1, #12]
 8001f6a:	05db      	lsls	r3, r3, #23
 8001f6c:	4605      	mov	r5, r0
 8001f6e:	460c      	mov	r4, r1
 8001f70:	4616      	mov	r6, r2
 8001f72:	d505      	bpl.n	8001f80 <__swrite+0x1e>
 8001f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f78:	2302      	movs	r3, #2
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f000 f92a 	bl	80021d4 <_lseek_r>
 8001f80:	89a3      	ldrh	r3, [r4, #12]
 8001f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f8a:	81a3      	strh	r3, [r4, #12]
 8001f8c:	4632      	mov	r2, r6
 8001f8e:	463b      	mov	r3, r7
 8001f90:	4628      	mov	r0, r5
 8001f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f96:	f000 b951 	b.w	800223c <_write_r>

08001f9a <__sseek>:
 8001f9a:	b510      	push	{r4, lr}
 8001f9c:	460c      	mov	r4, r1
 8001f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fa2:	f000 f917 	bl	80021d4 <_lseek_r>
 8001fa6:	1c43      	adds	r3, r0, #1
 8001fa8:	89a3      	ldrh	r3, [r4, #12]
 8001faa:	bf15      	itete	ne
 8001fac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001fae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001fb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001fb6:	81a3      	strheq	r3, [r4, #12]
 8001fb8:	bf18      	it	ne
 8001fba:	81a3      	strhne	r3, [r4, #12]
 8001fbc:	bd10      	pop	{r4, pc}

08001fbe <__sclose>:
 8001fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fc2:	f000 b94d 	b.w	8002260 <_close_r>

08001fc6 <__swbuf_r>:
 8001fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fc8:	460e      	mov	r6, r1
 8001fca:	4614      	mov	r4, r2
 8001fcc:	4605      	mov	r5, r0
 8001fce:	b118      	cbz	r0, 8001fd8 <__swbuf_r+0x12>
 8001fd0:	6a03      	ldr	r3, [r0, #32]
 8001fd2:	b90b      	cbnz	r3, 8001fd8 <__swbuf_r+0x12>
 8001fd4:	f7ff fd90 	bl	8001af8 <__sinit>
 8001fd8:	69a3      	ldr	r3, [r4, #24]
 8001fda:	60a3      	str	r3, [r4, #8]
 8001fdc:	89a3      	ldrh	r3, [r4, #12]
 8001fde:	071a      	lsls	r2, r3, #28
 8001fe0:	d501      	bpl.n	8001fe6 <__swbuf_r+0x20>
 8001fe2:	6923      	ldr	r3, [r4, #16]
 8001fe4:	b943      	cbnz	r3, 8001ff8 <__swbuf_r+0x32>
 8001fe6:	4621      	mov	r1, r4
 8001fe8:	4628      	mov	r0, r5
 8001fea:	f000 f82b 	bl	8002044 <__swsetup_r>
 8001fee:	b118      	cbz	r0, 8001ff8 <__swbuf_r+0x32>
 8001ff0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001ff4:	4638      	mov	r0, r7
 8001ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	6922      	ldr	r2, [r4, #16]
 8001ffc:	1a98      	subs	r0, r3, r2
 8001ffe:	6963      	ldr	r3, [r4, #20]
 8002000:	b2f6      	uxtb	r6, r6
 8002002:	4283      	cmp	r3, r0
 8002004:	4637      	mov	r7, r6
 8002006:	dc05      	bgt.n	8002014 <__swbuf_r+0x4e>
 8002008:	4621      	mov	r1, r4
 800200a:	4628      	mov	r0, r5
 800200c:	f7ff ff64 	bl	8001ed8 <_fflush_r>
 8002010:	2800      	cmp	r0, #0
 8002012:	d1ed      	bne.n	8001ff0 <__swbuf_r+0x2a>
 8002014:	68a3      	ldr	r3, [r4, #8]
 8002016:	3b01      	subs	r3, #1
 8002018:	60a3      	str	r3, [r4, #8]
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	6022      	str	r2, [r4, #0]
 8002020:	701e      	strb	r6, [r3, #0]
 8002022:	6962      	ldr	r2, [r4, #20]
 8002024:	1c43      	adds	r3, r0, #1
 8002026:	429a      	cmp	r2, r3
 8002028:	d004      	beq.n	8002034 <__swbuf_r+0x6e>
 800202a:	89a3      	ldrh	r3, [r4, #12]
 800202c:	07db      	lsls	r3, r3, #31
 800202e:	d5e1      	bpl.n	8001ff4 <__swbuf_r+0x2e>
 8002030:	2e0a      	cmp	r6, #10
 8002032:	d1df      	bne.n	8001ff4 <__swbuf_r+0x2e>
 8002034:	4621      	mov	r1, r4
 8002036:	4628      	mov	r0, r5
 8002038:	f7ff ff4e 	bl	8001ed8 <_fflush_r>
 800203c:	2800      	cmp	r0, #0
 800203e:	d0d9      	beq.n	8001ff4 <__swbuf_r+0x2e>
 8002040:	e7d6      	b.n	8001ff0 <__swbuf_r+0x2a>
	...

08002044 <__swsetup_r>:
 8002044:	b538      	push	{r3, r4, r5, lr}
 8002046:	4b29      	ldr	r3, [pc, #164]	@ (80020ec <__swsetup_r+0xa8>)
 8002048:	4605      	mov	r5, r0
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	460c      	mov	r4, r1
 800204e:	b118      	cbz	r0, 8002058 <__swsetup_r+0x14>
 8002050:	6a03      	ldr	r3, [r0, #32]
 8002052:	b90b      	cbnz	r3, 8002058 <__swsetup_r+0x14>
 8002054:	f7ff fd50 	bl	8001af8 <__sinit>
 8002058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800205c:	0719      	lsls	r1, r3, #28
 800205e:	d422      	bmi.n	80020a6 <__swsetup_r+0x62>
 8002060:	06da      	lsls	r2, r3, #27
 8002062:	d407      	bmi.n	8002074 <__swsetup_r+0x30>
 8002064:	2209      	movs	r2, #9
 8002066:	602a      	str	r2, [r5, #0]
 8002068:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800206c:	81a3      	strh	r3, [r4, #12]
 800206e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002072:	e033      	b.n	80020dc <__swsetup_r+0x98>
 8002074:	0758      	lsls	r0, r3, #29
 8002076:	d512      	bpl.n	800209e <__swsetup_r+0x5a>
 8002078:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800207a:	b141      	cbz	r1, 800208e <__swsetup_r+0x4a>
 800207c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002080:	4299      	cmp	r1, r3
 8002082:	d002      	beq.n	800208a <__swsetup_r+0x46>
 8002084:	4628      	mov	r0, r5
 8002086:	f000 f90d 	bl	80022a4 <_free_r>
 800208a:	2300      	movs	r3, #0
 800208c:	6363      	str	r3, [r4, #52]	@ 0x34
 800208e:	89a3      	ldrh	r3, [r4, #12]
 8002090:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002094:	81a3      	strh	r3, [r4, #12]
 8002096:	2300      	movs	r3, #0
 8002098:	6063      	str	r3, [r4, #4]
 800209a:	6923      	ldr	r3, [r4, #16]
 800209c:	6023      	str	r3, [r4, #0]
 800209e:	89a3      	ldrh	r3, [r4, #12]
 80020a0:	f043 0308 	orr.w	r3, r3, #8
 80020a4:	81a3      	strh	r3, [r4, #12]
 80020a6:	6923      	ldr	r3, [r4, #16]
 80020a8:	b94b      	cbnz	r3, 80020be <__swsetup_r+0x7a>
 80020aa:	89a3      	ldrh	r3, [r4, #12]
 80020ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80020b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020b4:	d003      	beq.n	80020be <__swsetup_r+0x7a>
 80020b6:	4621      	mov	r1, r4
 80020b8:	4628      	mov	r0, r5
 80020ba:	f000 f83f 	bl	800213c <__smakebuf_r>
 80020be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020c2:	f013 0201 	ands.w	r2, r3, #1
 80020c6:	d00a      	beq.n	80020de <__swsetup_r+0x9a>
 80020c8:	2200      	movs	r2, #0
 80020ca:	60a2      	str	r2, [r4, #8]
 80020cc:	6962      	ldr	r2, [r4, #20]
 80020ce:	4252      	negs	r2, r2
 80020d0:	61a2      	str	r2, [r4, #24]
 80020d2:	6922      	ldr	r2, [r4, #16]
 80020d4:	b942      	cbnz	r2, 80020e8 <__swsetup_r+0xa4>
 80020d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80020da:	d1c5      	bne.n	8002068 <__swsetup_r+0x24>
 80020dc:	bd38      	pop	{r3, r4, r5, pc}
 80020de:	0799      	lsls	r1, r3, #30
 80020e0:	bf58      	it	pl
 80020e2:	6962      	ldrpl	r2, [r4, #20]
 80020e4:	60a2      	str	r2, [r4, #8]
 80020e6:	e7f4      	b.n	80020d2 <__swsetup_r+0x8e>
 80020e8:	2000      	movs	r0, #0
 80020ea:	e7f7      	b.n	80020dc <__swsetup_r+0x98>
 80020ec:	2000002c 	.word	0x2000002c

080020f0 <__swhatbuf_r>:
 80020f0:	b570      	push	{r4, r5, r6, lr}
 80020f2:	460c      	mov	r4, r1
 80020f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020f8:	2900      	cmp	r1, #0
 80020fa:	b096      	sub	sp, #88	@ 0x58
 80020fc:	4615      	mov	r5, r2
 80020fe:	461e      	mov	r6, r3
 8002100:	da0d      	bge.n	800211e <__swhatbuf_r+0x2e>
 8002102:	89a3      	ldrh	r3, [r4, #12]
 8002104:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002108:	f04f 0100 	mov.w	r1, #0
 800210c:	bf14      	ite	ne
 800210e:	2340      	movne	r3, #64	@ 0x40
 8002110:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002114:	2000      	movs	r0, #0
 8002116:	6031      	str	r1, [r6, #0]
 8002118:	602b      	str	r3, [r5, #0]
 800211a:	b016      	add	sp, #88	@ 0x58
 800211c:	bd70      	pop	{r4, r5, r6, pc}
 800211e:	466a      	mov	r2, sp
 8002120:	f000 f8ae 	bl	8002280 <_fstat_r>
 8002124:	2800      	cmp	r0, #0
 8002126:	dbec      	blt.n	8002102 <__swhatbuf_r+0x12>
 8002128:	9901      	ldr	r1, [sp, #4]
 800212a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800212e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002132:	4259      	negs	r1, r3
 8002134:	4159      	adcs	r1, r3
 8002136:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800213a:	e7eb      	b.n	8002114 <__swhatbuf_r+0x24>

0800213c <__smakebuf_r>:
 800213c:	898b      	ldrh	r3, [r1, #12]
 800213e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002140:	079d      	lsls	r5, r3, #30
 8002142:	4606      	mov	r6, r0
 8002144:	460c      	mov	r4, r1
 8002146:	d507      	bpl.n	8002158 <__smakebuf_r+0x1c>
 8002148:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800214c:	6023      	str	r3, [r4, #0]
 800214e:	6123      	str	r3, [r4, #16]
 8002150:	2301      	movs	r3, #1
 8002152:	6163      	str	r3, [r4, #20]
 8002154:	b003      	add	sp, #12
 8002156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002158:	ab01      	add	r3, sp, #4
 800215a:	466a      	mov	r2, sp
 800215c:	f7ff ffc8 	bl	80020f0 <__swhatbuf_r>
 8002160:	9f00      	ldr	r7, [sp, #0]
 8002162:	4605      	mov	r5, r0
 8002164:	4639      	mov	r1, r7
 8002166:	4630      	mov	r0, r6
 8002168:	f7ff fdb2 	bl	8001cd0 <_malloc_r>
 800216c:	b948      	cbnz	r0, 8002182 <__smakebuf_r+0x46>
 800216e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002172:	059a      	lsls	r2, r3, #22
 8002174:	d4ee      	bmi.n	8002154 <__smakebuf_r+0x18>
 8002176:	f023 0303 	bic.w	r3, r3, #3
 800217a:	f043 0302 	orr.w	r3, r3, #2
 800217e:	81a3      	strh	r3, [r4, #12]
 8002180:	e7e2      	b.n	8002148 <__smakebuf_r+0xc>
 8002182:	89a3      	ldrh	r3, [r4, #12]
 8002184:	6020      	str	r0, [r4, #0]
 8002186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800218a:	81a3      	strh	r3, [r4, #12]
 800218c:	9b01      	ldr	r3, [sp, #4]
 800218e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002192:	b15b      	cbz	r3, 80021ac <__smakebuf_r+0x70>
 8002194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002198:	4630      	mov	r0, r6
 800219a:	f000 f80b 	bl	80021b4 <_isatty_r>
 800219e:	b128      	cbz	r0, 80021ac <__smakebuf_r+0x70>
 80021a0:	89a3      	ldrh	r3, [r4, #12]
 80021a2:	f023 0303 	bic.w	r3, r3, #3
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	81a3      	strh	r3, [r4, #12]
 80021ac:	89a3      	ldrh	r3, [r4, #12]
 80021ae:	431d      	orrs	r5, r3
 80021b0:	81a5      	strh	r5, [r4, #12]
 80021b2:	e7cf      	b.n	8002154 <__smakebuf_r+0x18>

080021b4 <_isatty_r>:
 80021b4:	b538      	push	{r3, r4, r5, lr}
 80021b6:	4d06      	ldr	r5, [pc, #24]	@ (80021d0 <_isatty_r+0x1c>)
 80021b8:	2300      	movs	r3, #0
 80021ba:	4604      	mov	r4, r0
 80021bc:	4608      	mov	r0, r1
 80021be:	602b      	str	r3, [r5, #0]
 80021c0:	f7fe fa33 	bl	800062a <_isatty>
 80021c4:	1c43      	adds	r3, r0, #1
 80021c6:	d102      	bne.n	80021ce <_isatty_r+0x1a>
 80021c8:	682b      	ldr	r3, [r5, #0]
 80021ca:	b103      	cbz	r3, 80021ce <_isatty_r+0x1a>
 80021cc:	6023      	str	r3, [r4, #0]
 80021ce:	bd38      	pop	{r3, r4, r5, pc}
 80021d0:	20000224 	.word	0x20000224

080021d4 <_lseek_r>:
 80021d4:	b538      	push	{r3, r4, r5, lr}
 80021d6:	4d07      	ldr	r5, [pc, #28]	@ (80021f4 <_lseek_r+0x20>)
 80021d8:	4604      	mov	r4, r0
 80021da:	4608      	mov	r0, r1
 80021dc:	4611      	mov	r1, r2
 80021de:	2200      	movs	r2, #0
 80021e0:	602a      	str	r2, [r5, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	f7fe fa2c 	bl	8000640 <_lseek>
 80021e8:	1c43      	adds	r3, r0, #1
 80021ea:	d102      	bne.n	80021f2 <_lseek_r+0x1e>
 80021ec:	682b      	ldr	r3, [r5, #0]
 80021ee:	b103      	cbz	r3, 80021f2 <_lseek_r+0x1e>
 80021f0:	6023      	str	r3, [r4, #0]
 80021f2:	bd38      	pop	{r3, r4, r5, pc}
 80021f4:	20000224 	.word	0x20000224

080021f8 <_read_r>:
 80021f8:	b538      	push	{r3, r4, r5, lr}
 80021fa:	4d07      	ldr	r5, [pc, #28]	@ (8002218 <_read_r+0x20>)
 80021fc:	4604      	mov	r4, r0
 80021fe:	4608      	mov	r0, r1
 8002200:	4611      	mov	r1, r2
 8002202:	2200      	movs	r2, #0
 8002204:	602a      	str	r2, [r5, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	f7fe f9ba 	bl	8000580 <_read>
 800220c:	1c43      	adds	r3, r0, #1
 800220e:	d102      	bne.n	8002216 <_read_r+0x1e>
 8002210:	682b      	ldr	r3, [r5, #0]
 8002212:	b103      	cbz	r3, 8002216 <_read_r+0x1e>
 8002214:	6023      	str	r3, [r4, #0]
 8002216:	bd38      	pop	{r3, r4, r5, pc}
 8002218:	20000224 	.word	0x20000224

0800221c <_sbrk_r>:
 800221c:	b538      	push	{r3, r4, r5, lr}
 800221e:	4d06      	ldr	r5, [pc, #24]	@ (8002238 <_sbrk_r+0x1c>)
 8002220:	2300      	movs	r3, #0
 8002222:	4604      	mov	r4, r0
 8002224:	4608      	mov	r0, r1
 8002226:	602b      	str	r3, [r5, #0]
 8002228:	f7fe fa18 	bl	800065c <_sbrk>
 800222c:	1c43      	adds	r3, r0, #1
 800222e:	d102      	bne.n	8002236 <_sbrk_r+0x1a>
 8002230:	682b      	ldr	r3, [r5, #0]
 8002232:	b103      	cbz	r3, 8002236 <_sbrk_r+0x1a>
 8002234:	6023      	str	r3, [r4, #0]
 8002236:	bd38      	pop	{r3, r4, r5, pc}
 8002238:	20000224 	.word	0x20000224

0800223c <_write_r>:
 800223c:	b538      	push	{r3, r4, r5, lr}
 800223e:	4d07      	ldr	r5, [pc, #28]	@ (800225c <_write_r+0x20>)
 8002240:	4604      	mov	r4, r0
 8002242:	4608      	mov	r0, r1
 8002244:	4611      	mov	r1, r2
 8002246:	2200      	movs	r2, #0
 8002248:	602a      	str	r2, [r5, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	f7fe f9b5 	bl	80005ba <_write>
 8002250:	1c43      	adds	r3, r0, #1
 8002252:	d102      	bne.n	800225a <_write_r+0x1e>
 8002254:	682b      	ldr	r3, [r5, #0]
 8002256:	b103      	cbz	r3, 800225a <_write_r+0x1e>
 8002258:	6023      	str	r3, [r4, #0]
 800225a:	bd38      	pop	{r3, r4, r5, pc}
 800225c:	20000224 	.word	0x20000224

08002260 <_close_r>:
 8002260:	b538      	push	{r3, r4, r5, lr}
 8002262:	4d06      	ldr	r5, [pc, #24]	@ (800227c <_close_r+0x1c>)
 8002264:	2300      	movs	r3, #0
 8002266:	4604      	mov	r4, r0
 8002268:	4608      	mov	r0, r1
 800226a:	602b      	str	r3, [r5, #0]
 800226c:	f7fe f9c1 	bl	80005f2 <_close>
 8002270:	1c43      	adds	r3, r0, #1
 8002272:	d102      	bne.n	800227a <_close_r+0x1a>
 8002274:	682b      	ldr	r3, [r5, #0]
 8002276:	b103      	cbz	r3, 800227a <_close_r+0x1a>
 8002278:	6023      	str	r3, [r4, #0]
 800227a:	bd38      	pop	{r3, r4, r5, pc}
 800227c:	20000224 	.word	0x20000224

08002280 <_fstat_r>:
 8002280:	b538      	push	{r3, r4, r5, lr}
 8002282:	4d07      	ldr	r5, [pc, #28]	@ (80022a0 <_fstat_r+0x20>)
 8002284:	2300      	movs	r3, #0
 8002286:	4604      	mov	r4, r0
 8002288:	4608      	mov	r0, r1
 800228a:	4611      	mov	r1, r2
 800228c:	602b      	str	r3, [r5, #0]
 800228e:	f7fe f9bc 	bl	800060a <_fstat>
 8002292:	1c43      	adds	r3, r0, #1
 8002294:	d102      	bne.n	800229c <_fstat_r+0x1c>
 8002296:	682b      	ldr	r3, [r5, #0]
 8002298:	b103      	cbz	r3, 800229c <_fstat_r+0x1c>
 800229a:	6023      	str	r3, [r4, #0]
 800229c:	bd38      	pop	{r3, r4, r5, pc}
 800229e:	bf00      	nop
 80022a0:	20000224 	.word	0x20000224

080022a4 <_free_r>:
 80022a4:	b538      	push	{r3, r4, r5, lr}
 80022a6:	4605      	mov	r5, r0
 80022a8:	2900      	cmp	r1, #0
 80022aa:	d041      	beq.n	8002330 <_free_r+0x8c>
 80022ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022b0:	1f0c      	subs	r4, r1, #4
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	bfb8      	it	lt
 80022b6:	18e4      	addlt	r4, r4, r3
 80022b8:	f7ff fe36 	bl	8001f28 <__malloc_lock>
 80022bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002334 <_free_r+0x90>)
 80022be:	6813      	ldr	r3, [r2, #0]
 80022c0:	b933      	cbnz	r3, 80022d0 <_free_r+0x2c>
 80022c2:	6063      	str	r3, [r4, #4]
 80022c4:	6014      	str	r4, [r2, #0]
 80022c6:	4628      	mov	r0, r5
 80022c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022cc:	f7ff be32 	b.w	8001f34 <__malloc_unlock>
 80022d0:	42a3      	cmp	r3, r4
 80022d2:	d908      	bls.n	80022e6 <_free_r+0x42>
 80022d4:	6820      	ldr	r0, [r4, #0]
 80022d6:	1821      	adds	r1, r4, r0
 80022d8:	428b      	cmp	r3, r1
 80022da:	bf01      	itttt	eq
 80022dc:	6819      	ldreq	r1, [r3, #0]
 80022de:	685b      	ldreq	r3, [r3, #4]
 80022e0:	1809      	addeq	r1, r1, r0
 80022e2:	6021      	streq	r1, [r4, #0]
 80022e4:	e7ed      	b.n	80022c2 <_free_r+0x1e>
 80022e6:	461a      	mov	r2, r3
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	b10b      	cbz	r3, 80022f0 <_free_r+0x4c>
 80022ec:	42a3      	cmp	r3, r4
 80022ee:	d9fa      	bls.n	80022e6 <_free_r+0x42>
 80022f0:	6811      	ldr	r1, [r2, #0]
 80022f2:	1850      	adds	r0, r2, r1
 80022f4:	42a0      	cmp	r0, r4
 80022f6:	d10b      	bne.n	8002310 <_free_r+0x6c>
 80022f8:	6820      	ldr	r0, [r4, #0]
 80022fa:	4401      	add	r1, r0
 80022fc:	1850      	adds	r0, r2, r1
 80022fe:	4283      	cmp	r3, r0
 8002300:	6011      	str	r1, [r2, #0]
 8002302:	d1e0      	bne.n	80022c6 <_free_r+0x22>
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	6053      	str	r3, [r2, #4]
 800230a:	4408      	add	r0, r1
 800230c:	6010      	str	r0, [r2, #0]
 800230e:	e7da      	b.n	80022c6 <_free_r+0x22>
 8002310:	d902      	bls.n	8002318 <_free_r+0x74>
 8002312:	230c      	movs	r3, #12
 8002314:	602b      	str	r3, [r5, #0]
 8002316:	e7d6      	b.n	80022c6 <_free_r+0x22>
 8002318:	6820      	ldr	r0, [r4, #0]
 800231a:	1821      	adds	r1, r4, r0
 800231c:	428b      	cmp	r3, r1
 800231e:	bf04      	itt	eq
 8002320:	6819      	ldreq	r1, [r3, #0]
 8002322:	685b      	ldreq	r3, [r3, #4]
 8002324:	6063      	str	r3, [r4, #4]
 8002326:	bf04      	itt	eq
 8002328:	1809      	addeq	r1, r1, r0
 800232a:	6021      	streq	r1, [r4, #0]
 800232c:	6054      	str	r4, [r2, #4]
 800232e:	e7ca      	b.n	80022c6 <_free_r+0x22>
 8002330:	bd38      	pop	{r3, r4, r5, pc}
 8002332:	bf00      	nop
 8002334:	20000220 	.word	0x20000220

08002338 <_init>:
 8002338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233a:	bf00      	nop
 800233c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800233e:	bc08      	pop	{r3}
 8002340:	469e      	mov	lr, r3
 8002342:	4770      	bx	lr

08002344 <_fini>:
 8002344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002346:	bf00      	nop
 8002348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800234a:	bc08      	pop	{r3}
 800234c:	469e      	mov	lr, r3
 800234e:	4770      	bx	lr
