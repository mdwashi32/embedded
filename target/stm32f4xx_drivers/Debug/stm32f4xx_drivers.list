
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002488  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08002618  08002618  00003618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002714  08002714  0000407c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002714  08002714  00003714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800271c  0800271c  0000407c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800271c  0800271c  0000371c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002720  08002720  00003720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08002724  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000407c  2**0
                  CONTENTS
 10 .bss          000001ac  2000007c  2000007c  0000407c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000228  20000228  0000407c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002812  00000000  00000000  000040ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ac6  00000000  00000000  000068be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000340  00000000  00000000  00007388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000025d  00000000  00000000  000076c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003e55  00000000  00000000  00007925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003c5f  00000000  00000000  0000b77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000d528  00000000  00000000  0000f3d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001c901  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001404  00000000  00000000  0001c944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  0001dd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002600 	.word	0x08002600

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08002600 	.word	0x08002600

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <init_systick_timer>:
#include "ds1307.h"

#define  SYSTICK_TIM_CLK 16000000UL

void init_systick_timer(uint32_t tick_hz) //systick timer interrupt every second
{
 8000270:	b480      	push	{r7}
 8000272:	b087      	sub	sp, #28
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014; //systick timer registers
 8000278:	4b15      	ldr	r3, [pc, #84]	@ (80002d0 <init_systick_timer+0x60>)
 800027a:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 800027c:	4b15      	ldr	r3, [pc, #84]	@ (80002d4 <init_systick_timer+0x64>)
 800027e:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 8000280:	4a15      	ldr	r2, [pc, #84]	@ (80002d8 <init_systick_timer+0x68>)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	fbb2 f3f3 	udiv	r3, r2, r3
 8000288:	3b01      	subs	r3, #1
 800028a:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 800028c:	697b      	ldr	r3, [r7, #20]
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 8000292:	697b      	ldr	r3, [r7, #20]
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	431a      	orrs	r2, r3
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 800029e:	693b      	ldr	r3, [r7, #16]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f043 0202 	orr.w	r2, r3, #2
 80002a6:	693b      	ldr	r3, [r7, #16]
 80002a8:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80002aa:	693b      	ldr	r3, [r7, #16]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f043 0204 	orr.w	r2, r3, #4
 80002b2:	693b      	ldr	r3, [r7, #16]
 80002b4:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f043 0201 	orr.w	r2, r3, #1
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	601a      	str	r2, [r3, #0]

}
 80002c2:	bf00      	nop
 80002c4:	371c      	adds	r7, #28
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	e000e014 	.word	0xe000e014
 80002d4:	e000e010 	.word	0xe000e010
 80002d8:	00f42400 	.word	0x00f42400

080002dc <get_day_of_week>:

char* get_day_of_week(uint8_t day)
{
 80002dc:	b4b0      	push	{r4, r5, r7}
 80002de:	b08b      	sub	sp, #44	@ 0x2c
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
	char* days[] = {"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};
 80002e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000314 <get_day_of_week+0x38>)
 80002e8:	f107 040c 	add.w	r4, r7, #12
 80002ec:	461d      	mov	r5, r3
 80002ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return days[day - 1];
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	3b01      	subs	r3, #1
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	3328      	adds	r3, #40	@ 0x28
 8000302:	443b      	add	r3, r7
 8000304:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8000308:	4618      	mov	r0, r3
 800030a:	372c      	adds	r7, #44	@ 0x2c
 800030c:	46bd      	mov	sp, r7
 800030e:	bcb0      	pop	{r4, r5, r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	0800265c 	.word	0x0800265c

08000318 <number_to_string>:

void number_to_string(uint8_t num, char* buffer)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	6039      	str	r1, [r7, #0]
 8000322:	71fb      	strb	r3, [r7, #7]
	if(num < 10)
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	2b09      	cmp	r3, #9
 8000328:	d809      	bhi.n	800033e <number_to_string+0x26>
	{
		buffer[0] = '0';
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	2230      	movs	r2, #48	@ 0x30
 800032e:	701a      	strb	r2, [r3, #0]
		buffer[1] = num + 48; // ascii value of a number is number + 48
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	3301      	adds	r3, #1
 8000334:	79fa      	ldrb	r2, [r7, #7]
 8000336:	3230      	adds	r2, #48	@ 0x30
 8000338:	b2d2      	uxtb	r2, r2
 800033a:	701a      	strb	r2, [r3, #0]
	else if (num >= 10 && num < 99)
	{
		buffer[0] = (num / 10) + 48;
		buffer[1] = (num % 10 ) + 48;
	}
}
 800033c:	e01f      	b.n	800037e <number_to_string+0x66>
	else if (num >= 10 && num < 99)
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	2b09      	cmp	r3, #9
 8000342:	d91c      	bls.n	800037e <number_to_string+0x66>
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	2b62      	cmp	r3, #98	@ 0x62
 8000348:	d819      	bhi.n	800037e <number_to_string+0x66>
		buffer[0] = (num / 10) + 48;
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	4a0f      	ldr	r2, [pc, #60]	@ (800038c <number_to_string+0x74>)
 800034e:	fba2 2303 	umull	r2, r3, r2, r3
 8000352:	08db      	lsrs	r3, r3, #3
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3330      	adds	r3, #48	@ 0x30
 8000358:	b2da      	uxtb	r2, r3
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	701a      	strb	r2, [r3, #0]
		buffer[1] = (num % 10 ) + 48;
 800035e:	79fa      	ldrb	r2, [r7, #7]
 8000360:	4b0a      	ldr	r3, [pc, #40]	@ (800038c <number_to_string+0x74>)
 8000362:	fba3 1302 	umull	r1, r3, r3, r2
 8000366:	08d9      	lsrs	r1, r3, #3
 8000368:	460b      	mov	r3, r1
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	440b      	add	r3, r1
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	1ad3      	subs	r3, r2, r3
 8000372:	b2da      	uxtb	r2, r3
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	3301      	adds	r3, #1
 8000378:	3230      	adds	r2, #48	@ 0x30
 800037a:	b2d2      	uxtb	r2, r2
 800037c:	701a      	strb	r2, [r3, #0]
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	cccccccd 	.word	0xcccccccd

08000390 <time_to_string>:

// format: hh:mm:ss
char* time_to_string(RTC_Time_t *rtc_time)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	static char buffer[9];

	buffer[2] = ':';
 8000398:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <time_to_string+0x48>)
 800039a:	223a      	movs	r2, #58	@ 0x3a
 800039c:	709a      	strb	r2, [r3, #2]
	buffer[5] = ':';
 800039e:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <time_to_string+0x48>)
 80003a0:	223a      	movs	r2, #58	@ 0x3a
 80003a2:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours,buffer);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	789b      	ldrb	r3, [r3, #2]
 80003a8:	490b      	ldr	r1, [pc, #44]	@ (80003d8 <time_to_string+0x48>)
 80003aa:	4618      	mov	r0, r3
 80003ac:	f7ff ffb4 	bl	8000318 <number_to_string>
	number_to_string(rtc_time->minutes,&buffer[3]);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	785b      	ldrb	r3, [r3, #1]
 80003b4:	4909      	ldr	r1, [pc, #36]	@ (80003dc <time_to_string+0x4c>)
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff ffae 	bl	8000318 <number_to_string>
	number_to_string(rtc_time->seconds,&buffer[6]);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	4907      	ldr	r1, [pc, #28]	@ (80003e0 <time_to_string+0x50>)
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ffa8 	bl	8000318 <number_to_string>

	buffer[8] = '\0';
 80003c8:	4b03      	ldr	r3, [pc, #12]	@ (80003d8 <time_to_string+0x48>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	721a      	strb	r2, [r3, #8]

	return buffer;
 80003ce:	4b02      	ldr	r3, [pc, #8]	@ (80003d8 <time_to_string+0x48>)
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000098 	.word	0x20000098
 80003dc:	2000009b 	.word	0x2000009b
 80003e0:	2000009e 	.word	0x2000009e

080003e4 <date_to_string>:

// format: dd/mm/yy
char* date_to_string(RTC_Date_t *rtc_date)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	static char buffer[9];

	buffer[2] = '/';
 80003ec:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <date_to_string+0x48>)
 80003ee:	222f      	movs	r2, #47	@ 0x2f
 80003f0:	709a      	strb	r2, [r3, #2]
	buffer[5] = '/';
 80003f2:	4b0e      	ldr	r3, [pc, #56]	@ (800042c <date_to_string+0x48>)
 80003f4:	222f      	movs	r2, #47	@ 0x2f
 80003f6:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->day,buffer);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	490b      	ldr	r1, [pc, #44]	@ (800042c <date_to_string+0x48>)
 80003fe:	4618      	mov	r0, r3
 8000400:	f7ff ff8a 	bl	8000318 <number_to_string>
	number_to_string(rtc_date->month,&buffer[3]);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	789b      	ldrb	r3, [r3, #2]
 8000408:	4909      	ldr	r1, [pc, #36]	@ (8000430 <date_to_string+0x4c>)
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff ff84 	bl	8000318 <number_to_string>
	number_to_string(rtc_date->year,&buffer[6]);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	78db      	ldrb	r3, [r3, #3]
 8000414:	4907      	ldr	r1, [pc, #28]	@ (8000434 <date_to_string+0x50>)
 8000416:	4618      	mov	r0, r3
 8000418:	f7ff ff7e 	bl	8000318 <number_to_string>

	buffer[8] = '\0';
 800041c:	4b03      	ldr	r3, [pc, #12]	@ (800042c <date_to_string+0x48>)
 800041e:	2200      	movs	r2, #0
 8000420:	721a      	strb	r2, [r3, #8]

	return buffer;
 8000422:	4b02      	ldr	r3, [pc, #8]	@ (800042c <date_to_string+0x48>)
}
 8000424:	4618      	mov	r0, r3
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	200000a4 	.word	0x200000a4
 8000430:	200000a7 	.word	0x200000a7
 8000434:	200000aa 	.word	0x200000aa

08000438 <main>:



int main(void)
{
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
	RTC_Time_t current_time;
	RTC_Date_t current_date;

	printf("RTC test\n");
 800043e:	4831      	ldr	r0, [pc, #196]	@ (8000504 <main+0xcc>)
 8000440:	f001 fa7e 	bl	8001940 <puts>

	if(ds1307_init())
 8000444:	f000 f9ac 	bl	80007a0 <ds1307_init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d004      	beq.n	8000458 <main+0x20>
	{
		printf("Init has failed\n");
 800044e:	482e      	ldr	r0, [pc, #184]	@ (8000508 <main+0xd0>)
 8000450:	f001 fa76 	bl	8001940 <puts>
		while(1);
 8000454:	bf00      	nop
 8000456:	e7fd      	b.n	8000454 <main+0x1c>
	}

	init_systick_timer(1);
 8000458:	2001      	movs	r0, #1
 800045a:	f7ff ff09 	bl	8000270 <init_systick_timer>

	current_date.day = TUESDAY;
 800045e:	2303      	movs	r3, #3
 8000460:	713b      	strb	r3, [r7, #4]
	current_date.date = 12;
 8000462:	230c      	movs	r3, #12
 8000464:	717b      	strb	r3, [r7, #5]
	current_date.month = 8;
 8000466:	2308      	movs	r3, #8
 8000468:	71bb      	strb	r3, [r7, #6]
	current_date.year = 25;
 800046a:	2319      	movs	r3, #25
 800046c:	71fb      	strb	r3, [r7, #7]

	current_time.hours = 10;
 800046e:	230a      	movs	r3, #10
 8000470:	72bb      	strb	r3, [r7, #10]
	current_time.minutes = 59;
 8000472:	233b      	movs	r3, #59	@ 0x3b
 8000474:	727b      	strb	r3, [r7, #9]
	current_time.seconds = 40;
 8000476:	2328      	movs	r3, #40	@ 0x28
 8000478:	723b      	strb	r3, [r7, #8]
	current_time.time_format = TIME_FORMAT_12HRS_AM;
 800047a:	2300      	movs	r3, #0
 800047c:	72fb      	strb	r3, [r7, #11]

	ds1307_set_current_date(&current_date);
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	4618      	mov	r0, r3
 8000482:	f000 fa3f 	bl	8000904 <ds1307_set_current_date>
	ds1307_set_current_time(&current_time);
 8000486:	f107 0308 	add.w	r3, r7, #8
 800048a:	4618      	mov	r0, r3
 800048c:	f000 f9a6 	bl	80007dc <ds1307_set_current_time>

	ds1307_get_current_date(&current_date);
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	4618      	mov	r0, r3
 8000494:	f000 fa66 	bl	8000964 <ds1307_get_current_date>
	ds1307_get_current_time(&current_time);
 8000498:	f107 0308 	add.w	r3, r7, #8
 800049c:	4618      	mov	r0, r3
 800049e:	f000 f9eb 	bl	8000878 <ds1307_get_current_time>

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS)
 80004a2:	7afb      	ldrb	r3, [r7, #11]
 80004a4:	2b02      	cmp	r3, #2
 80004a6:	d012      	beq.n	80004ce <main+0x96>
	{
		am_pm = (current_time.time_format) ? "PM" : "AM";
 80004a8:	7afb      	ldrb	r3, [r7, #11]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <main+0x7a>
 80004ae:	4b17      	ldr	r3, [pc, #92]	@ (800050c <main+0xd4>)
 80004b0:	e000      	b.n	80004b4 <main+0x7c>
 80004b2:	4b17      	ldr	r3, [pc, #92]	@ (8000510 <main+0xd8>)
 80004b4:	60fb      	str	r3, [r7, #12]
				printf("Current time: <%s %s>\n",time_to_string(&current_time),am_pm); // e.g. 4:25:41 PM
 80004b6:	f107 0308 	add.w	r3, r7, #8
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff ff68 	bl	8000390 <time_to_string>
 80004c0:	4603      	mov	r3, r0
 80004c2:	68fa      	ldr	r2, [r7, #12]
 80004c4:	4619      	mov	r1, r3
 80004c6:	4813      	ldr	r0, [pc, #76]	@ (8000514 <main+0xdc>)
 80004c8:	f001 f9d2 	bl	8001870 <iprintf>
 80004cc:	e009      	b.n	80004e2 <main+0xaa>
	}
	else
	{
		printf("Current time: <%s>\n",time_to_string(&current_time));
 80004ce:	f107 0308 	add.w	r3, r7, #8
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff ff5c 	bl	8000390 <time_to_string>
 80004d8:	4603      	mov	r3, r0
 80004da:	4619      	mov	r1, r3
 80004dc:	480e      	ldr	r0, [pc, #56]	@ (8000518 <main+0xe0>)
 80004de:	f001 f9c7 	bl	8001870 <iprintf>
	}

	printf("Current date: <%s, %s>\n",get_day_of_week(current_date.day),date_to_string(&current_date));
 80004e2:	793b      	ldrb	r3, [r7, #4]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff fef9 	bl	80002dc <get_day_of_week>
 80004ea:	4604      	mov	r4, r0
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff ff78 	bl	80003e4 <date_to_string>
 80004f4:	4603      	mov	r3, r0
 80004f6:	461a      	mov	r2, r3
 80004f8:	4621      	mov	r1, r4
 80004fa:	4808      	ldr	r0, [pc, #32]	@ (800051c <main+0xe4>)
 80004fc:	f001 f9b8 	bl	8001870 <iprintf>


	while(1);
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <main+0xc8>
 8000504:	08002678 	.word	0x08002678
 8000508:	08002684 	.word	0x08002684
 800050c:	08002694 	.word	0x08002694
 8000510:	08002698 	.word	0x08002698
 8000514:	0800269c 	.word	0x0800269c
 8000518:	080026b4 	.word	0x080026b4
 800051c:	080026c8 	.word	0x080026c8

08000520 <SysTick_Handler>:
	return 0;
}

void SysTick_Handler(void)
{
 8000520:	b590      	push	{r4, r7, lr}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
	RTC_Time_t current_time;
	RTC_Date_t current_date;
	ds1307_get_current_time(&current_time);
 8000526:	f107 0308 	add.w	r3, r7, #8
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f9a4 	bl	8000878 <ds1307_get_current_time>
	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS)
 8000530:	7afb      	ldrb	r3, [r7, #11]
 8000532:	2b02      	cmp	r3, #2
 8000534:	d012      	beq.n	800055c <SysTick_Handler+0x3c>
	{
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8000536:	7afb      	ldrb	r3, [r7, #11]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <SysTick_Handler+0x20>
 800053c:	4b18      	ldr	r3, [pc, #96]	@ (80005a0 <SysTick_Handler+0x80>)
 800053e:	e000      	b.n	8000542 <SysTick_Handler+0x22>
 8000540:	4b18      	ldr	r3, [pc, #96]	@ (80005a4 <SysTick_Handler+0x84>)
 8000542:	60fb      	str	r3, [r7, #12]
				printf("Current time: <%s %s>\n",time_to_string(&current_time),am_pm); // e.g. 4:25:41 PM
 8000544:	f107 0308 	add.w	r3, r7, #8
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff ff21 	bl	8000390 <time_to_string>
 800054e:	4603      	mov	r3, r0
 8000550:	68fa      	ldr	r2, [r7, #12]
 8000552:	4619      	mov	r1, r3
 8000554:	4814      	ldr	r0, [pc, #80]	@ (80005a8 <SysTick_Handler+0x88>)
 8000556:	f001 f98b 	bl	8001870 <iprintf>
 800055a:	e009      	b.n	8000570 <SysTick_Handler+0x50>
	}
	else
	{
		printf("Current time: <%s>\n",time_to_string(&current_time));
 800055c:	f107 0308 	add.w	r3, r7, #8
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ff15 	bl	8000390 <time_to_string>
 8000566:	4603      	mov	r3, r0
 8000568:	4619      	mov	r1, r3
 800056a:	4810      	ldr	r0, [pc, #64]	@ (80005ac <SysTick_Handler+0x8c>)
 800056c:	f001 f980 	bl	8001870 <iprintf>
	}

	ds1307_get_current_date(&current_date);
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f9f6 	bl	8000964 <ds1307_get_current_date>
	printf("Current date: <%s, %s>\n",get_day_of_week(current_date.day),date_to_string(&current_date));
 8000578:	793b      	ldrb	r3, [r7, #4]
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff feae 	bl	80002dc <get_day_of_week>
 8000580:	4604      	mov	r4, r0
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff2d 	bl	80003e4 <date_to_string>
 800058a:	4603      	mov	r3, r0
 800058c:	461a      	mov	r2, r3
 800058e:	4621      	mov	r1, r4
 8000590:	4807      	ldr	r0, [pc, #28]	@ (80005b0 <SysTick_Handler+0x90>)
 8000592:	f001 f96d 	bl	8001870 <iprintf>
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	bd90      	pop	{r4, r7, pc}
 800059e:	bf00      	nop
 80005a0:	08002694 	.word	0x08002694
 80005a4:	08002698 	.word	0x08002698
 80005a8:	0800269c 	.word	0x0800269c
 80005ac:	080026b4 	.word	0x080026b4
 80005b0:	080026c8 	.word	0x080026c8

080005b4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80005be:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <ITM_SendChar+0x48>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a0e      	ldr	r2, [pc, #56]	@ (80005fc <ITM_SendChar+0x48>)
 80005c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005c8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80005ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000600 <ITM_SendChar+0x4c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a0c      	ldr	r2, [pc, #48]	@ (8000600 <ITM_SendChar+0x4c>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80005d6:	bf00      	nop
 80005d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f8      	beq.n	80005d8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80005e6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	6013      	str	r3, [r2, #0]
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000edfc 	.word	0xe000edfc
 8000600:	e0000e00 	.word	0xe0000e00

08000604 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	e00a      	b.n	800062c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000616:	f3af 8000 	nop.w
 800061a:	4601      	mov	r1, r0
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	1c5a      	adds	r2, r3, #1
 8000620:	60ba      	str	r2, [r7, #8]
 8000622:	b2ca      	uxtb	r2, r1
 8000624:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	3301      	adds	r3, #1
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	697a      	ldr	r2, [r7, #20]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	429a      	cmp	r2, r3
 8000632:	dbf0      	blt.n	8000616 <_read+0x12>
  }

  return len;
 8000634:	687b      	ldr	r3, [r7, #4]
}
 8000636:	4618      	mov	r0, r3
 8000638:	3718      	adds	r7, #24
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b086      	sub	sp, #24
 8000642:	af00      	add	r7, sp, #0
 8000644:	60f8      	str	r0, [r7, #12]
 8000646:	60b9      	str	r1, [r7, #8]
 8000648:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	e009      	b.n	8000664 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	1c5a      	adds	r2, r3, #1
 8000654:	60ba      	str	r2, [r7, #8]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ffab 	bl	80005b4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	3301      	adds	r3, #1
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	697a      	ldr	r2, [r7, #20]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	429a      	cmp	r2, r3
 800066a:	dbf1      	blt.n	8000650 <_write+0x12>
  }
  return len;
 800066c:	687b      	ldr	r3, [r7, #4]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <_close>:

int _close(int file)
{
 8000676:	b480      	push	{r7}
 8000678:	b083      	sub	sp, #12
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800067e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000682:	4618      	mov	r0, r3
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800069e:	605a      	str	r2, [r3, #4]
  return 0;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <_isatty>:

int _isatty(int file)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006b6:	2301      	movs	r3, #1
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006d0:	2300      	movs	r3, #0
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
	...

080006e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e8:	4a14      	ldr	r2, [pc, #80]	@ (800073c <_sbrk+0x5c>)
 80006ea:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <_sbrk+0x60>)
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f4:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <_sbrk+0x64>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d102      	bne.n	8000702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <_sbrk+0x64>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	@ (8000748 <_sbrk+0x68>)
 8000700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <_sbrk+0x64>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4413      	add	r3, r2
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	429a      	cmp	r2, r3
 800070e:	d207      	bcs.n	8000720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000710:	f001 f926 	bl	8001960 <__errno>
 8000714:	4603      	mov	r3, r0
 8000716:	220c      	movs	r2, #12
 8000718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800071a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800071e:	e009      	b.n	8000734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000720:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <_sbrk+0x64>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000726:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <_sbrk+0x64>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	4a05      	ldr	r2, [pc, #20]	@ (8000744 <_sbrk+0x64>)
 8000730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000732:	68fb      	ldr	r3, [r7, #12]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20020000 	.word	0x20020000
 8000740:	00000400 	.word	0x00000400
 8000744:	200000b0 	.word	0x200000b0
 8000748:	20000228 	.word	0x20000228

0800074c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800074c:	480d      	ldr	r0, [pc, #52]	@ (8000784 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800074e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000750:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000754:	480c      	ldr	r0, [pc, #48]	@ (8000788 <LoopForever+0x6>)
  ldr r1, =_edata
 8000756:	490d      	ldr	r1, [pc, #52]	@ (800078c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000758:	4a0d      	ldr	r2, [pc, #52]	@ (8000790 <LoopForever+0xe>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800075c:	e002      	b.n	8000764 <LoopCopyDataInit>

0800075e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000762:	3304      	adds	r3, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000768:	d3f9      	bcc.n	800075e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076a:	4a0a      	ldr	r2, [pc, #40]	@ (8000794 <LoopForever+0x12>)
  ldr r4, =_ebss
 800076c:	4c0a      	ldr	r4, [pc, #40]	@ (8000798 <LoopForever+0x16>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000770:	e001      	b.n	8000776 <LoopFillZerobss>

08000772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000774:	3204      	adds	r2, #4

08000776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000778:	d3fb      	bcc.n	8000772 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800077a:	f001 f8f7 	bl	800196c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077e:	f7ff fe5b 	bl	8000438 <main>

08000782 <LoopForever>:

LoopForever:
  b LoopForever
 8000782:	e7fe      	b.n	8000782 <LoopForever>
  ldr   r0, =_estack
 8000784:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800078c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000790:	08002724 	.word	0x08002724
  ldr r2, =_sbss
 8000794:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000798:	20000228 	.word	0x20000228

0800079c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800079c:	e7fe      	b.n	800079c <ADC_IRQHandler>
	...

080007a0 <ds1307_init>:

//returns 1? CH = 1 i.e. clock halted
//returns 0? CH= 0 i.e. clock not halted

uint8_t ds1307_init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
	//1. initialize i2c pins
	ds1307_i2c_pin_config();
 80007a6:	f000 f911 	bl	80009cc <ds1307_i2c_pin_config>

	//2. initialize i2c peripheral
	ds1307_i2c_config();
 80007aa:	f000 f94b 	bl	8000a44 <ds1307_i2c_config>

	//3. Enable I2C Peripheral
	I2C_PeripheralControl(DS1307_I2C, ENABLE);
 80007ae:	2101      	movs	r1, #1
 80007b0:	4809      	ldr	r0, [pc, #36]	@ (80007d8 <ds1307_init+0x38>)
 80007b2:	f000 ff1a 	bl	80015ea <I2C_PeripheralControl>

	//4. Disable clock halt
	ds1307_write(0, DS1307_ADDR_SEC);
 80007b6:	2100      	movs	r1, #0
 80007b8:	2000      	movs	r0, #0
 80007ba:	f000 f959 	bl	8000a70 <ds1307_write>

	//5. Read back clock halt bit
	uint8_t clock_state = ds1307_read(DS1307_ADDR_SEC);
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 f972 	bl	8000aa8 <ds1307_read>
 80007c4:	4603      	mov	r3, r0
 80007c6:	71fb      	strb	r3, [r7, #7]

	return (clock_state >> 7) & 0x1; // return only halt state
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	09db      	lsrs	r3, r3, #7
 80007cc:	b2db      	uxtb	r3, r3
	//returns 1? CH = 1 i.e. clock halted; init failed!
	//returns 0? CH= 0 i.e. clock not halted; init success.
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40005400 	.word	0x40005400

080007dc <ds1307_set_current_time>:

void ds1307_set_current_time(RTC_Time_t *rtc_time)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hours;
	seconds = binary_to_bcd(rtc_time->seconds);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 f97b 	bl	8000ae4 <binary_to_bcd>
 80007ee:	4603      	mov	r3, r0
 80007f0:	73fb      	strb	r3, [r7, #15]
	seconds &= ~( 1<< 7); // clear clock halt bit just in case
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80007f8:	73fb      	strb	r3, [r7, #15]
	ds1307_write(seconds, DS1307_ADDR_SEC);
 80007fa:	7bfb      	ldrb	r3, [r7, #15]
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f936 	bl	8000a70 <ds1307_write>

	ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MIN);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	785b      	ldrb	r3, [r3, #1]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f96b 	bl	8000ae4 <binary_to_bcd>
 800080e:	4603      	mov	r3, r0
 8000810:	2101      	movs	r1, #1
 8000812:	4618      	mov	r0, r3
 8000814:	f000 f92c 	bl	8000a70 <ds1307_write>

	hours = binary_to_bcd(rtc_time->hours);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	789b      	ldrb	r3, [r3, #2]
 800081c:	4618      	mov	r0, r3
 800081e:	f000 f961 	bl	8000ae4 <binary_to_bcd>
 8000822:	4603      	mov	r3, r0
 8000824:	73bb      	strb	r3, [r7, #14]
	if (rtc_time->time_format == TIME_FORMAT_24HRS)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	78db      	ldrb	r3, [r3, #3]
 800082a:	2b02      	cmp	r3, #2
 800082c:	d104      	bne.n	8000838 <ds1307_set_current_time+0x5c>
	{
		hours &= ~(1 << 6);
 800082e:	7bbb      	ldrb	r3, [r7, #14]
 8000830:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000834:	73bb      	strb	r3, [r7, #14]
 8000836:	e011      	b.n	800085c <ds1307_set_current_time+0x80>
	}
	else
	{
		hours |= (1 << 6);
 8000838:	7bbb      	ldrb	r3, [r7, #14]
 800083a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800083e:	73bb      	strb	r3, [r7, #14]
		hours = (rtc_time->time_format == TIME_FORMAT_12HRS_PM)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	78db      	ldrb	r3, [r3, #3]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d104      	bne.n	8000852 <ds1307_set_current_time+0x76>
 8000848:	7bbb      	ldrb	r3, [r7, #14]
 800084a:	f043 0320 	orr.w	r3, r3, #32
 800084e:	b2db      	uxtb	r3, r3
 8000850:	e003      	b.n	800085a <ds1307_set_current_time+0x7e>
 8000852:	7bbb      	ldrb	r3, [r7, #14]
 8000854:	f023 0320 	bic.w	r3, r3, #32
 8000858:	b2db      	uxtb	r3, r3
 800085a:	73bb      	strb	r3, [r7, #14]
				? hours | (1 << 5)
				: hours & ~(1 << 5);
	}
	ds1307_write(binary_to_bcd(rtc_time->hours), DS1307_ADDR_HRS);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	789b      	ldrb	r3, [r3, #2]
 8000860:	4618      	mov	r0, r3
 8000862:	f000 f93f 	bl	8000ae4 <binary_to_bcd>
 8000866:	4603      	mov	r3, r0
 8000868:	2102      	movs	r1, #2
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f900 	bl	8000a70 <ds1307_write>
}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <ds1307_get_current_time>:

void ds1307_get_current_time(RTC_Time_t *rtc_time)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hours;

	seconds = ds1307_read(DS1307_ADDR_SEC);
 8000880:	2000      	movs	r0, #0
 8000882:	f000 f911 	bl	8000aa8 <ds1307_read>
 8000886:	4603      	mov	r3, r0
 8000888:	73fb      	strb	r3, [r7, #15]
	seconds &= ~(1 << 7); // clear CH bit
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000890:	73fb      	strb	r3, [r7, #15]
	rtc_time->seconds = bcd_to_binary(seconds);
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	4618      	mov	r0, r3
 8000896:	f000 f953 	bl	8000b40 <bcd_to_binary>
 800089a:	4603      	mov	r3, r0
 800089c:	461a      	mov	r2, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	701a      	strb	r2, [r3, #0]

	rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MIN));
 80008a2:	2001      	movs	r0, #1
 80008a4:	f000 f900 	bl	8000aa8 <ds1307_read>
 80008a8:	4603      	mov	r3, r0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f948 	bl	8000b40 <bcd_to_binary>
 80008b0:	4603      	mov	r3, r0
 80008b2:	461a      	mov	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	705a      	strb	r2, [r3, #1]

	hours = ds1307_read(DS1307_ADDR_HRS);
 80008b8:	2002      	movs	r0, #2
 80008ba:	f000 f8f5 	bl	8000aa8 <ds1307_read>
 80008be:	4603      	mov	r3, r0
 80008c0:	73bb      	strb	r3, [r7, #14]
	if(hours & (1 << 6))
 80008c2:	7bbb      	ldrb	r3, [r7, #14]
 80008c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d00c      	beq.n	80008e6 <ds1307_get_current_time+0x6e>
	{
		//12 hours format
		if (hours & (1 << 5))
 80008cc:	7bbb      	ldrb	r3, [r7, #14]
 80008ce:	f003 0320 	and.w	r3, r3, #32
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d003      	beq.n	80008de <ds1307_get_current_time+0x66>
		{
			rtc_time->time_format = TIME_FORMAT_12HRS_PM;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2201      	movs	r2, #1
 80008da:	70da      	strb	r2, [r3, #3]
 80008dc:	e006      	b.n	80008ec <ds1307_get_current_time+0x74>

		}

		else
		{
			rtc_time-> time_format = TIME_FORMAT_12HRS_AM;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2200      	movs	r2, #0
 80008e2:	70da      	strb	r2, [r3, #3]
 80008e4:	e002      	b.n	80008ec <ds1307_get_current_time+0x74>
		}
	}
	else
	{
		//24 hour format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2202      	movs	r2, #2
 80008ea:	70da      	strb	r2, [r3, #3]
	}
	rtc_time->hours = bcd_to_binary(hours);
 80008ec:	7bbb      	ldrb	r3, [r7, #14]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f926 	bl	8000b40 <bcd_to_binary>
 80008f4:	4603      	mov	r3, r0
 80008f6:	461a      	mov	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	709a      	strb	r2, [r3, #2]

}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_Date_t *rtc_date)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	ds1307_write(binary_to_bcd(rtc_date->date), DS1307_ADDR_DATE);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	785b      	ldrb	r3, [r3, #1]
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f8e7 	bl	8000ae4 <binary_to_bcd>
 8000916:	4603      	mov	r3, r0
 8000918:	2104      	movs	r1, #4
 800091a:	4618      	mov	r0, r3
 800091c:	f000 f8a8 	bl	8000a70 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	789b      	ldrb	r3, [r3, #2]
 8000924:	4618      	mov	r0, r3
 8000926:	f000 f8dd 	bl	8000ae4 <binary_to_bcd>
 800092a:	4603      	mov	r3, r0
 800092c:	2105      	movs	r1, #5
 800092e:	4618      	mov	r0, r3
 8000930:	f000 f89e 	bl	8000a70 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	4618      	mov	r0, r3
 800093a:	f000 f8d3 	bl	8000ae4 <binary_to_bcd>
 800093e:	4603      	mov	r3, r0
 8000940:	2103      	movs	r1, #3
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f894 	bl	8000a70 <ds1307_write>
	ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	78db      	ldrb	r3, [r3, #3]
 800094c:	4618      	mov	r0, r3
 800094e:	f000 f8c9 	bl	8000ae4 <binary_to_bcd>
 8000952:	4603      	mov	r3, r0
 8000954:	2106      	movs	r1, #6
 8000956:	4618      	mov	r0, r3
 8000958:	f000 f88a 	bl	8000a70 <ds1307_write>
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_Date_t *rtc_date)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 800096c:	2004      	movs	r0, #4
 800096e:	f000 f89b 	bl	8000aa8 <ds1307_read>
 8000972:	4603      	mov	r3, r0
 8000974:	4618      	mov	r0, r3
 8000976:	f000 f8e3 	bl	8000b40 <bcd_to_binary>
 800097a:	4603      	mov	r3, r0
 800097c:	461a      	mov	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	705a      	strb	r2, [r3, #1]
	rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 8000982:	2005      	movs	r0, #5
 8000984:	f000 f890 	bl	8000aa8 <ds1307_read>
 8000988:	4603      	mov	r3, r0
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f8d8 	bl	8000b40 <bcd_to_binary>
 8000990:	4603      	mov	r3, r0
 8000992:	461a      	mov	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	709a      	strb	r2, [r3, #2]
	rtc_date->day = bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 8000998:	2003      	movs	r0, #3
 800099a:	f000 f885 	bl	8000aa8 <ds1307_read>
 800099e:	4603      	mov	r3, r0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 f8cd 	bl	8000b40 <bcd_to_binary>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	701a      	strb	r2, [r3, #0]
	rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 80009ae:	2006      	movs	r0, #6
 80009b0:	f000 f87a 	bl	8000aa8 <ds1307_read>
 80009b4:	4603      	mov	r3, r0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f8c2 	bl	8000b40 <bcd_to_binary>
 80009bc:	4603      	mov	r3, r0
 80009be:	461a      	mov	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	70da      	strb	r2, [r3, #3]
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <ds1307_i2c_pin_config>:

static void ds1307_i2c_pin_config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda, i2c_scl;

	memset(&i2c_sda,0,sizeof(i2c_sda));
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	220c      	movs	r2, #12
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 ffb8 	bl	8001950 <memset>
	memset(&i2c_scl,0,sizeof(i2c_scl));
 80009e0:	463b      	mov	r3, r7
 80009e2:	220c      	movs	r2, #12
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 ffb2 	bl	8001950 <memset>
	/*
	 * I2C1_SCL -> PB6
	 * I2C1_SDA -> PB7
	 */

	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <ds1307_i2c_pin_config+0x74>)
 80009ee:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80009f0:	2304      	movs	r3, #4
 80009f2:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80009f4:	2302      	movs	r3, #2
 80009f6:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 80009f8:	2307      	movs	r3, #7
 80009fa:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80009fc:	2301      	movs	r3, #1
 80009fe:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000a00:	2301      	movs	r3, #1
 8000a02:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a04:	2302      	movs	r3, #2
 8000a06:	74bb      	strb	r3, [r7, #18]
	GPIO_Init(&i2c_sda);
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 f99b 	bl	8000d48 <GPIO_Init>

	i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <ds1307_i2c_pin_config+0x74>)
 8000a14:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000a16:	2304      	movs	r3, #4
 8000a18:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 8000a1e:	2306      	movs	r3, #6
 8000a20:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000a22:	2301      	movs	r3, #1
 8000a24:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000a26:	2301      	movs	r3, #1
 8000a28:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(&i2c_scl);
 8000a2e:	463b      	mov	r3, r7
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 f989 	bl	8000d48 <GPIO_Init>
}
 8000a36:	bf00      	nop
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40020400 	.word	0x40020400

08000a44 <ds1307_i2c_config>:

static void ds1307_i2c_config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	ds1307I2CHandle.pI2Cx = DS1307_I2C;
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <ds1307_i2c_config+0x20>)
 8000a4a:	4a07      	ldr	r2, [pc, #28]	@ (8000a68 <ds1307_i2c_config+0x24>)
 8000a4c:	601a      	str	r2, [r3, #0]
	ds1307I2CHandle.I2C_Config.I2C_ACKControl = I2C_ACK_EN;
 8000a4e:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <ds1307_i2c_config+0x20>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	725a      	strb	r2, [r3, #9]
	ds1307I2CHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 8000a54:	4b03      	ldr	r3, [pc, #12]	@ (8000a64 <ds1307_i2c_config+0x20>)
 8000a56:	4a05      	ldr	r2, [pc, #20]	@ (8000a6c <ds1307_i2c_config+0x28>)
 8000a58:	605a      	str	r2, [r3, #4]
	I2C_Init(&ds1307I2CHandle);
 8000a5a:	4802      	ldr	r0, [pc, #8]	@ (8000a64 <ds1307_i2c_config+0x20>)
 8000a5c:	f000 fc16 	bl	800128c <I2C_Init>
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200000b4 	.word	0x200000b4
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	000186a0 	.word	0x000186a0

08000a70 <ds1307_write>:

static void ds1307_write(uint8_t value, uint8_t register_address)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	4603      	mov	r3, r0
 8000a78:	460a      	mov	r2, r1
 8000a7a:	71fb      	strb	r3, [r7, #7]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = register_address;
 8000a80:	79bb      	ldrb	r3, [r7, #6]
 8000a82:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&ds1307I2CHandle, tx, 2, DS1307_I2C_ADDR, I2C_NO_SR);
 8000a88:	f107 010c 	add.w	r1, r7, #12
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2368      	movs	r3, #104	@ 0x68
 8000a92:	2202      	movs	r2, #2
 8000a94:	4803      	ldr	r0, [pc, #12]	@ (8000aa4 <ds1307_write+0x34>)
 8000a96:	f000 fcbd 	bl	8001414 <I2C_MasterSendData>
}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200000b4 	.word	0x200000b4

08000aa8 <ds1307_read>:

static uint8_t ds1307_read(uint8_t register_address)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af02      	add	r7, sp, #8
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	I2C_MasterSendData(&ds1307I2CHandle, &register_address, 1, DS1307_I2C_ADDR, I2C_NO_SR);
 8000ab2:	1df9      	adds	r1, r7, #7
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	2368      	movs	r3, #104	@ 0x68
 8000aba:	2201      	movs	r2, #1
 8000abc:	4808      	ldr	r0, [pc, #32]	@ (8000ae0 <ds1307_read+0x38>)
 8000abe:	f000 fca9 	bl	8001414 <I2C_MasterSendData>
	I2C_MasterReceiveData(&ds1307I2CHandle, &data, 1, DS1307_I2C_ADDR, I2C_NO_SR);
 8000ac2:	f107 010f 	add.w	r1, r7, #15
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2368      	movs	r3, #104	@ 0x68
 8000acc:	2201      	movs	r2, #1
 8000ace:	4804      	ldr	r0, [pc, #16]	@ (8000ae0 <ds1307_read+0x38>)
 8000ad0:	f000 fcf9 	bl	80014c6 <I2C_MasterReceiveData>

	return data;
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]

}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200000b4 	.word	0x200000b4

08000ae4 <binary_to_bcd>:

static uint8_t binary_to_bcd(uint8_t value)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
	uint8_t m,n;
	uint8_t bcd = value;
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	73fb      	strb	r3, [r7, #15]

	if( value >= 10)
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b09      	cmp	r3, #9
 8000af6:	d919      	bls.n	8000b2c <binary_to_bcd+0x48>
	{
		m = value / 10; //grab tens place
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	4a10      	ldr	r2, [pc, #64]	@ (8000b3c <binary_to_bcd+0x58>)
 8000afc:	fba2 2303 	umull	r2, r3, r2, r3
 8000b00:	08db      	lsrs	r3, r3, #3
 8000b02:	73bb      	strb	r3, [r7, #14]
		n = value % 10; //grab ones place
 8000b04:	79fa      	ldrb	r2, [r7, #7]
 8000b06:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <binary_to_bcd+0x58>)
 8000b08:	fba3 1302 	umull	r1, r3, r3, r2
 8000b0c:	08d9      	lsrs	r1, r3, #3
 8000b0e:	460b      	mov	r3, r1
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	440b      	add	r3, r1
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	737b      	strb	r3, [r7, #13]
		bcd = (uint8_t) ((m << 4) | n); // shift tens place into bcd position and OR with lower 4 bits
 8000b1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b1e:	011b      	lsls	r3, r3, #4
 8000b20:	b25a      	sxtb	r2, r3
 8000b22:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	b25b      	sxtb	r3, r3
 8000b2a:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	cccccccd 	.word	0xcccccccd

08000b40 <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t bcd)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
	uint8_t m,n;
	uint8_t binary;

	m = (uint8_t)((bcd >> 4) * 10); // upper 4 bits shifted back to 0th bit, multiply by 10 to get into decimal based tens place
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	091b      	lsrs	r3, r3, #4
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	461a      	mov	r2, r3
 8000b52:	0092      	lsls	r2, r2, #2
 8000b54:	4413      	add	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]
	n = bcd & (uint8_t)0x0F; // masking upper 4 bits to grab only lower bits
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	f003 030f 	and.w	r3, r3, #15
 8000b60:	73bb      	strb	r3, [r7, #14]
	binary = (uint8_t) (m + n); // add together to get normal decimal (binary)
 8000b62:	7bfa      	ldrb	r2, [r7, #15]
 8000b64:	7bbb      	ldrb	r3, [r7, #14]
 8000b66:	4413      	add	r3, r2
 8000b68:	737b      	strb	r3, [r7, #13]

	return binary;
 8000b6a:	7b7b      	ldrb	r3, [r7, #13]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <GPIO_PeriClockControl>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d162      	bne.n	8000c50 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a64      	ldr	r2, [pc, #400]	@ (8000d20 <GPIO_PeriClockControl+0x1a8>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d106      	bne.n	8000ba0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000b92:	4b64      	ldr	r3, [pc, #400]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a63      	ldr	r2, [pc, #396]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 8000b9e:	e0b9      	b.n	8000d14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a61      	ldr	r2, [pc, #388]	@ (8000d28 <GPIO_PeriClockControl+0x1b0>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d106      	bne.n	8000bb6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000ba8:	4b5e      	ldr	r3, [pc, #376]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bac:	4a5d      	ldr	r2, [pc, #372]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000bae:	f043 0302 	orr.w	r3, r3, #2
 8000bb2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000bb4:	e0ae      	b.n	8000d14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a5c      	ldr	r2, [pc, #368]	@ (8000d2c <GPIO_PeriClockControl+0x1b4>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d106      	bne.n	8000bcc <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000bbe:	4b59      	ldr	r3, [pc, #356]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a58      	ldr	r2, [pc, #352]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000bca:	e0a3      	b.n	8000d14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a58      	ldr	r2, [pc, #352]	@ (8000d30 <GPIO_PeriClockControl+0x1b8>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d106      	bne.n	8000be2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000bd4:	4b53      	ldr	r3, [pc, #332]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd8:	4a52      	ldr	r2, [pc, #328]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000bda:	f043 0308 	orr.w	r3, r3, #8
 8000bde:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000be0:	e098      	b.n	8000d14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a53      	ldr	r2, [pc, #332]	@ (8000d34 <GPIO_PeriClockControl+0x1bc>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d106      	bne.n	8000bf8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000bea:	4b4e      	ldr	r3, [pc, #312]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a4d      	ldr	r2, [pc, #308]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000bf0:	f043 0310 	orr.w	r3, r3, #16
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000bf6:	e08d      	b.n	8000d14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4a4f      	ldr	r2, [pc, #316]	@ (8000d38 <GPIO_PeriClockControl+0x1c0>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d106      	bne.n	8000c0e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000c00:	4b48      	ldr	r3, [pc, #288]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c04:	4a47      	ldr	r2, [pc, #284]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000c06:	f043 0320 	orr.w	r3, r3, #32
 8000c0a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000c0c:	e082      	b.n	8000d14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a4a      	ldr	r2, [pc, #296]	@ (8000d3c <GPIO_PeriClockControl+0x1c4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d106      	bne.n	8000c24 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000c16:	4b43      	ldr	r3, [pc, #268]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a42      	ldr	r2, [pc, #264]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000c1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000c22:	e077      	b.n	8000d14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a46      	ldr	r2, [pc, #280]	@ (8000d40 <GPIO_PeriClockControl+0x1c8>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d106      	bne.n	8000c3a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000c2c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c30:	4a3c      	ldr	r2, [pc, #240]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c36:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000c38:	e06c      	b.n	8000d14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a41      	ldr	r2, [pc, #260]	@ (8000d44 <GPIO_PeriClockControl+0x1cc>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d168      	bne.n	8000d14 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000c42:	4b38      	ldr	r3, [pc, #224]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	4a37      	ldr	r2, [pc, #220]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c4c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000c4e:	e061      	b.n	8000d14 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a33      	ldr	r2, [pc, #204]	@ (8000d20 <GPIO_PeriClockControl+0x1a8>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d106      	bne.n	8000c66 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000c58:	4b32      	ldr	r3, [pc, #200]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5c:	4a31      	ldr	r2, [pc, #196]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000c5e:	f023 0301 	bic.w	r3, r3, #1
 8000c62:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000c64:	e056      	b.n	8000d14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a2f      	ldr	r2, [pc, #188]	@ (8000d28 <GPIO_PeriClockControl+0x1b0>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d106      	bne.n	8000c7c <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 8000c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a2c      	ldr	r2, [pc, #176]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000c74:	f023 0302 	bic.w	r3, r3, #2
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000c7a:	e04b      	b.n	8000d14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a2b      	ldr	r2, [pc, #172]	@ (8000d2c <GPIO_PeriClockControl+0x1b4>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d106      	bne.n	8000c92 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000c84:	4b27      	ldr	r3, [pc, #156]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c88:	4a26      	ldr	r2, [pc, #152]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000c8a:	f023 0304 	bic.w	r3, r3, #4
 8000c8e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000c90:	e040      	b.n	8000d14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a26      	ldr	r2, [pc, #152]	@ (8000d30 <GPIO_PeriClockControl+0x1b8>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d106      	bne.n	8000ca8 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000c9a:	4b22      	ldr	r3, [pc, #136]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a21      	ldr	r2, [pc, #132]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000ca0:	f023 0308 	bic.w	r3, r3, #8
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ca6:	e035      	b.n	8000d14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a22      	ldr	r2, [pc, #136]	@ (8000d34 <GPIO_PeriClockControl+0x1bc>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d106      	bne.n	8000cbe <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000cb6:	f023 0310 	bic.w	r3, r3, #16
 8000cba:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000cbc:	e02a      	b.n	8000d14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8000d38 <GPIO_PeriClockControl+0x1c0>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d106      	bne.n	8000cd4 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000cc6:	4b17      	ldr	r3, [pc, #92]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a16      	ldr	r2, [pc, #88]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000ccc:	f023 0320 	bic.w	r3, r3, #32
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000cd2:	e01f      	b.n	8000d14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a19      	ldr	r2, [pc, #100]	@ (8000d3c <GPIO_PeriClockControl+0x1c4>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d106      	bne.n	8000cea <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000cdc:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce0:	4a10      	ldr	r2, [pc, #64]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000ce2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000ce6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ce8:	e014      	b.n	8000d14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a14      	ldr	r2, [pc, #80]	@ (8000d40 <GPIO_PeriClockControl+0x1c8>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d106      	bne.n	8000d00 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000cf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000cfe:	e009      	b.n	8000d14 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a10      	ldr	r2, [pc, #64]	@ (8000d44 <GPIO_PeriClockControl+0x1cc>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d105      	bne.n	8000d14 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0c:	4a05      	ldr	r2, [pc, #20]	@ (8000d24 <GPIO_PeriClockControl+0x1ac>)
 8000d0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d12:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	40020000 	.word	0x40020000
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020400 	.word	0x40020400
 8000d2c:	40020800 	.word	0x40020800
 8000d30:	40020c00 	.word	0x40020c00
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40021400 	.word	0x40021400
 8000d3c:	40021800 	.word	0x40021800
 8000d40:	40021c00 	.word	0x40021c00
 8000d44:	40022000 	.word	0x40022000

08000d48 <GPIO_Init>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0; // temporary register
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2101      	movs	r1, #1
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff0c 	bl	8000b78 <GPIO_PeriClockControl>


	// 1. Configure mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	795b      	ldrb	r3, [r3, #5]
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	d820      	bhi.n	8000daa <GPIO_Init+0x62>
	{
		//Non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	795b      	ldrb	r3, [r3, #5]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	791b      	ldrb	r3, [r3, #4]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clear
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	791b      	ldrb	r3, [r3, #4]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	2103      	movs	r1, #3
 8000d88:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	4619      	mov	r1, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	400a      	ands	r2, r1
 8000d96:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //set
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6819      	ldr	r1, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	430a      	orrs	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	e0d2      	b.n	8000f50 <GPIO_Init+0x208>
	}
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	795b      	ldrb	r3, [r3, #5]
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	d117      	bne.n	8000de2 <GPIO_Init+0x9a>
		{
			//1. Configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000db2:	4b4b      	ldr	r3, [pc, #300]	@ (8000ee0 <GPIO_Init+0x198>)
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	7912      	ldrb	r2, [r2, #4]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	408a      	lsls	r2, r1
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4a47      	ldr	r2, [pc, #284]	@ (8000ee0 <GPIO_Init+0x198>)
 8000dc4:	430b      	orrs	r3, r1
 8000dc6:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000dc8:	4b45      	ldr	r3, [pc, #276]	@ (8000ee0 <GPIO_Init+0x198>)
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	7912      	ldrb	r2, [r2, #4]
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	408a      	lsls	r2, r1
 8000dd6:	43d2      	mvns	r2, r2
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4a41      	ldr	r2, [pc, #260]	@ (8000ee0 <GPIO_Init+0x198>)
 8000ddc:	400b      	ands	r3, r1
 8000dde:	6093      	str	r3, [r2, #8]
 8000de0:	e035      	b.n	8000e4e <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	795b      	ldrb	r3, [r3, #5]
 8000de6:	2b05      	cmp	r3, #5
 8000de8:	d117      	bne.n	8000e1a <GPIO_Init+0xd2>
		{
			//1. Configure RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000dea:	4b3d      	ldr	r3, [pc, #244]	@ (8000ee0 <GPIO_Init+0x198>)
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	7912      	ldrb	r2, [r2, #4]
 8000df2:	4611      	mov	r1, r2
 8000df4:	2201      	movs	r2, #1
 8000df6:	408a      	lsls	r2, r1
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4a39      	ldr	r2, [pc, #228]	@ (8000ee0 <GPIO_Init+0x198>)
 8000dfc:	430b      	orrs	r3, r1
 8000dfe:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e00:	4b37      	ldr	r3, [pc, #220]	@ (8000ee0 <GPIO_Init+0x198>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	7912      	ldrb	r2, [r2, #4]
 8000e08:	4611      	mov	r1, r2
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	408a      	lsls	r2, r1
 8000e0e:	43d2      	mvns	r2, r2
 8000e10:	4611      	mov	r1, r2
 8000e12:	4a33      	ldr	r2, [pc, #204]	@ (8000ee0 <GPIO_Init+0x198>)
 8000e14:	400b      	ands	r3, r1
 8000e16:	60d3      	str	r3, [r2, #12]
 8000e18:	e019      	b.n	8000e4e <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	795b      	ldrb	r3, [r3, #5]
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d115      	bne.n	8000e4e <GPIO_Init+0x106>
		{
			//1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e22:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee0 <GPIO_Init+0x198>)
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	7912      	ldrb	r2, [r2, #4]
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	408a      	lsls	r2, r1
 8000e30:	4611      	mov	r1, r2
 8000e32:	4a2b      	ldr	r2, [pc, #172]	@ (8000ee0 <GPIO_Init+0x198>)
 8000e34:	430b      	orrs	r3, r1
 8000e36:	60d3      	str	r3, [r2, #12]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000e38:	4b29      	ldr	r3, [pc, #164]	@ (8000ee0 <GPIO_Init+0x198>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	7912      	ldrb	r2, [r2, #4]
 8000e40:	4611      	mov	r1, r2
 8000e42:	2201      	movs	r2, #1
 8000e44:	408a      	lsls	r2, r1
 8000e46:	4611      	mov	r1, r2
 8000e48:	4a25      	ldr	r2, [pc, #148]	@ (8000ee0 <GPIO_Init+0x198>)
 8000e4a:	430b      	orrs	r3, r1
 8000e4c:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	791b      	ldrb	r3, [r3, #4]
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	791b      	ldrb	r3, [r3, #4]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a1f      	ldr	r2, [pc, #124]	@ (8000ee4 <GPIO_Init+0x19c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d04e      	beq.n	8000f08 <GPIO_Init+0x1c0>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ee8 <GPIO_Init+0x1a0>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d032      	beq.n	8000eda <GPIO_Init+0x192>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a1c      	ldr	r2, [pc, #112]	@ (8000eec <GPIO_Init+0x1a4>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d02b      	beq.n	8000ed6 <GPIO_Init+0x18e>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a1b      	ldr	r2, [pc, #108]	@ (8000ef0 <GPIO_Init+0x1a8>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d024      	beq.n	8000ed2 <GPIO_Init+0x18a>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a19      	ldr	r2, [pc, #100]	@ (8000ef4 <GPIO_Init+0x1ac>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d01d      	beq.n	8000ece <GPIO_Init+0x186>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a18      	ldr	r2, [pc, #96]	@ (8000ef8 <GPIO_Init+0x1b0>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d016      	beq.n	8000eca <GPIO_Init+0x182>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a16      	ldr	r2, [pc, #88]	@ (8000efc <GPIO_Init+0x1b4>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d00f      	beq.n	8000ec6 <GPIO_Init+0x17e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a15      	ldr	r2, [pc, #84]	@ (8000f00 <GPIO_Init+0x1b8>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d008      	beq.n	8000ec2 <GPIO_Init+0x17a>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a13      	ldr	r2, [pc, #76]	@ (8000f04 <GPIO_Init+0x1bc>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d101      	bne.n	8000ebe <GPIO_Init+0x176>
 8000eba:	2308      	movs	r3, #8
 8000ebc:	e025      	b.n	8000f0a <GPIO_Init+0x1c2>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e023      	b.n	8000f0a <GPIO_Init+0x1c2>
 8000ec2:	2307      	movs	r3, #7
 8000ec4:	e021      	b.n	8000f0a <GPIO_Init+0x1c2>
 8000ec6:	2306      	movs	r3, #6
 8000ec8:	e01f      	b.n	8000f0a <GPIO_Init+0x1c2>
 8000eca:	2305      	movs	r3, #5
 8000ecc:	e01d      	b.n	8000f0a <GPIO_Init+0x1c2>
 8000ece:	2304      	movs	r3, #4
 8000ed0:	e01b      	b.n	8000f0a <GPIO_Init+0x1c2>
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e019      	b.n	8000f0a <GPIO_Init+0x1c2>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e017      	b.n	8000f0a <GPIO_Init+0x1c2>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e015      	b.n	8000f0a <GPIO_Init+0x1c2>
 8000ede:	bf00      	nop
 8000ee0:	40013c00 	.word	0x40013c00
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40020400 	.word	0x40020400
 8000eec:	40020800 	.word	0x40020800
 8000ef0:	40020c00 	.word	0x40020c00
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40021400 	.word	0x40021400
 8000efc:	40021800 	.word	0x40021800
 8000f00:	40021c00 	.word	0x40021c00
 8000f04:	40022000 	.word	0x40022000
 8000f08:	2300      	movs	r3, #0
 8000f0a:	747b      	strb	r3, [r7, #17]

		SYSCFG_PCLK_EN();
 8000f0c:	4b60      	ldr	r3, [pc, #384]	@ (8001090 <GPIO_Init+0x348>)
 8000f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f10:	4a5f      	ldr	r2, [pc, #380]	@ (8001090 <GPIO_Init+0x348>)
 8000f12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f16:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] |= portCode << (temp2 * 4);
 8000f18:	4a5e      	ldr	r2, [pc, #376]	@ (8001094 <GPIO_Init+0x34c>)
 8000f1a:	7cfb      	ldrb	r3, [r7, #19]
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f22:	7c79      	ldrb	r1, [r7, #17]
 8000f24:	7cbb      	ldrb	r3, [r7, #18]
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	4959      	ldr	r1, [pc, #356]	@ (8001094 <GPIO_Init+0x34c>)
 8000f30:	7cfb      	ldrb	r3, [r7, #19]
 8000f32:	4302      	orrs	r2, r0
 8000f34:	3302      	adds	r3, #2
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3. Enable the EXTI delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000f3a:	4b57      	ldr	r3, [pc, #348]	@ (8001098 <GPIO_Init+0x350>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	7912      	ldrb	r2, [r2, #4]
 8000f42:	4611      	mov	r1, r2
 8000f44:	2201      	movs	r2, #1
 8000f46:	408a      	lsls	r2, r1
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4a53      	ldr	r2, [pc, #332]	@ (8001098 <GPIO_Init+0x350>)
 8000f4c:	430b      	orrs	r3, r1
 8000f4e:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	799b      	ldrb	r3, [r3, #6]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	791b      	ldrb	r3, [r3, #4]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	791b      	ldrb	r3, [r3, #4]
 8000f70:	4619      	mov	r1, r3
 8000f72:	2303      	movs	r3, #3
 8000f74:	408b      	lsls	r3, r1
 8000f76:	43db      	mvns	r3, r3
 8000f78:	4619      	mov	r1, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	400a      	ands	r2, r1
 8000f80:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6899      	ldr	r1, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]

	// 3. Configure the pull-up/pull-down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	79db      	ldrb	r3, [r3, #7]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	791b      	ldrb	r3, [r3, #4]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	68da      	ldr	r2, [r3, #12]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	791b      	ldrb	r3, [r3, #4]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	408b      	lsls	r3, r1
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	4619      	mov	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	400a      	ands	r2, r1
 8000fc2:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68d9      	ldr	r1, [r3, #12]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

	// 4. Configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7a1b      	ldrb	r3, [r3, #8]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	791b      	ldrb	r3, [r3, #4]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	791b      	ldrb	r3, [r3, #4]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	408b      	lsls	r3, r1
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	400a      	ands	r2, r1
 8001002:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6859      	ldr	r1, [r3, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	430a      	orrs	r2, r1
 8001012:	605a      	str	r2, [r3, #4]

	temp = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

	// 5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	795b      	ldrb	r3, [r3, #5]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d131      	bne.n	8001084 <GPIO_Init+0x33c>
	{
		// configure the alternate function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	791b      	ldrb	r3, [r3, #4]
 8001024:	08db      	lsrs	r3, r3, #3
 8001026:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	791b      	ldrb	r3, [r3, #4]
 800102c:	f003 0307 	and.w	r3, r3, #7
 8001030:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	7c3a      	ldrb	r2, [r7, #16]
 8001038:	3208      	adds	r2, #8
 800103a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	220f      	movs	r2, #15
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	7c3a      	ldrb	r2, [r7, #16]
 8001052:	4001      	ands	r1, r0
 8001054:	3208      	adds	r2, #8
 8001056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	7c3a      	ldrb	r2, [r7, #16]
 8001060:	3208      	adds	r2, #8
 8001062:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7a5b      	ldrb	r3, [r3, #9]
 800106a:	461a      	mov	r2, r3
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	4618      	mov	r0, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	7c3a      	ldrb	r2, [r7, #16]
 800107c:	4301      	orrs	r1, r0
 800107e:	3208      	adds	r2, #8
 8001080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

	temp = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40023800 	.word	0x40023800
 8001094:	40013800 	.word	0x40013800
 8001098:	40013c00 	.word	0x40013c00

0800109c <I2C_GenerateStartCondition>:
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle);


static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	601a      	str	r2, [r3, #0]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <I2C_Write_ExecuteAddressPhase>:

static void I2C_Write_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1; //makes space for R/WR bit
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1 << 0); //clear 0th bit so SlaveAddr is Slave address + r/nw bit (write = 0)
 80010ce:	78fb      	ldrb	r3, [r7, #3]
 80010d0:	f023 0301 	bic.w	r3, r3, #1
 80010d4:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80010d6:	78fa      	ldrb	r2, [r7, #3]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	611a      	str	r2, [r3, #16]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <I2C_Read_ExecuteAddressPhase>:

static void I2C_Read_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1; //makes space for R/WR bit
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= (1 << 0); //set 0th bit so SlaveAddr is Slave address + r/nw bit (read = 1)
 80010fa:	78fb      	ldrb	r3, [r7, #3]
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8001102:	78fa      	ldrb	r2, [r7, #3]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	611a      	str	r2, [r3, #16]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	// Check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d01f      	beq.n	800116a <I2C_ClearADDRFlag+0x56>
	{
		// Device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7f1b      	ldrb	r3, [r3, #28]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d112      	bne.n	8001158 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d11f      	bne.n	800117a <I2C_ClearADDRFlag+0x66>
			{
				// First disable ACKing
				I2C_ACK_EN_DI(pI2CHandle->pI2Cx, DISABLE);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f82e 	bl	80011a2 <I2C_ACK_EN_DI>

				// Clear ADDR flag by reading SR1 and then reading SR2

				dummyRead = pI2CHandle->pI2Cx->SR1;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR1;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	60fb      	str	r3, [r7, #12]

		dummyRead = pI2CHandle->pI2Cx->SR1;
		dummyRead = pI2CHandle->pI2Cx->SR1;
		(void)dummyRead; //suppress unused variable warning
	}
}
 8001156:	e010      	b.n	800117a <I2C_ClearADDRFlag+0x66>
			dummyRead = pI2CHandle->pI2Cx->SR1;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR1;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	60fb      	str	r3, [r7, #12]
}
 8001168:	e007      	b.n	800117a <I2C_ClearADDRFlag+0x66>
		dummyRead = pI2CHandle->pI2Cx->SR1;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR1;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	60fb      	str	r3, [r7, #12]
}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	601a      	str	r2, [r3, #0]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <I2C_ACK_EN_DI>:
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
	}
}

static void I2C_ACK_EN_DI(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	460b      	mov	r3, r1
 80011ac:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d106      	bne.n	80011c2 <I2C_ACK_EN_DI+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 80011c0:	e005      	b.n	80011ce <I2C_ACK_EN_DI+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	601a      	str	r2, [r3, #0]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <I2C_PeriClockControl>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80011e8:	78fb      	ldrb	r3, [r7, #3]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d120      	bne.n	8001230 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a22      	ldr	r2, [pc, #136]	@ (800127c <I2C_PeriClockControl+0xa0>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d106      	bne.n	8001204 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 80011f6:	4b22      	ldr	r3, [pc, #136]	@ (8001280 <I2C_PeriClockControl+0xa4>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fa:	4a21      	ldr	r2, [pc, #132]	@ (8001280 <I2C_PeriClockControl+0xa4>)
 80011fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001200:	6413      	str	r3, [r2, #64]	@ 0x40
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 8001202:	e035      	b.n	8001270 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a1f      	ldr	r2, [pc, #124]	@ (8001284 <I2C_PeriClockControl+0xa8>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d106      	bne.n	800121a <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 800120c:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <I2C_PeriClockControl+0xa4>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001210:	4a1b      	ldr	r2, [pc, #108]	@ (8001280 <I2C_PeriClockControl+0xa4>)
 8001212:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001216:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001218:	e02a      	b.n	8001270 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a1a      	ldr	r2, [pc, #104]	@ (8001288 <I2C_PeriClockControl+0xac>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d126      	bne.n	8001270 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8001222:	4b17      	ldr	r3, [pc, #92]	@ (8001280 <I2C_PeriClockControl+0xa4>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001226:	4a16      	ldr	r2, [pc, #88]	@ (8001280 <I2C_PeriClockControl+0xa4>)
 8001228:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800122c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800122e:	e01f      	b.n	8001270 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a12      	ldr	r2, [pc, #72]	@ (800127c <I2C_PeriClockControl+0xa0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d106      	bne.n	8001246 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8001238:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <I2C_PeriClockControl+0xa4>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123c:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <I2C_PeriClockControl+0xa4>)
 800123e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001242:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001244:	e014      	b.n	8001270 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a0e      	ldr	r2, [pc, #56]	@ (8001284 <I2C_PeriClockControl+0xa8>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d106      	bne.n	800125c <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 800124e:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <I2C_PeriClockControl+0xa4>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	4a0b      	ldr	r2, [pc, #44]	@ (8001280 <I2C_PeriClockControl+0xa4>)
 8001254:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001258:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800125a:	e009      	b.n	8001270 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <I2C_PeriClockControl+0xac>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d105      	bne.n	8001270 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <I2C_PeriClockControl+0xa4>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001268:	4a05      	ldr	r2, [pc, #20]	@ (8001280 <I2C_PeriClockControl+0xa4>)
 800126a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800126e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	40005400 	.word	0x40005400
 8001280:	40023800 	.word	0x40023800
 8001284:	40005800 	.word	0x40005800
 8001288:	40005c00 	.word	0x40005c00

0800128c <I2C_Init>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]

	// Enable clock for I2Cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2101      	movs	r1, #1
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ff9c 	bl	80011dc <I2C_PeriClockControl>
//	// ACK control bit < -- broken, Cannot set ACK when PE = 0, moved to I2C_Peripheral Control
//	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
//	pI2CHandle->pI2Cx->CR1 = tempreg;

	// FREQ Configuration
	tempreg = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 80012a8:	f000 f9be 	bl	8001628 <RCC_GetPCLK1Value>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4a4c      	ldr	r2, [pc, #304]	@ (80013e0 <I2C_Init+0x154>)
 80012b0:	fba2 2303 	umull	r2, r3, r2, r3
 80012b4:	0c9b      	lsrs	r3, r3, #18
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F); // mask all except first 5 bits
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80012c6:	605a      	str	r2, [r3, #4]

	// Device Own Address Configuration (OAR1)
	tempreg = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	7a1b      	ldrb	r3, [r3, #8]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012de:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	609a      	str	r2, [r3, #8]

	// CCR Configuration
	tempreg = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
	uint16_t ccr_value = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	817b      	strh	r3, [r7, #10]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	4a3b      	ldr	r2, [pc, #236]	@ (80013e4 <I2C_Init+0x158>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d80f      	bhi.n	800131a <I2C_Init+0x8e>
	{
		// standard mode
		ccr_value =(RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 80012fa:	f000 f995 	bl	8001628 <RCC_GetPCLK1Value>
 80012fe:	4602      	mov	r2, r0
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 800130c:	897b      	ldrh	r3, [r7, #10]
 800130e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	4313      	orrs	r3, r2
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	e02c      	b.n	8001374 <I2C_Init+0xe8>
	}
	else
	{
		// fast mode
		tempreg |= (1 << 15); //set fast mode
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001320:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	895b      	ldrh	r3, [r3, #10]
 8001326:	039b      	lsls	r3, r3, #14
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	895b      	ldrh	r3, [r3, #10]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10b      	bne.n	800134e <I2C_Init+0xc2>
		{
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8001336:	f000 f977 	bl	8001628 <RCC_GetPCLK1Value>
 800133a:	4601      	mov	r1, r0
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	fbb1 f3f3 	udiv	r3, r1, r3
 800134a:	817b      	strh	r3, [r7, #10]
 800134c:	e00c      	b.n	8001368 <I2C_Init+0xdc>
		}
		else
		{
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 800134e:	f000 f96b 	bl	8001628 <RCC_GetPCLK1Value>
 8001352:	4601      	mov	r1, r0
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	009a      	lsls	r2, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	fbb1 f3f3 	udiv	r3, r1, r3
 8001366:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8001368:	897b      	ldrh	r3, [r7, #10]
 800136a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	4313      	orrs	r3, r2
 8001372:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	tempreg = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	4a17      	ldr	r2, [pc, #92]	@ (80013e4 <I2C_Init+0x158>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d809      	bhi.n	800139e <I2C_Init+0x112>
	{
		// standard mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 800138a:	f000 f94d 	bl	8001628 <RCC_GetPCLK1Value>
 800138e:	4603      	mov	r3, r0
 8001390:	4a13      	ldr	r2, [pc, #76]	@ (80013e0 <I2C_Init+0x154>)
 8001392:	fba2 2303 	umull	r2, r3, r2, r3
 8001396:	0c9b      	lsrs	r3, r3, #18
 8001398:	3301      	adds	r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	e00d      	b.n	80013ba <I2C_Init+0x12e>
	}
	else
	{
		// fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300U) / 1000000000U) + 1;
 800139e:	f000 f943 	bl	8001628 <RCC_GetPCLK1Value>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80013a8:	fb02 f303 	mul.w	r3, r2, r3
 80013ac:	0a5b      	lsrs	r3, r3, #9
 80013ae:	4a0e      	ldr	r2, [pc, #56]	@ (80013e8 <I2C_Init+0x15c>)
 80013b0:	fba2 2303 	umull	r2, r3, r2, r3
 80013b4:	09db      	lsrs	r3, r3, #7
 80013b6:	3301      	adds	r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE = 0;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2200      	movs	r2, #0
 80013c0:	621a      	str	r2, [r3, #32]
	pI2CHandle->pI2Cx->TRISE |= (tempreg & 0x3F);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6a19      	ldr	r1, [r3, #32]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	621a      	str	r2, [r3, #32]
}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	431bde83 	.word	0x431bde83
 80013e4:	000186a0 	.word	0x000186a0
 80013e8:	00044b83 	.word	0x00044b83

080013ec <I2C_GetFlagStatus>:
/*
 * Data Send and Receive
 */

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	4013      	ands	r3, r2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <I2C_MasterSendData>:
 * 	@return					-	none
 *
 * 	@Note					-	blocking/polling api
 *************************************************************************************************************/
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t StartRepeated)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	70fb      	strb	r3, [r7, #3]
	//1. Generate START Condition

	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fe38 	bl	800109c <I2C_GenerateStartCondition>

	//2. Confirm that start generation is completed by checking the SB flag in SR1
	//	 Note: Until SB is cleared SCL will be stretched (pulled LOW)

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG));
 800142c:	bf00      	nop
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2101      	movs	r1, #1
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ffd9 	bl	80013ec <I2C_GetFlagStatus>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f6      	beq.n	800142e <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to Write (0) (total 8 bits)

	I2C_Write_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	78fa      	ldrb	r2, [r7, #3]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fe37 	bl	80010bc <I2C_Write_ExecuteAddressPhase>

	//4. Confirm that the address phase is completed by checking the ADDR flag in the SR1

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG));
 800144e:	bf00      	nop
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2102      	movs	r1, #2
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ffc8 	bl	80013ec <I2C_GetFlagStatus>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f6      	beq.n	8001450 <I2C_MasterSendData+0x3c>

	//5. Clear the ADDR flag according to its software sequence
	//	 Note: Until ADDR is cleared SCL will be stretched (pulled LOW)

	I2C_ClearADDRFlag(pI2CHandle);
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7ff fe56 	bl	8001114 <I2C_ClearADDRFlag>

	//6. Send the data until Len is 0 (Tx empty)

	while(Len > 0)
 8001468:	e014      	b.n	8001494 <I2C_MasterSendData+0x80>
	{
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TXE_FLAG)); // Wait for TXE to be set
 800146a:	bf00      	nop
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2180      	movs	r1, #128	@ 0x80
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ffba 	bl	80013ec <I2C_GetFlagStatus>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f6      	beq.n	800146c <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	781a      	ldrb	r2, [r3, #0]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	3301      	adds	r3, #1
 800148c:	60bb      	str	r3, [r7, #8]
		Len--;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3b01      	subs	r3, #1
 8001492:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1e7      	bne.n	800146a <I2C_MasterSendData+0x56>
	//	 Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//	 When BTF=1 , SCL will be stretched (pulled LOW)

	//while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TXE_FLAG)); // Wait for TXE to be set

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_BTF_FLAG)); // Wait for TXE to be set
 800149a:	bf00      	nop
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2104      	movs	r1, #4
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ffa2 	bl	80013ec <I2C_GetFlagStatus>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f6      	beq.n	800149c <I2C_MasterSendData+0x88>

	//ORIGINAL: 8. Generate STOP Condition and master need not wait for the completion of STOP condition
	//	 Note: Generating STOP automatically clears the BTF

	//8. Expanded for SR: Generate Repeated Start to hold bus otherwise generate Stop
	if(StartRepeated == I2C_NO_SR)
 80014ae:	7e3b      	ldrb	r3, [r7, #24]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d104      	bne.n	80014be <I2C_MasterSendData+0xaa>
	{
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fe62 	bl	8001182 <I2C_GenerateStopCondition>
	}
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <I2C_MasterReceiveData>:
 *
 * 	@Note					-	blocking/polling API
 *************************************************************************************************************/

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t StartRepeated)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	4611      	mov	r1, r2
 80014d2:	461a      	mov	r2, r3
 80014d4:	460b      	mov	r3, r1
 80014d6:	71fb      	strb	r3, [r7, #7]
 80014d8:	4613      	mov	r3, r2
 80014da:	71bb      	strb	r3, [r7, #6]
	//1. Generate START condition

	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fddb 	bl	800109c <I2C_GenerateStartCondition>

	//2. Confirm START generation is completed by checking SB flag in SR1
	//	 Note: Until SB is cleared SCL will be stretched (pulled LOW)

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG));
 80014e6:	bf00      	nop
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2101      	movs	r1, #1
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff7c 	bl	80013ec <I2C_GetFlagStatus>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f6      	beq.n	80014e8 <I2C_MasterReceiveData+0x22>

	//3. Send address of Slave with r/nw but set to Read (1) (total 8 bits)

	I2C_Read_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	79ba      	ldrb	r2, [r7, #6]
 8001500:	4611      	mov	r1, r2
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fdf0 	bl	80010e8 <I2C_Read_ExecuteAddressPhase>

	//4. Wait until address phase is completed by checking ADDR flag in SR1

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG));
 8001508:	bf00      	nop
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2102      	movs	r1, #2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff6b 	bl	80013ec <I2C_GetFlagStatus>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f6      	beq.n	800150a <I2C_MasterReceiveData+0x44>

	// If reading only one byte from slave

	if(Len == 1)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d121      	bne.n	8001566 <I2C_MasterReceiveData+0xa0>
	{
		// Disable ACK in CR1

		I2C_ACK_EN_DI(pI2CHandle->pI2Cx, DISABLE); // Clear ACK bit
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fe3a 	bl	80011a2 <I2C_ACK_EN_DI>

		// Clear ADDR flag

		I2C_ClearADDRFlag(pI2CHandle);
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f7ff fdf0 	bl	8001114 <I2C_ClearADDRFlag>

		// Wait until RXNE = 1

		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_RXNE_FLAG));
 8001534:	bf00      	nop
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2140      	movs	r1, #64	@ 0x40
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff55 	bl	80013ec <I2C_GetFlagStatus>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f6      	beq.n	8001536 <I2C_MasterReceiveData+0x70>

		// Generate STOP condition if no SR

		if(StartRepeated == I2C_NO_SR)
 8001548:	f897 3020 	ldrb.w	r3, [r7, #32]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d104      	bne.n	800155a <I2C_MasterReceiveData+0x94>
		{
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fe14 	bl	8001182 <I2C_GenerateStopCondition>
		}

		// Read data into buffer

		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	701a      	strb	r2, [r3, #0]
	}

	// If reading more than one byte from Slave
	if(Len > 1)
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d930      	bls.n	80015ce <I2C_MasterReceiveData+0x108>
	{
		// Clear ADDR flag

		I2C_ClearADDRFlag(pI2CHandle);
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f7ff fdd1 	bl	8001114 <I2C_ClearADDRFlag>

		// Read data until Len = 0

		for(uint32_t i = Len; i > 0; i--)
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	e027      	b.n	80015c8 <I2C_MasterReceiveData+0x102>
		{
			// Wait until RXNE = 1

			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_RXNE_FLAG));
 8001578:	bf00      	nop
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2140      	movs	r1, #64	@ 0x40
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff33 	bl	80013ec <I2C_GetFlagStatus>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f6      	beq.n	800157a <I2C_MasterReceiveData+0xb4>

			if(i == 2) // Last 2 bytes
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d10e      	bne.n	80015b0 <I2C_MasterReceiveData+0xea>
			{
				// Disable ACK (CR1) here to prevent slave from sending more data after last byte read

				I2C_ACK_EN_DI(pI2CHandle->pI2Cx,DISABLE); // Clear ACK bit
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fe02 	bl	80011a2 <I2C_ACK_EN_DI>

				// Generate STOP condition if no SR

				if(StartRepeated == I2C_NO_SR)
 800159e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d104      	bne.n	80015b0 <I2C_MasterReceiveData+0xea>
				{
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fde9 	bl	8001182 <I2C_GenerateStopCondition>
				}

			}
			// Read data into buffer

			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	701a      	strb	r2, [r3, #0]

			// increment RxBuffer address

			pRxBuffer++;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	3301      	adds	r3, #1
 80015c0:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Len; i > 0; i--)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1d4      	bne.n	8001578 <I2C_MasterReceiveData+0xb2>
		}
	}

	// Re-Enable ACK in CR1 (if it was enabled before entering current API)

	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_EN)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	7a5b      	ldrb	r3, [r3, #9]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d105      	bne.n	80015e2 <I2C_MasterReceiveData+0x11c>
	{
		I2C_ACK_EN_DI(pI2CHandle->pI2Cx,ENABLE); // Set ACK bit
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2101      	movs	r1, #1
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fde0 	bl	80011a2 <I2C_ACK_EN_DI>
	}
}
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <I2C_PeripheralControl>:
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d10a      	bne.n	8001612 <I2C_PeripheralControl+0x28>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f043 0201 	orr.w	r2, r3, #1
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	601a      	str	r2, [r3, #0]

		// Can enable ACK now that PE = 1, moved from I2C_Init
		I2C_ACK_EN_DI(pI2Cx,ENABLE);
 8001608:	2101      	movs	r1, #1
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff fdc9 	bl	80011a2 <I2C_ACK_EN_DI>
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8001610:	e005      	b.n	800161e <I2C_PeripheralControl+0x34>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 0201 	bic.w	r2, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	601a      	str	r2, [r3, #0]
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <RCC_GetPCLK1Value>:
uint16_t AHB1_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint16_t APB1_PreScaler[8] = {2,4,8,16};
uint16_t APB2_PreScaler[8] = {2,4,8,16};

uint32_t RCC_GetPCLK1Value(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahb1p,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3); // only want bit positions 0 and 1
 800162e:	4b26      	ldr	r3, [pc, #152]	@ (80016c8 <RCC_GetPCLK1Value+0xa0>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	b2db      	uxtb	r3, r3
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	727b      	strb	r3, [r7, #9]

	if (clksrc == 0)
 800163c:	7a7b      	ldrb	r3, [r7, #9]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8001642:	4b22      	ldr	r3, [pc, #136]	@ (80016cc <RCC_GetPCLK1Value+0xa4>)
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	e00b      	b.n	8001660 <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 1)
 8001648:	7a7b      	ldrb	r3, [r7, #9]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d102      	bne.n	8001654 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 800164e:	4b20      	ldr	r3, [pc, #128]	@ (80016d0 <RCC_GetPCLK1Value+0xa8>)
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	e005      	b.n	8001660 <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 2)
 8001654:	7a7b      	ldrb	r3, [r7, #9]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d102      	bne.n	8001660 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock(); // not implemented
 800165a:	f000 f83f 	bl	80016dc <RCC_GetPLLOutputClock>
 800165e:	60f8      	str	r0, [r7, #12]
	}

	//ahb1 pre-scaler
	temp = ((RCC->CFGR >> 4) & 0xF);
 8001660:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <RCC_GetPCLK1Value+0xa0>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	b2db      	uxtb	r3, r3
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	723b      	strb	r3, [r7, #8]

	if (temp < 8)
 800166e:	7a3b      	ldrb	r3, [r7, #8]
 8001670:	2b07      	cmp	r3, #7
 8001672:	d802      	bhi.n	800167a <RCC_GetPCLK1Value+0x52>
	{
		ahb1p = 1;
 8001674:	2301      	movs	r3, #1
 8001676:	72fb      	strb	r3, [r7, #11]
 8001678:	e005      	b.n	8001686 <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahb1p = AHB1_PreScaler[temp - 8]; // if ahb1 prescaler greater than 8, fetch first value of array
 800167a:	7a3b      	ldrb	r3, [r7, #8]
 800167c:	3b08      	subs	r3, #8
 800167e:	4a15      	ldr	r2, [pc, #84]	@ (80016d4 <RCC_GetPCLK1Value+0xac>)
 8001680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001684:	72fb      	strb	r3, [r7, #11]
	}

	//apb1 pre-scaler
	temp = ((RCC->CFGR >> 10) & 0x7);
 8001686:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <RCC_GetPCLK1Value+0xa0>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	0a9b      	lsrs	r3, r3, #10
 800168c:	b2db      	uxtb	r3, r3
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	723b      	strb	r3, [r7, #8]

	if (temp < 4)
 8001694:	7a3b      	ldrb	r3, [r7, #8]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d802      	bhi.n	80016a0 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 800169a:	2301      	movs	r3, #1
 800169c:	72bb      	strb	r3, [r7, #10]
 800169e:	e005      	b.n	80016ac <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		apb1p = APB1_PreScaler[temp - 4]; // if apb1 prescaler greater than 4, fetch first value of array
 80016a0:	7a3b      	ldrb	r3, [r7, #8]
 80016a2:	3b04      	subs	r3, #4
 80016a4:	4a0c      	ldr	r2, [pc, #48]	@ (80016d8 <RCC_GetPCLK1Value+0xb0>)
 80016a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016aa:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahb1p) / apb1p;
 80016ac:	7afb      	ldrb	r3, [r7, #11]
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80016b4:	7abb      	ldrb	r3, [r7, #10]
 80016b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ba:	607b      	str	r3, [r7, #4]

	return pclk1;
 80016bc:	687b      	ldr	r3, [r7, #4]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	00f42400 	.word	0x00f42400
 80016d0:	007a1200 	.word	0x007a1200
 80016d4:	20000000 	.word	0x20000000
 80016d8:	20000010 	.word	0x20000010

080016dc <RCC_GetPLLOutputClock>:

	return pclk2;
}

uint32_t RCC_GetPLLOutputClock(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
	return 0; // not implemented
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <std>:
 80016ec:	2300      	movs	r3, #0
 80016ee:	b510      	push	{r4, lr}
 80016f0:	4604      	mov	r4, r0
 80016f2:	e9c0 3300 	strd	r3, r3, [r0]
 80016f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80016fa:	6083      	str	r3, [r0, #8]
 80016fc:	8181      	strh	r1, [r0, #12]
 80016fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8001700:	81c2      	strh	r2, [r0, #14]
 8001702:	6183      	str	r3, [r0, #24]
 8001704:	4619      	mov	r1, r3
 8001706:	2208      	movs	r2, #8
 8001708:	305c      	adds	r0, #92	@ 0x5c
 800170a:	f000 f921 	bl	8001950 <memset>
 800170e:	4b0d      	ldr	r3, [pc, #52]	@ (8001744 <std+0x58>)
 8001710:	6263      	str	r3, [r4, #36]	@ 0x24
 8001712:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <std+0x5c>)
 8001714:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001716:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <std+0x60>)
 8001718:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800171a:	4b0d      	ldr	r3, [pc, #52]	@ (8001750 <std+0x64>)
 800171c:	6323      	str	r3, [r4, #48]	@ 0x30
 800171e:	4b0d      	ldr	r3, [pc, #52]	@ (8001754 <std+0x68>)
 8001720:	6224      	str	r4, [r4, #32]
 8001722:	429c      	cmp	r4, r3
 8001724:	d006      	beq.n	8001734 <std+0x48>
 8001726:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800172a:	4294      	cmp	r4, r2
 800172c:	d002      	beq.n	8001734 <std+0x48>
 800172e:	33d0      	adds	r3, #208	@ 0xd0
 8001730:	429c      	cmp	r4, r3
 8001732:	d105      	bne.n	8001740 <std+0x54>
 8001734:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800173c:	f000 b93a 	b.w	80019b4 <__retarget_lock_init_recursive>
 8001740:	bd10      	pop	{r4, pc}
 8001742:	bf00      	nop
 8001744:	08002209 	.word	0x08002209
 8001748:	0800222b 	.word	0x0800222b
 800174c:	08002263 	.word	0x08002263
 8001750:	08002287 	.word	0x08002287
 8001754:	200000dc 	.word	0x200000dc

08001758 <stdio_exit_handler>:
 8001758:	4a02      	ldr	r2, [pc, #8]	@ (8001764 <stdio_exit_handler+0xc>)
 800175a:	4903      	ldr	r1, [pc, #12]	@ (8001768 <stdio_exit_handler+0x10>)
 800175c:	4803      	ldr	r0, [pc, #12]	@ (800176c <stdio_exit_handler+0x14>)
 800175e:	f000 b869 	b.w	8001834 <_fwalk_sglue>
 8001762:	bf00      	nop
 8001764:	20000020 	.word	0x20000020
 8001768:	080021a1 	.word	0x080021a1
 800176c:	20000030 	.word	0x20000030

08001770 <cleanup_stdio>:
 8001770:	6841      	ldr	r1, [r0, #4]
 8001772:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <cleanup_stdio+0x34>)
 8001774:	4299      	cmp	r1, r3
 8001776:	b510      	push	{r4, lr}
 8001778:	4604      	mov	r4, r0
 800177a:	d001      	beq.n	8001780 <cleanup_stdio+0x10>
 800177c:	f000 fd10 	bl	80021a0 <_fflush_r>
 8001780:	68a1      	ldr	r1, [r4, #8]
 8001782:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <cleanup_stdio+0x38>)
 8001784:	4299      	cmp	r1, r3
 8001786:	d002      	beq.n	800178e <cleanup_stdio+0x1e>
 8001788:	4620      	mov	r0, r4
 800178a:	f000 fd09 	bl	80021a0 <_fflush_r>
 800178e:	68e1      	ldr	r1, [r4, #12]
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <cleanup_stdio+0x3c>)
 8001792:	4299      	cmp	r1, r3
 8001794:	d004      	beq.n	80017a0 <cleanup_stdio+0x30>
 8001796:	4620      	mov	r0, r4
 8001798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800179c:	f000 bd00 	b.w	80021a0 <_fflush_r>
 80017a0:	bd10      	pop	{r4, pc}
 80017a2:	bf00      	nop
 80017a4:	200000dc 	.word	0x200000dc
 80017a8:	20000144 	.word	0x20000144
 80017ac:	200001ac 	.word	0x200001ac

080017b0 <global_stdio_init.part.0>:
 80017b0:	b510      	push	{r4, lr}
 80017b2:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <global_stdio_init.part.0+0x30>)
 80017b4:	4c0b      	ldr	r4, [pc, #44]	@ (80017e4 <global_stdio_init.part.0+0x34>)
 80017b6:	4a0c      	ldr	r2, [pc, #48]	@ (80017e8 <global_stdio_init.part.0+0x38>)
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	4620      	mov	r0, r4
 80017bc:	2200      	movs	r2, #0
 80017be:	2104      	movs	r1, #4
 80017c0:	f7ff ff94 	bl	80016ec <std>
 80017c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80017c8:	2201      	movs	r2, #1
 80017ca:	2109      	movs	r1, #9
 80017cc:	f7ff ff8e 	bl	80016ec <std>
 80017d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80017d4:	2202      	movs	r2, #2
 80017d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017da:	2112      	movs	r1, #18
 80017dc:	f7ff bf86 	b.w	80016ec <std>
 80017e0:	20000214 	.word	0x20000214
 80017e4:	200000dc 	.word	0x200000dc
 80017e8:	08001759 	.word	0x08001759

080017ec <__sfp_lock_acquire>:
 80017ec:	4801      	ldr	r0, [pc, #4]	@ (80017f4 <__sfp_lock_acquire+0x8>)
 80017ee:	f000 b8e2 	b.w	80019b6 <__retarget_lock_acquire_recursive>
 80017f2:	bf00      	nop
 80017f4:	20000219 	.word	0x20000219

080017f8 <__sfp_lock_release>:
 80017f8:	4801      	ldr	r0, [pc, #4]	@ (8001800 <__sfp_lock_release+0x8>)
 80017fa:	f000 b8dd 	b.w	80019b8 <__retarget_lock_release_recursive>
 80017fe:	bf00      	nop
 8001800:	20000219 	.word	0x20000219

08001804 <__sinit>:
 8001804:	b510      	push	{r4, lr}
 8001806:	4604      	mov	r4, r0
 8001808:	f7ff fff0 	bl	80017ec <__sfp_lock_acquire>
 800180c:	6a23      	ldr	r3, [r4, #32]
 800180e:	b11b      	cbz	r3, 8001818 <__sinit+0x14>
 8001810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001814:	f7ff bff0 	b.w	80017f8 <__sfp_lock_release>
 8001818:	4b04      	ldr	r3, [pc, #16]	@ (800182c <__sinit+0x28>)
 800181a:	6223      	str	r3, [r4, #32]
 800181c:	4b04      	ldr	r3, [pc, #16]	@ (8001830 <__sinit+0x2c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f5      	bne.n	8001810 <__sinit+0xc>
 8001824:	f7ff ffc4 	bl	80017b0 <global_stdio_init.part.0>
 8001828:	e7f2      	b.n	8001810 <__sinit+0xc>
 800182a:	bf00      	nop
 800182c:	08001771 	.word	0x08001771
 8001830:	20000214 	.word	0x20000214

08001834 <_fwalk_sglue>:
 8001834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001838:	4607      	mov	r7, r0
 800183a:	4688      	mov	r8, r1
 800183c:	4614      	mov	r4, r2
 800183e:	2600      	movs	r6, #0
 8001840:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001844:	f1b9 0901 	subs.w	r9, r9, #1
 8001848:	d505      	bpl.n	8001856 <_fwalk_sglue+0x22>
 800184a:	6824      	ldr	r4, [r4, #0]
 800184c:	2c00      	cmp	r4, #0
 800184e:	d1f7      	bne.n	8001840 <_fwalk_sglue+0xc>
 8001850:	4630      	mov	r0, r6
 8001852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001856:	89ab      	ldrh	r3, [r5, #12]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d907      	bls.n	800186c <_fwalk_sglue+0x38>
 800185c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001860:	3301      	adds	r3, #1
 8001862:	d003      	beq.n	800186c <_fwalk_sglue+0x38>
 8001864:	4629      	mov	r1, r5
 8001866:	4638      	mov	r0, r7
 8001868:	47c0      	blx	r8
 800186a:	4306      	orrs	r6, r0
 800186c:	3568      	adds	r5, #104	@ 0x68
 800186e:	e7e9      	b.n	8001844 <_fwalk_sglue+0x10>

08001870 <iprintf>:
 8001870:	b40f      	push	{r0, r1, r2, r3}
 8001872:	b507      	push	{r0, r1, r2, lr}
 8001874:	4906      	ldr	r1, [pc, #24]	@ (8001890 <iprintf+0x20>)
 8001876:	ab04      	add	r3, sp, #16
 8001878:	6808      	ldr	r0, [r1, #0]
 800187a:	f853 2b04 	ldr.w	r2, [r3], #4
 800187e:	6881      	ldr	r1, [r0, #8]
 8001880:	9301      	str	r3, [sp, #4]
 8001882:	f000 f8c3 	bl	8001a0c <_vfiprintf_r>
 8001886:	b003      	add	sp, #12
 8001888:	f85d eb04 	ldr.w	lr, [sp], #4
 800188c:	b004      	add	sp, #16
 800188e:	4770      	bx	lr
 8001890:	2000002c 	.word	0x2000002c

08001894 <_puts_r>:
 8001894:	6a03      	ldr	r3, [r0, #32]
 8001896:	b570      	push	{r4, r5, r6, lr}
 8001898:	6884      	ldr	r4, [r0, #8]
 800189a:	4605      	mov	r5, r0
 800189c:	460e      	mov	r6, r1
 800189e:	b90b      	cbnz	r3, 80018a4 <_puts_r+0x10>
 80018a0:	f7ff ffb0 	bl	8001804 <__sinit>
 80018a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80018a6:	07db      	lsls	r3, r3, #31
 80018a8:	d405      	bmi.n	80018b6 <_puts_r+0x22>
 80018aa:	89a3      	ldrh	r3, [r4, #12]
 80018ac:	0598      	lsls	r0, r3, #22
 80018ae:	d402      	bmi.n	80018b6 <_puts_r+0x22>
 80018b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80018b2:	f000 f880 	bl	80019b6 <__retarget_lock_acquire_recursive>
 80018b6:	89a3      	ldrh	r3, [r4, #12]
 80018b8:	0719      	lsls	r1, r3, #28
 80018ba:	d502      	bpl.n	80018c2 <_puts_r+0x2e>
 80018bc:	6923      	ldr	r3, [r4, #16]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d135      	bne.n	800192e <_puts_r+0x9a>
 80018c2:	4621      	mov	r1, r4
 80018c4:	4628      	mov	r0, r5
 80018c6:	f000 fd21 	bl	800230c <__swsetup_r>
 80018ca:	b380      	cbz	r0, 800192e <_puts_r+0x9a>
 80018cc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80018d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80018d2:	07da      	lsls	r2, r3, #31
 80018d4:	d405      	bmi.n	80018e2 <_puts_r+0x4e>
 80018d6:	89a3      	ldrh	r3, [r4, #12]
 80018d8:	059b      	lsls	r3, r3, #22
 80018da:	d402      	bmi.n	80018e2 <_puts_r+0x4e>
 80018dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80018de:	f000 f86b 	bl	80019b8 <__retarget_lock_release_recursive>
 80018e2:	4628      	mov	r0, r5
 80018e4:	bd70      	pop	{r4, r5, r6, pc}
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	da04      	bge.n	80018f4 <_puts_r+0x60>
 80018ea:	69a2      	ldr	r2, [r4, #24]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dc17      	bgt.n	8001920 <_puts_r+0x8c>
 80018f0:	290a      	cmp	r1, #10
 80018f2:	d015      	beq.n	8001920 <_puts_r+0x8c>
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	1c5a      	adds	r2, r3, #1
 80018f8:	6022      	str	r2, [r4, #0]
 80018fa:	7019      	strb	r1, [r3, #0]
 80018fc:	68a3      	ldr	r3, [r4, #8]
 80018fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001902:	3b01      	subs	r3, #1
 8001904:	60a3      	str	r3, [r4, #8]
 8001906:	2900      	cmp	r1, #0
 8001908:	d1ed      	bne.n	80018e6 <_puts_r+0x52>
 800190a:	2b00      	cmp	r3, #0
 800190c:	da11      	bge.n	8001932 <_puts_r+0x9e>
 800190e:	4622      	mov	r2, r4
 8001910:	210a      	movs	r1, #10
 8001912:	4628      	mov	r0, r5
 8001914:	f000 fcbb 	bl	800228e <__swbuf_r>
 8001918:	3001      	adds	r0, #1
 800191a:	d0d7      	beq.n	80018cc <_puts_r+0x38>
 800191c:	250a      	movs	r5, #10
 800191e:	e7d7      	b.n	80018d0 <_puts_r+0x3c>
 8001920:	4622      	mov	r2, r4
 8001922:	4628      	mov	r0, r5
 8001924:	f000 fcb3 	bl	800228e <__swbuf_r>
 8001928:	3001      	adds	r0, #1
 800192a:	d1e7      	bne.n	80018fc <_puts_r+0x68>
 800192c:	e7ce      	b.n	80018cc <_puts_r+0x38>
 800192e:	3e01      	subs	r6, #1
 8001930:	e7e4      	b.n	80018fc <_puts_r+0x68>
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	6022      	str	r2, [r4, #0]
 8001938:	220a      	movs	r2, #10
 800193a:	701a      	strb	r2, [r3, #0]
 800193c:	e7ee      	b.n	800191c <_puts_r+0x88>
	...

08001940 <puts>:
 8001940:	4b02      	ldr	r3, [pc, #8]	@ (800194c <puts+0xc>)
 8001942:	4601      	mov	r1, r0
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	f7ff bfa5 	b.w	8001894 <_puts_r>
 800194a:	bf00      	nop
 800194c:	2000002c 	.word	0x2000002c

08001950 <memset>:
 8001950:	4402      	add	r2, r0
 8001952:	4603      	mov	r3, r0
 8001954:	4293      	cmp	r3, r2
 8001956:	d100      	bne.n	800195a <memset+0xa>
 8001958:	4770      	bx	lr
 800195a:	f803 1b01 	strb.w	r1, [r3], #1
 800195e:	e7f9      	b.n	8001954 <memset+0x4>

08001960 <__errno>:
 8001960:	4b01      	ldr	r3, [pc, #4]	@ (8001968 <__errno+0x8>)
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	2000002c 	.word	0x2000002c

0800196c <__libc_init_array>:
 800196c:	b570      	push	{r4, r5, r6, lr}
 800196e:	4d0d      	ldr	r5, [pc, #52]	@ (80019a4 <__libc_init_array+0x38>)
 8001970:	4c0d      	ldr	r4, [pc, #52]	@ (80019a8 <__libc_init_array+0x3c>)
 8001972:	1b64      	subs	r4, r4, r5
 8001974:	10a4      	asrs	r4, r4, #2
 8001976:	2600      	movs	r6, #0
 8001978:	42a6      	cmp	r6, r4
 800197a:	d109      	bne.n	8001990 <__libc_init_array+0x24>
 800197c:	4d0b      	ldr	r5, [pc, #44]	@ (80019ac <__libc_init_array+0x40>)
 800197e:	4c0c      	ldr	r4, [pc, #48]	@ (80019b0 <__libc_init_array+0x44>)
 8001980:	f000 fe3e 	bl	8002600 <_init>
 8001984:	1b64      	subs	r4, r4, r5
 8001986:	10a4      	asrs	r4, r4, #2
 8001988:	2600      	movs	r6, #0
 800198a:	42a6      	cmp	r6, r4
 800198c:	d105      	bne.n	800199a <__libc_init_array+0x2e>
 800198e:	bd70      	pop	{r4, r5, r6, pc}
 8001990:	f855 3b04 	ldr.w	r3, [r5], #4
 8001994:	4798      	blx	r3
 8001996:	3601      	adds	r6, #1
 8001998:	e7ee      	b.n	8001978 <__libc_init_array+0xc>
 800199a:	f855 3b04 	ldr.w	r3, [r5], #4
 800199e:	4798      	blx	r3
 80019a0:	3601      	adds	r6, #1
 80019a2:	e7f2      	b.n	800198a <__libc_init_array+0x1e>
 80019a4:	0800271c 	.word	0x0800271c
 80019a8:	0800271c 	.word	0x0800271c
 80019ac:	0800271c 	.word	0x0800271c
 80019b0:	08002720 	.word	0x08002720

080019b4 <__retarget_lock_init_recursive>:
 80019b4:	4770      	bx	lr

080019b6 <__retarget_lock_acquire_recursive>:
 80019b6:	4770      	bx	lr

080019b8 <__retarget_lock_release_recursive>:
 80019b8:	4770      	bx	lr

080019ba <__sfputc_r>:
 80019ba:	6893      	ldr	r3, [r2, #8]
 80019bc:	3b01      	subs	r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	b410      	push	{r4}
 80019c2:	6093      	str	r3, [r2, #8]
 80019c4:	da08      	bge.n	80019d8 <__sfputc_r+0x1e>
 80019c6:	6994      	ldr	r4, [r2, #24]
 80019c8:	42a3      	cmp	r3, r4
 80019ca:	db01      	blt.n	80019d0 <__sfputc_r+0x16>
 80019cc:	290a      	cmp	r1, #10
 80019ce:	d103      	bne.n	80019d8 <__sfputc_r+0x1e>
 80019d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019d4:	f000 bc5b 	b.w	800228e <__swbuf_r>
 80019d8:	6813      	ldr	r3, [r2, #0]
 80019da:	1c58      	adds	r0, r3, #1
 80019dc:	6010      	str	r0, [r2, #0]
 80019de:	7019      	strb	r1, [r3, #0]
 80019e0:	4608      	mov	r0, r1
 80019e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <__sfputs_r>:
 80019e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ea:	4606      	mov	r6, r0
 80019ec:	460f      	mov	r7, r1
 80019ee:	4614      	mov	r4, r2
 80019f0:	18d5      	adds	r5, r2, r3
 80019f2:	42ac      	cmp	r4, r5
 80019f4:	d101      	bne.n	80019fa <__sfputs_r+0x12>
 80019f6:	2000      	movs	r0, #0
 80019f8:	e007      	b.n	8001a0a <__sfputs_r+0x22>
 80019fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019fe:	463a      	mov	r2, r7
 8001a00:	4630      	mov	r0, r6
 8001a02:	f7ff ffda 	bl	80019ba <__sfputc_r>
 8001a06:	1c43      	adds	r3, r0, #1
 8001a08:	d1f3      	bne.n	80019f2 <__sfputs_r+0xa>
 8001a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001a0c <_vfiprintf_r>:
 8001a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a10:	460d      	mov	r5, r1
 8001a12:	b09d      	sub	sp, #116	@ 0x74
 8001a14:	4614      	mov	r4, r2
 8001a16:	4698      	mov	r8, r3
 8001a18:	4606      	mov	r6, r0
 8001a1a:	b118      	cbz	r0, 8001a24 <_vfiprintf_r+0x18>
 8001a1c:	6a03      	ldr	r3, [r0, #32]
 8001a1e:	b90b      	cbnz	r3, 8001a24 <_vfiprintf_r+0x18>
 8001a20:	f7ff fef0 	bl	8001804 <__sinit>
 8001a24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001a26:	07d9      	lsls	r1, r3, #31
 8001a28:	d405      	bmi.n	8001a36 <_vfiprintf_r+0x2a>
 8001a2a:	89ab      	ldrh	r3, [r5, #12]
 8001a2c:	059a      	lsls	r2, r3, #22
 8001a2e:	d402      	bmi.n	8001a36 <_vfiprintf_r+0x2a>
 8001a30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001a32:	f7ff ffc0 	bl	80019b6 <__retarget_lock_acquire_recursive>
 8001a36:	89ab      	ldrh	r3, [r5, #12]
 8001a38:	071b      	lsls	r3, r3, #28
 8001a3a:	d501      	bpl.n	8001a40 <_vfiprintf_r+0x34>
 8001a3c:	692b      	ldr	r3, [r5, #16]
 8001a3e:	b99b      	cbnz	r3, 8001a68 <_vfiprintf_r+0x5c>
 8001a40:	4629      	mov	r1, r5
 8001a42:	4630      	mov	r0, r6
 8001a44:	f000 fc62 	bl	800230c <__swsetup_r>
 8001a48:	b170      	cbz	r0, 8001a68 <_vfiprintf_r+0x5c>
 8001a4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001a4c:	07dc      	lsls	r4, r3, #31
 8001a4e:	d504      	bpl.n	8001a5a <_vfiprintf_r+0x4e>
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a54:	b01d      	add	sp, #116	@ 0x74
 8001a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a5a:	89ab      	ldrh	r3, [r5, #12]
 8001a5c:	0598      	lsls	r0, r3, #22
 8001a5e:	d4f7      	bmi.n	8001a50 <_vfiprintf_r+0x44>
 8001a60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001a62:	f7ff ffa9 	bl	80019b8 <__retarget_lock_release_recursive>
 8001a66:	e7f3      	b.n	8001a50 <_vfiprintf_r+0x44>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a6c:	2320      	movs	r3, #32
 8001a6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001a72:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a76:	2330      	movs	r3, #48	@ 0x30
 8001a78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001c28 <_vfiprintf_r+0x21c>
 8001a7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001a80:	f04f 0901 	mov.w	r9, #1
 8001a84:	4623      	mov	r3, r4
 8001a86:	469a      	mov	sl, r3
 8001a88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a8c:	b10a      	cbz	r2, 8001a92 <_vfiprintf_r+0x86>
 8001a8e:	2a25      	cmp	r2, #37	@ 0x25
 8001a90:	d1f9      	bne.n	8001a86 <_vfiprintf_r+0x7a>
 8001a92:	ebba 0b04 	subs.w	fp, sl, r4
 8001a96:	d00b      	beq.n	8001ab0 <_vfiprintf_r+0xa4>
 8001a98:	465b      	mov	r3, fp
 8001a9a:	4622      	mov	r2, r4
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	4630      	mov	r0, r6
 8001aa0:	f7ff ffa2 	bl	80019e8 <__sfputs_r>
 8001aa4:	3001      	adds	r0, #1
 8001aa6:	f000 80a7 	beq.w	8001bf8 <_vfiprintf_r+0x1ec>
 8001aaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001aac:	445a      	add	r2, fp
 8001aae:	9209      	str	r2, [sp, #36]	@ 0x24
 8001ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 809f 	beq.w	8001bf8 <_vfiprintf_r+0x1ec>
 8001aba:	2300      	movs	r3, #0
 8001abc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ac0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ac4:	f10a 0a01 	add.w	sl, sl, #1
 8001ac8:	9304      	str	r3, [sp, #16]
 8001aca:	9307      	str	r3, [sp, #28]
 8001acc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001ad0:	931a      	str	r3, [sp, #104]	@ 0x68
 8001ad2:	4654      	mov	r4, sl
 8001ad4:	2205      	movs	r2, #5
 8001ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ada:	4853      	ldr	r0, [pc, #332]	@ (8001c28 <_vfiprintf_r+0x21c>)
 8001adc:	f7fe fb78 	bl	80001d0 <memchr>
 8001ae0:	9a04      	ldr	r2, [sp, #16]
 8001ae2:	b9d8      	cbnz	r0, 8001b1c <_vfiprintf_r+0x110>
 8001ae4:	06d1      	lsls	r1, r2, #27
 8001ae6:	bf44      	itt	mi
 8001ae8:	2320      	movmi	r3, #32
 8001aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001aee:	0713      	lsls	r3, r2, #28
 8001af0:	bf44      	itt	mi
 8001af2:	232b      	movmi	r3, #43	@ 0x2b
 8001af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001af8:	f89a 3000 	ldrb.w	r3, [sl]
 8001afc:	2b2a      	cmp	r3, #42	@ 0x2a
 8001afe:	d015      	beq.n	8001b2c <_vfiprintf_r+0x120>
 8001b00:	9a07      	ldr	r2, [sp, #28]
 8001b02:	4654      	mov	r4, sl
 8001b04:	2000      	movs	r0, #0
 8001b06:	f04f 0c0a 	mov.w	ip, #10
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b10:	3b30      	subs	r3, #48	@ 0x30
 8001b12:	2b09      	cmp	r3, #9
 8001b14:	d94b      	bls.n	8001bae <_vfiprintf_r+0x1a2>
 8001b16:	b1b0      	cbz	r0, 8001b46 <_vfiprintf_r+0x13a>
 8001b18:	9207      	str	r2, [sp, #28]
 8001b1a:	e014      	b.n	8001b46 <_vfiprintf_r+0x13a>
 8001b1c:	eba0 0308 	sub.w	r3, r0, r8
 8001b20:	fa09 f303 	lsl.w	r3, r9, r3
 8001b24:	4313      	orrs	r3, r2
 8001b26:	9304      	str	r3, [sp, #16]
 8001b28:	46a2      	mov	sl, r4
 8001b2a:	e7d2      	b.n	8001ad2 <_vfiprintf_r+0xc6>
 8001b2c:	9b03      	ldr	r3, [sp, #12]
 8001b2e:	1d19      	adds	r1, r3, #4
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	9103      	str	r1, [sp, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	bfbb      	ittet	lt
 8001b38:	425b      	neglt	r3, r3
 8001b3a:	f042 0202 	orrlt.w	r2, r2, #2
 8001b3e:	9307      	strge	r3, [sp, #28]
 8001b40:	9307      	strlt	r3, [sp, #28]
 8001b42:	bfb8      	it	lt
 8001b44:	9204      	strlt	r2, [sp, #16]
 8001b46:	7823      	ldrb	r3, [r4, #0]
 8001b48:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b4a:	d10a      	bne.n	8001b62 <_vfiprintf_r+0x156>
 8001b4c:	7863      	ldrb	r3, [r4, #1]
 8001b4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b50:	d132      	bne.n	8001bb8 <_vfiprintf_r+0x1ac>
 8001b52:	9b03      	ldr	r3, [sp, #12]
 8001b54:	1d1a      	adds	r2, r3, #4
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	9203      	str	r2, [sp, #12]
 8001b5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001b5e:	3402      	adds	r4, #2
 8001b60:	9305      	str	r3, [sp, #20]
 8001b62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001c38 <_vfiprintf_r+0x22c>
 8001b66:	7821      	ldrb	r1, [r4, #0]
 8001b68:	2203      	movs	r2, #3
 8001b6a:	4650      	mov	r0, sl
 8001b6c:	f7fe fb30 	bl	80001d0 <memchr>
 8001b70:	b138      	cbz	r0, 8001b82 <_vfiprintf_r+0x176>
 8001b72:	9b04      	ldr	r3, [sp, #16]
 8001b74:	eba0 000a 	sub.w	r0, r0, sl
 8001b78:	2240      	movs	r2, #64	@ 0x40
 8001b7a:	4082      	lsls	r2, r0
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	3401      	adds	r4, #1
 8001b80:	9304      	str	r3, [sp, #16]
 8001b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b86:	4829      	ldr	r0, [pc, #164]	@ (8001c2c <_vfiprintf_r+0x220>)
 8001b88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001b8c:	2206      	movs	r2, #6
 8001b8e:	f7fe fb1f 	bl	80001d0 <memchr>
 8001b92:	2800      	cmp	r0, #0
 8001b94:	d03f      	beq.n	8001c16 <_vfiprintf_r+0x20a>
 8001b96:	4b26      	ldr	r3, [pc, #152]	@ (8001c30 <_vfiprintf_r+0x224>)
 8001b98:	bb1b      	cbnz	r3, 8001be2 <_vfiprintf_r+0x1d6>
 8001b9a:	9b03      	ldr	r3, [sp, #12]
 8001b9c:	3307      	adds	r3, #7
 8001b9e:	f023 0307 	bic.w	r3, r3, #7
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	9303      	str	r3, [sp, #12]
 8001ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001ba8:	443b      	add	r3, r7
 8001baa:	9309      	str	r3, [sp, #36]	@ 0x24
 8001bac:	e76a      	b.n	8001a84 <_vfiprintf_r+0x78>
 8001bae:	fb0c 3202 	mla	r2, ip, r2, r3
 8001bb2:	460c      	mov	r4, r1
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	e7a8      	b.n	8001b0a <_vfiprintf_r+0xfe>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	3401      	adds	r4, #1
 8001bbc:	9305      	str	r3, [sp, #20]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f04f 0c0a 	mov.w	ip, #10
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001bca:	3a30      	subs	r2, #48	@ 0x30
 8001bcc:	2a09      	cmp	r2, #9
 8001bce:	d903      	bls.n	8001bd8 <_vfiprintf_r+0x1cc>
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0c6      	beq.n	8001b62 <_vfiprintf_r+0x156>
 8001bd4:	9105      	str	r1, [sp, #20]
 8001bd6:	e7c4      	b.n	8001b62 <_vfiprintf_r+0x156>
 8001bd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8001bdc:	4604      	mov	r4, r0
 8001bde:	2301      	movs	r3, #1
 8001be0:	e7f0      	b.n	8001bc4 <_vfiprintf_r+0x1b8>
 8001be2:	ab03      	add	r3, sp, #12
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	462a      	mov	r2, r5
 8001be8:	4b12      	ldr	r3, [pc, #72]	@ (8001c34 <_vfiprintf_r+0x228>)
 8001bea:	a904      	add	r1, sp, #16
 8001bec:	4630      	mov	r0, r6
 8001bee:	f3af 8000 	nop.w
 8001bf2:	4607      	mov	r7, r0
 8001bf4:	1c78      	adds	r0, r7, #1
 8001bf6:	d1d6      	bne.n	8001ba6 <_vfiprintf_r+0x19a>
 8001bf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001bfa:	07d9      	lsls	r1, r3, #31
 8001bfc:	d405      	bmi.n	8001c0a <_vfiprintf_r+0x1fe>
 8001bfe:	89ab      	ldrh	r3, [r5, #12]
 8001c00:	059a      	lsls	r2, r3, #22
 8001c02:	d402      	bmi.n	8001c0a <_vfiprintf_r+0x1fe>
 8001c04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c06:	f7ff fed7 	bl	80019b8 <__retarget_lock_release_recursive>
 8001c0a:	89ab      	ldrh	r3, [r5, #12]
 8001c0c:	065b      	lsls	r3, r3, #25
 8001c0e:	f53f af1f 	bmi.w	8001a50 <_vfiprintf_r+0x44>
 8001c12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001c14:	e71e      	b.n	8001a54 <_vfiprintf_r+0x48>
 8001c16:	ab03      	add	r3, sp, #12
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	462a      	mov	r2, r5
 8001c1c:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <_vfiprintf_r+0x228>)
 8001c1e:	a904      	add	r1, sp, #16
 8001c20:	4630      	mov	r0, r6
 8001c22:	f000 f91b 	bl	8001e5c <_printf_i>
 8001c26:	e7e4      	b.n	8001bf2 <_vfiprintf_r+0x1e6>
 8001c28:	080026e0 	.word	0x080026e0
 8001c2c:	080026ea 	.word	0x080026ea
 8001c30:	00000000 	.word	0x00000000
 8001c34:	080019e9 	.word	0x080019e9
 8001c38:	080026e6 	.word	0x080026e6

08001c3c <sbrk_aligned>:
 8001c3c:	b570      	push	{r4, r5, r6, lr}
 8001c3e:	4e0f      	ldr	r6, [pc, #60]	@ (8001c7c <sbrk_aligned+0x40>)
 8001c40:	460c      	mov	r4, r1
 8001c42:	6831      	ldr	r1, [r6, #0]
 8001c44:	4605      	mov	r5, r0
 8001c46:	b911      	cbnz	r1, 8001c4e <sbrk_aligned+0x12>
 8001c48:	f000 fc4c 	bl	80024e4 <_sbrk_r>
 8001c4c:	6030      	str	r0, [r6, #0]
 8001c4e:	4621      	mov	r1, r4
 8001c50:	4628      	mov	r0, r5
 8001c52:	f000 fc47 	bl	80024e4 <_sbrk_r>
 8001c56:	1c43      	adds	r3, r0, #1
 8001c58:	d103      	bne.n	8001c62 <sbrk_aligned+0x26>
 8001c5a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001c5e:	4620      	mov	r0, r4
 8001c60:	bd70      	pop	{r4, r5, r6, pc}
 8001c62:	1cc4      	adds	r4, r0, #3
 8001c64:	f024 0403 	bic.w	r4, r4, #3
 8001c68:	42a0      	cmp	r0, r4
 8001c6a:	d0f8      	beq.n	8001c5e <sbrk_aligned+0x22>
 8001c6c:	1a21      	subs	r1, r4, r0
 8001c6e:	4628      	mov	r0, r5
 8001c70:	f000 fc38 	bl	80024e4 <_sbrk_r>
 8001c74:	3001      	adds	r0, #1
 8001c76:	d1f2      	bne.n	8001c5e <sbrk_aligned+0x22>
 8001c78:	e7ef      	b.n	8001c5a <sbrk_aligned+0x1e>
 8001c7a:	bf00      	nop
 8001c7c:	2000021c 	.word	0x2000021c

08001c80 <_malloc_r>:
 8001c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c84:	1ccd      	adds	r5, r1, #3
 8001c86:	f025 0503 	bic.w	r5, r5, #3
 8001c8a:	3508      	adds	r5, #8
 8001c8c:	2d0c      	cmp	r5, #12
 8001c8e:	bf38      	it	cc
 8001c90:	250c      	movcc	r5, #12
 8001c92:	2d00      	cmp	r5, #0
 8001c94:	4606      	mov	r6, r0
 8001c96:	db01      	blt.n	8001c9c <_malloc_r+0x1c>
 8001c98:	42a9      	cmp	r1, r5
 8001c9a:	d904      	bls.n	8001ca6 <_malloc_r+0x26>
 8001c9c:	230c      	movs	r3, #12
 8001c9e:	6033      	str	r3, [r6, #0]
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ca6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001d7c <_malloc_r+0xfc>
 8001caa:	f000 faa1 	bl	80021f0 <__malloc_lock>
 8001cae:	f8d8 3000 	ldr.w	r3, [r8]
 8001cb2:	461c      	mov	r4, r3
 8001cb4:	bb44      	cbnz	r4, 8001d08 <_malloc_r+0x88>
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	4630      	mov	r0, r6
 8001cba:	f7ff ffbf 	bl	8001c3c <sbrk_aligned>
 8001cbe:	1c43      	adds	r3, r0, #1
 8001cc0:	4604      	mov	r4, r0
 8001cc2:	d158      	bne.n	8001d76 <_malloc_r+0xf6>
 8001cc4:	f8d8 4000 	ldr.w	r4, [r8]
 8001cc8:	4627      	mov	r7, r4
 8001cca:	2f00      	cmp	r7, #0
 8001ccc:	d143      	bne.n	8001d56 <_malloc_r+0xd6>
 8001cce:	2c00      	cmp	r4, #0
 8001cd0:	d04b      	beq.n	8001d6a <_malloc_r+0xea>
 8001cd2:	6823      	ldr	r3, [r4, #0]
 8001cd4:	4639      	mov	r1, r7
 8001cd6:	4630      	mov	r0, r6
 8001cd8:	eb04 0903 	add.w	r9, r4, r3
 8001cdc:	f000 fc02 	bl	80024e4 <_sbrk_r>
 8001ce0:	4581      	cmp	r9, r0
 8001ce2:	d142      	bne.n	8001d6a <_malloc_r+0xea>
 8001ce4:	6821      	ldr	r1, [r4, #0]
 8001ce6:	1a6d      	subs	r5, r5, r1
 8001ce8:	4629      	mov	r1, r5
 8001cea:	4630      	mov	r0, r6
 8001cec:	f7ff ffa6 	bl	8001c3c <sbrk_aligned>
 8001cf0:	3001      	adds	r0, #1
 8001cf2:	d03a      	beq.n	8001d6a <_malloc_r+0xea>
 8001cf4:	6823      	ldr	r3, [r4, #0]
 8001cf6:	442b      	add	r3, r5
 8001cf8:	6023      	str	r3, [r4, #0]
 8001cfa:	f8d8 3000 	ldr.w	r3, [r8]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	bb62      	cbnz	r2, 8001d5c <_malloc_r+0xdc>
 8001d02:	f8c8 7000 	str.w	r7, [r8]
 8001d06:	e00f      	b.n	8001d28 <_malloc_r+0xa8>
 8001d08:	6822      	ldr	r2, [r4, #0]
 8001d0a:	1b52      	subs	r2, r2, r5
 8001d0c:	d420      	bmi.n	8001d50 <_malloc_r+0xd0>
 8001d0e:	2a0b      	cmp	r2, #11
 8001d10:	d917      	bls.n	8001d42 <_malloc_r+0xc2>
 8001d12:	1961      	adds	r1, r4, r5
 8001d14:	42a3      	cmp	r3, r4
 8001d16:	6025      	str	r5, [r4, #0]
 8001d18:	bf18      	it	ne
 8001d1a:	6059      	strne	r1, [r3, #4]
 8001d1c:	6863      	ldr	r3, [r4, #4]
 8001d1e:	bf08      	it	eq
 8001d20:	f8c8 1000 	streq.w	r1, [r8]
 8001d24:	5162      	str	r2, [r4, r5]
 8001d26:	604b      	str	r3, [r1, #4]
 8001d28:	4630      	mov	r0, r6
 8001d2a:	f000 fa67 	bl	80021fc <__malloc_unlock>
 8001d2e:	f104 000b 	add.w	r0, r4, #11
 8001d32:	1d23      	adds	r3, r4, #4
 8001d34:	f020 0007 	bic.w	r0, r0, #7
 8001d38:	1ac2      	subs	r2, r0, r3
 8001d3a:	bf1c      	itt	ne
 8001d3c:	1a1b      	subne	r3, r3, r0
 8001d3e:	50a3      	strne	r3, [r4, r2]
 8001d40:	e7af      	b.n	8001ca2 <_malloc_r+0x22>
 8001d42:	6862      	ldr	r2, [r4, #4]
 8001d44:	42a3      	cmp	r3, r4
 8001d46:	bf0c      	ite	eq
 8001d48:	f8c8 2000 	streq.w	r2, [r8]
 8001d4c:	605a      	strne	r2, [r3, #4]
 8001d4e:	e7eb      	b.n	8001d28 <_malloc_r+0xa8>
 8001d50:	4623      	mov	r3, r4
 8001d52:	6864      	ldr	r4, [r4, #4]
 8001d54:	e7ae      	b.n	8001cb4 <_malloc_r+0x34>
 8001d56:	463c      	mov	r4, r7
 8001d58:	687f      	ldr	r7, [r7, #4]
 8001d5a:	e7b6      	b.n	8001cca <_malloc_r+0x4a>
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	42a3      	cmp	r3, r4
 8001d62:	d1fb      	bne.n	8001d5c <_malloc_r+0xdc>
 8001d64:	2300      	movs	r3, #0
 8001d66:	6053      	str	r3, [r2, #4]
 8001d68:	e7de      	b.n	8001d28 <_malloc_r+0xa8>
 8001d6a:	230c      	movs	r3, #12
 8001d6c:	6033      	str	r3, [r6, #0]
 8001d6e:	4630      	mov	r0, r6
 8001d70:	f000 fa44 	bl	80021fc <__malloc_unlock>
 8001d74:	e794      	b.n	8001ca0 <_malloc_r+0x20>
 8001d76:	6005      	str	r5, [r0, #0]
 8001d78:	e7d6      	b.n	8001d28 <_malloc_r+0xa8>
 8001d7a:	bf00      	nop
 8001d7c:	20000220 	.word	0x20000220

08001d80 <_printf_common>:
 8001d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d84:	4616      	mov	r6, r2
 8001d86:	4698      	mov	r8, r3
 8001d88:	688a      	ldr	r2, [r1, #8]
 8001d8a:	690b      	ldr	r3, [r1, #16]
 8001d8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001d90:	4293      	cmp	r3, r2
 8001d92:	bfb8      	it	lt
 8001d94:	4613      	movlt	r3, r2
 8001d96:	6033      	str	r3, [r6, #0]
 8001d98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001d9c:	4607      	mov	r7, r0
 8001d9e:	460c      	mov	r4, r1
 8001da0:	b10a      	cbz	r2, 8001da6 <_printf_common+0x26>
 8001da2:	3301      	adds	r3, #1
 8001da4:	6033      	str	r3, [r6, #0]
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	0699      	lsls	r1, r3, #26
 8001daa:	bf42      	ittt	mi
 8001dac:	6833      	ldrmi	r3, [r6, #0]
 8001dae:	3302      	addmi	r3, #2
 8001db0:	6033      	strmi	r3, [r6, #0]
 8001db2:	6825      	ldr	r5, [r4, #0]
 8001db4:	f015 0506 	ands.w	r5, r5, #6
 8001db8:	d106      	bne.n	8001dc8 <_printf_common+0x48>
 8001dba:	f104 0a19 	add.w	sl, r4, #25
 8001dbe:	68e3      	ldr	r3, [r4, #12]
 8001dc0:	6832      	ldr	r2, [r6, #0]
 8001dc2:	1a9b      	subs	r3, r3, r2
 8001dc4:	42ab      	cmp	r3, r5
 8001dc6:	dc26      	bgt.n	8001e16 <_printf_common+0x96>
 8001dc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001dcc:	6822      	ldr	r2, [r4, #0]
 8001dce:	3b00      	subs	r3, #0
 8001dd0:	bf18      	it	ne
 8001dd2:	2301      	movne	r3, #1
 8001dd4:	0692      	lsls	r2, r2, #26
 8001dd6:	d42b      	bmi.n	8001e30 <_printf_common+0xb0>
 8001dd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001ddc:	4641      	mov	r1, r8
 8001dde:	4638      	mov	r0, r7
 8001de0:	47c8      	blx	r9
 8001de2:	3001      	adds	r0, #1
 8001de4:	d01e      	beq.n	8001e24 <_printf_common+0xa4>
 8001de6:	6823      	ldr	r3, [r4, #0]
 8001de8:	6922      	ldr	r2, [r4, #16]
 8001dea:	f003 0306 	and.w	r3, r3, #6
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	bf02      	ittt	eq
 8001df2:	68e5      	ldreq	r5, [r4, #12]
 8001df4:	6833      	ldreq	r3, [r6, #0]
 8001df6:	1aed      	subeq	r5, r5, r3
 8001df8:	68a3      	ldr	r3, [r4, #8]
 8001dfa:	bf0c      	ite	eq
 8001dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e00:	2500      	movne	r5, #0
 8001e02:	4293      	cmp	r3, r2
 8001e04:	bfc4      	itt	gt
 8001e06:	1a9b      	subgt	r3, r3, r2
 8001e08:	18ed      	addgt	r5, r5, r3
 8001e0a:	2600      	movs	r6, #0
 8001e0c:	341a      	adds	r4, #26
 8001e0e:	42b5      	cmp	r5, r6
 8001e10:	d11a      	bne.n	8001e48 <_printf_common+0xc8>
 8001e12:	2000      	movs	r0, #0
 8001e14:	e008      	b.n	8001e28 <_printf_common+0xa8>
 8001e16:	2301      	movs	r3, #1
 8001e18:	4652      	mov	r2, sl
 8001e1a:	4641      	mov	r1, r8
 8001e1c:	4638      	mov	r0, r7
 8001e1e:	47c8      	blx	r9
 8001e20:	3001      	adds	r0, #1
 8001e22:	d103      	bne.n	8001e2c <_printf_common+0xac>
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e2c:	3501      	adds	r5, #1
 8001e2e:	e7c6      	b.n	8001dbe <_printf_common+0x3e>
 8001e30:	18e1      	adds	r1, r4, r3
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	2030      	movs	r0, #48	@ 0x30
 8001e36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001e3a:	4422      	add	r2, r4
 8001e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001e40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001e44:	3302      	adds	r3, #2
 8001e46:	e7c7      	b.n	8001dd8 <_printf_common+0x58>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	4622      	mov	r2, r4
 8001e4c:	4641      	mov	r1, r8
 8001e4e:	4638      	mov	r0, r7
 8001e50:	47c8      	blx	r9
 8001e52:	3001      	adds	r0, #1
 8001e54:	d0e6      	beq.n	8001e24 <_printf_common+0xa4>
 8001e56:	3601      	adds	r6, #1
 8001e58:	e7d9      	b.n	8001e0e <_printf_common+0x8e>
	...

08001e5c <_printf_i>:
 8001e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e60:	7e0f      	ldrb	r7, [r1, #24]
 8001e62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001e64:	2f78      	cmp	r7, #120	@ 0x78
 8001e66:	4691      	mov	r9, r2
 8001e68:	4680      	mov	r8, r0
 8001e6a:	460c      	mov	r4, r1
 8001e6c:	469a      	mov	sl, r3
 8001e6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001e72:	d807      	bhi.n	8001e84 <_printf_i+0x28>
 8001e74:	2f62      	cmp	r7, #98	@ 0x62
 8001e76:	d80a      	bhi.n	8001e8e <_printf_i+0x32>
 8001e78:	2f00      	cmp	r7, #0
 8001e7a:	f000 80d1 	beq.w	8002020 <_printf_i+0x1c4>
 8001e7e:	2f58      	cmp	r7, #88	@ 0x58
 8001e80:	f000 80b8 	beq.w	8001ff4 <_printf_i+0x198>
 8001e84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001e88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001e8c:	e03a      	b.n	8001f04 <_printf_i+0xa8>
 8001e8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001e92:	2b15      	cmp	r3, #21
 8001e94:	d8f6      	bhi.n	8001e84 <_printf_i+0x28>
 8001e96:	a101      	add	r1, pc, #4	@ (adr r1, 8001e9c <_printf_i+0x40>)
 8001e98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001e9c:	08001ef5 	.word	0x08001ef5
 8001ea0:	08001f09 	.word	0x08001f09
 8001ea4:	08001e85 	.word	0x08001e85
 8001ea8:	08001e85 	.word	0x08001e85
 8001eac:	08001e85 	.word	0x08001e85
 8001eb0:	08001e85 	.word	0x08001e85
 8001eb4:	08001f09 	.word	0x08001f09
 8001eb8:	08001e85 	.word	0x08001e85
 8001ebc:	08001e85 	.word	0x08001e85
 8001ec0:	08001e85 	.word	0x08001e85
 8001ec4:	08001e85 	.word	0x08001e85
 8001ec8:	08002007 	.word	0x08002007
 8001ecc:	08001f33 	.word	0x08001f33
 8001ed0:	08001fc1 	.word	0x08001fc1
 8001ed4:	08001e85 	.word	0x08001e85
 8001ed8:	08001e85 	.word	0x08001e85
 8001edc:	08002029 	.word	0x08002029
 8001ee0:	08001e85 	.word	0x08001e85
 8001ee4:	08001f33 	.word	0x08001f33
 8001ee8:	08001e85 	.word	0x08001e85
 8001eec:	08001e85 	.word	0x08001e85
 8001ef0:	08001fc9 	.word	0x08001fc9
 8001ef4:	6833      	ldr	r3, [r6, #0]
 8001ef6:	1d1a      	adds	r2, r3, #4
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6032      	str	r2, [r6, #0]
 8001efc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001f00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001f04:	2301      	movs	r3, #1
 8001f06:	e09c      	b.n	8002042 <_printf_i+0x1e6>
 8001f08:	6833      	ldr	r3, [r6, #0]
 8001f0a:	6820      	ldr	r0, [r4, #0]
 8001f0c:	1d19      	adds	r1, r3, #4
 8001f0e:	6031      	str	r1, [r6, #0]
 8001f10:	0606      	lsls	r6, r0, #24
 8001f12:	d501      	bpl.n	8001f18 <_printf_i+0xbc>
 8001f14:	681d      	ldr	r5, [r3, #0]
 8001f16:	e003      	b.n	8001f20 <_printf_i+0xc4>
 8001f18:	0645      	lsls	r5, r0, #25
 8001f1a:	d5fb      	bpl.n	8001f14 <_printf_i+0xb8>
 8001f1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001f20:	2d00      	cmp	r5, #0
 8001f22:	da03      	bge.n	8001f2c <_printf_i+0xd0>
 8001f24:	232d      	movs	r3, #45	@ 0x2d
 8001f26:	426d      	negs	r5, r5
 8001f28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f2c:	4858      	ldr	r0, [pc, #352]	@ (8002090 <_printf_i+0x234>)
 8001f2e:	230a      	movs	r3, #10
 8001f30:	e011      	b.n	8001f56 <_printf_i+0xfa>
 8001f32:	6821      	ldr	r1, [r4, #0]
 8001f34:	6833      	ldr	r3, [r6, #0]
 8001f36:	0608      	lsls	r0, r1, #24
 8001f38:	f853 5b04 	ldr.w	r5, [r3], #4
 8001f3c:	d402      	bmi.n	8001f44 <_printf_i+0xe8>
 8001f3e:	0649      	lsls	r1, r1, #25
 8001f40:	bf48      	it	mi
 8001f42:	b2ad      	uxthmi	r5, r5
 8001f44:	2f6f      	cmp	r7, #111	@ 0x6f
 8001f46:	4852      	ldr	r0, [pc, #328]	@ (8002090 <_printf_i+0x234>)
 8001f48:	6033      	str	r3, [r6, #0]
 8001f4a:	bf14      	ite	ne
 8001f4c:	230a      	movne	r3, #10
 8001f4e:	2308      	moveq	r3, #8
 8001f50:	2100      	movs	r1, #0
 8001f52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001f56:	6866      	ldr	r6, [r4, #4]
 8001f58:	60a6      	str	r6, [r4, #8]
 8001f5a:	2e00      	cmp	r6, #0
 8001f5c:	db05      	blt.n	8001f6a <_printf_i+0x10e>
 8001f5e:	6821      	ldr	r1, [r4, #0]
 8001f60:	432e      	orrs	r6, r5
 8001f62:	f021 0104 	bic.w	r1, r1, #4
 8001f66:	6021      	str	r1, [r4, #0]
 8001f68:	d04b      	beq.n	8002002 <_printf_i+0x1a6>
 8001f6a:	4616      	mov	r6, r2
 8001f6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001f70:	fb03 5711 	mls	r7, r3, r1, r5
 8001f74:	5dc7      	ldrb	r7, [r0, r7]
 8001f76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001f7a:	462f      	mov	r7, r5
 8001f7c:	42bb      	cmp	r3, r7
 8001f7e:	460d      	mov	r5, r1
 8001f80:	d9f4      	bls.n	8001f6c <_printf_i+0x110>
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d10b      	bne.n	8001f9e <_printf_i+0x142>
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	07df      	lsls	r7, r3, #31
 8001f8a:	d508      	bpl.n	8001f9e <_printf_i+0x142>
 8001f8c:	6923      	ldr	r3, [r4, #16]
 8001f8e:	6861      	ldr	r1, [r4, #4]
 8001f90:	4299      	cmp	r1, r3
 8001f92:	bfde      	ittt	le
 8001f94:	2330      	movle	r3, #48	@ 0x30
 8001f96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001f9a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001f9e:	1b92      	subs	r2, r2, r6
 8001fa0:	6122      	str	r2, [r4, #16]
 8001fa2:	f8cd a000 	str.w	sl, [sp]
 8001fa6:	464b      	mov	r3, r9
 8001fa8:	aa03      	add	r2, sp, #12
 8001faa:	4621      	mov	r1, r4
 8001fac:	4640      	mov	r0, r8
 8001fae:	f7ff fee7 	bl	8001d80 <_printf_common>
 8001fb2:	3001      	adds	r0, #1
 8001fb4:	d14a      	bne.n	800204c <_printf_i+0x1f0>
 8001fb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fba:	b004      	add	sp, #16
 8001fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fc0:	6823      	ldr	r3, [r4, #0]
 8001fc2:	f043 0320 	orr.w	r3, r3, #32
 8001fc6:	6023      	str	r3, [r4, #0]
 8001fc8:	4832      	ldr	r0, [pc, #200]	@ (8002094 <_printf_i+0x238>)
 8001fca:	2778      	movs	r7, #120	@ 0x78
 8001fcc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001fd0:	6823      	ldr	r3, [r4, #0]
 8001fd2:	6831      	ldr	r1, [r6, #0]
 8001fd4:	061f      	lsls	r7, r3, #24
 8001fd6:	f851 5b04 	ldr.w	r5, [r1], #4
 8001fda:	d402      	bmi.n	8001fe2 <_printf_i+0x186>
 8001fdc:	065f      	lsls	r7, r3, #25
 8001fde:	bf48      	it	mi
 8001fe0:	b2ad      	uxthmi	r5, r5
 8001fe2:	6031      	str	r1, [r6, #0]
 8001fe4:	07d9      	lsls	r1, r3, #31
 8001fe6:	bf44      	itt	mi
 8001fe8:	f043 0320 	orrmi.w	r3, r3, #32
 8001fec:	6023      	strmi	r3, [r4, #0]
 8001fee:	b11d      	cbz	r5, 8001ff8 <_printf_i+0x19c>
 8001ff0:	2310      	movs	r3, #16
 8001ff2:	e7ad      	b.n	8001f50 <_printf_i+0xf4>
 8001ff4:	4826      	ldr	r0, [pc, #152]	@ (8002090 <_printf_i+0x234>)
 8001ff6:	e7e9      	b.n	8001fcc <_printf_i+0x170>
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	f023 0320 	bic.w	r3, r3, #32
 8001ffe:	6023      	str	r3, [r4, #0]
 8002000:	e7f6      	b.n	8001ff0 <_printf_i+0x194>
 8002002:	4616      	mov	r6, r2
 8002004:	e7bd      	b.n	8001f82 <_printf_i+0x126>
 8002006:	6833      	ldr	r3, [r6, #0]
 8002008:	6825      	ldr	r5, [r4, #0]
 800200a:	6961      	ldr	r1, [r4, #20]
 800200c:	1d18      	adds	r0, r3, #4
 800200e:	6030      	str	r0, [r6, #0]
 8002010:	062e      	lsls	r6, r5, #24
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	d501      	bpl.n	800201a <_printf_i+0x1be>
 8002016:	6019      	str	r1, [r3, #0]
 8002018:	e002      	b.n	8002020 <_printf_i+0x1c4>
 800201a:	0668      	lsls	r0, r5, #25
 800201c:	d5fb      	bpl.n	8002016 <_printf_i+0x1ba>
 800201e:	8019      	strh	r1, [r3, #0]
 8002020:	2300      	movs	r3, #0
 8002022:	6123      	str	r3, [r4, #16]
 8002024:	4616      	mov	r6, r2
 8002026:	e7bc      	b.n	8001fa2 <_printf_i+0x146>
 8002028:	6833      	ldr	r3, [r6, #0]
 800202a:	1d1a      	adds	r2, r3, #4
 800202c:	6032      	str	r2, [r6, #0]
 800202e:	681e      	ldr	r6, [r3, #0]
 8002030:	6862      	ldr	r2, [r4, #4]
 8002032:	2100      	movs	r1, #0
 8002034:	4630      	mov	r0, r6
 8002036:	f7fe f8cb 	bl	80001d0 <memchr>
 800203a:	b108      	cbz	r0, 8002040 <_printf_i+0x1e4>
 800203c:	1b80      	subs	r0, r0, r6
 800203e:	6060      	str	r0, [r4, #4]
 8002040:	6863      	ldr	r3, [r4, #4]
 8002042:	6123      	str	r3, [r4, #16]
 8002044:	2300      	movs	r3, #0
 8002046:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800204a:	e7aa      	b.n	8001fa2 <_printf_i+0x146>
 800204c:	6923      	ldr	r3, [r4, #16]
 800204e:	4632      	mov	r2, r6
 8002050:	4649      	mov	r1, r9
 8002052:	4640      	mov	r0, r8
 8002054:	47d0      	blx	sl
 8002056:	3001      	adds	r0, #1
 8002058:	d0ad      	beq.n	8001fb6 <_printf_i+0x15a>
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	079b      	lsls	r3, r3, #30
 800205e:	d413      	bmi.n	8002088 <_printf_i+0x22c>
 8002060:	68e0      	ldr	r0, [r4, #12]
 8002062:	9b03      	ldr	r3, [sp, #12]
 8002064:	4298      	cmp	r0, r3
 8002066:	bfb8      	it	lt
 8002068:	4618      	movlt	r0, r3
 800206a:	e7a6      	b.n	8001fba <_printf_i+0x15e>
 800206c:	2301      	movs	r3, #1
 800206e:	4632      	mov	r2, r6
 8002070:	4649      	mov	r1, r9
 8002072:	4640      	mov	r0, r8
 8002074:	47d0      	blx	sl
 8002076:	3001      	adds	r0, #1
 8002078:	d09d      	beq.n	8001fb6 <_printf_i+0x15a>
 800207a:	3501      	adds	r5, #1
 800207c:	68e3      	ldr	r3, [r4, #12]
 800207e:	9903      	ldr	r1, [sp, #12]
 8002080:	1a5b      	subs	r3, r3, r1
 8002082:	42ab      	cmp	r3, r5
 8002084:	dcf2      	bgt.n	800206c <_printf_i+0x210>
 8002086:	e7eb      	b.n	8002060 <_printf_i+0x204>
 8002088:	2500      	movs	r5, #0
 800208a:	f104 0619 	add.w	r6, r4, #25
 800208e:	e7f5      	b.n	800207c <_printf_i+0x220>
 8002090:	080026f1 	.word	0x080026f1
 8002094:	08002702 	.word	0x08002702

08002098 <__sflush_r>:
 8002098:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800209c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020a0:	0716      	lsls	r6, r2, #28
 80020a2:	4605      	mov	r5, r0
 80020a4:	460c      	mov	r4, r1
 80020a6:	d454      	bmi.n	8002152 <__sflush_r+0xba>
 80020a8:	684b      	ldr	r3, [r1, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	dc02      	bgt.n	80020b4 <__sflush_r+0x1c>
 80020ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	dd48      	ble.n	8002146 <__sflush_r+0xae>
 80020b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80020b6:	2e00      	cmp	r6, #0
 80020b8:	d045      	beq.n	8002146 <__sflush_r+0xae>
 80020ba:	2300      	movs	r3, #0
 80020bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80020c0:	682f      	ldr	r7, [r5, #0]
 80020c2:	6a21      	ldr	r1, [r4, #32]
 80020c4:	602b      	str	r3, [r5, #0]
 80020c6:	d030      	beq.n	800212a <__sflush_r+0x92>
 80020c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80020ca:	89a3      	ldrh	r3, [r4, #12]
 80020cc:	0759      	lsls	r1, r3, #29
 80020ce:	d505      	bpl.n	80020dc <__sflush_r+0x44>
 80020d0:	6863      	ldr	r3, [r4, #4]
 80020d2:	1ad2      	subs	r2, r2, r3
 80020d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80020d6:	b10b      	cbz	r3, 80020dc <__sflush_r+0x44>
 80020d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80020da:	1ad2      	subs	r2, r2, r3
 80020dc:	2300      	movs	r3, #0
 80020de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80020e0:	6a21      	ldr	r1, [r4, #32]
 80020e2:	4628      	mov	r0, r5
 80020e4:	47b0      	blx	r6
 80020e6:	1c43      	adds	r3, r0, #1
 80020e8:	89a3      	ldrh	r3, [r4, #12]
 80020ea:	d106      	bne.n	80020fa <__sflush_r+0x62>
 80020ec:	6829      	ldr	r1, [r5, #0]
 80020ee:	291d      	cmp	r1, #29
 80020f0:	d82b      	bhi.n	800214a <__sflush_r+0xb2>
 80020f2:	4a2a      	ldr	r2, [pc, #168]	@ (800219c <__sflush_r+0x104>)
 80020f4:	40ca      	lsrs	r2, r1
 80020f6:	07d6      	lsls	r6, r2, #31
 80020f8:	d527      	bpl.n	800214a <__sflush_r+0xb2>
 80020fa:	2200      	movs	r2, #0
 80020fc:	6062      	str	r2, [r4, #4]
 80020fe:	04d9      	lsls	r1, r3, #19
 8002100:	6922      	ldr	r2, [r4, #16]
 8002102:	6022      	str	r2, [r4, #0]
 8002104:	d504      	bpl.n	8002110 <__sflush_r+0x78>
 8002106:	1c42      	adds	r2, r0, #1
 8002108:	d101      	bne.n	800210e <__sflush_r+0x76>
 800210a:	682b      	ldr	r3, [r5, #0]
 800210c:	b903      	cbnz	r3, 8002110 <__sflush_r+0x78>
 800210e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002110:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002112:	602f      	str	r7, [r5, #0]
 8002114:	b1b9      	cbz	r1, 8002146 <__sflush_r+0xae>
 8002116:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800211a:	4299      	cmp	r1, r3
 800211c:	d002      	beq.n	8002124 <__sflush_r+0x8c>
 800211e:	4628      	mov	r0, r5
 8002120:	f000 fa24 	bl	800256c <_free_r>
 8002124:	2300      	movs	r3, #0
 8002126:	6363      	str	r3, [r4, #52]	@ 0x34
 8002128:	e00d      	b.n	8002146 <__sflush_r+0xae>
 800212a:	2301      	movs	r3, #1
 800212c:	4628      	mov	r0, r5
 800212e:	47b0      	blx	r6
 8002130:	4602      	mov	r2, r0
 8002132:	1c50      	adds	r0, r2, #1
 8002134:	d1c9      	bne.n	80020ca <__sflush_r+0x32>
 8002136:	682b      	ldr	r3, [r5, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0c6      	beq.n	80020ca <__sflush_r+0x32>
 800213c:	2b1d      	cmp	r3, #29
 800213e:	d001      	beq.n	8002144 <__sflush_r+0xac>
 8002140:	2b16      	cmp	r3, #22
 8002142:	d11e      	bne.n	8002182 <__sflush_r+0xea>
 8002144:	602f      	str	r7, [r5, #0]
 8002146:	2000      	movs	r0, #0
 8002148:	e022      	b.n	8002190 <__sflush_r+0xf8>
 800214a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800214e:	b21b      	sxth	r3, r3
 8002150:	e01b      	b.n	800218a <__sflush_r+0xf2>
 8002152:	690f      	ldr	r7, [r1, #16]
 8002154:	2f00      	cmp	r7, #0
 8002156:	d0f6      	beq.n	8002146 <__sflush_r+0xae>
 8002158:	0793      	lsls	r3, r2, #30
 800215a:	680e      	ldr	r6, [r1, #0]
 800215c:	bf08      	it	eq
 800215e:	694b      	ldreq	r3, [r1, #20]
 8002160:	600f      	str	r7, [r1, #0]
 8002162:	bf18      	it	ne
 8002164:	2300      	movne	r3, #0
 8002166:	eba6 0807 	sub.w	r8, r6, r7
 800216a:	608b      	str	r3, [r1, #8]
 800216c:	f1b8 0f00 	cmp.w	r8, #0
 8002170:	dde9      	ble.n	8002146 <__sflush_r+0xae>
 8002172:	6a21      	ldr	r1, [r4, #32]
 8002174:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002176:	4643      	mov	r3, r8
 8002178:	463a      	mov	r2, r7
 800217a:	4628      	mov	r0, r5
 800217c:	47b0      	blx	r6
 800217e:	2800      	cmp	r0, #0
 8002180:	dc08      	bgt.n	8002194 <__sflush_r+0xfc>
 8002182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800218a:	81a3      	strh	r3, [r4, #12]
 800218c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002194:	4407      	add	r7, r0
 8002196:	eba8 0800 	sub.w	r8, r8, r0
 800219a:	e7e7      	b.n	800216c <__sflush_r+0xd4>
 800219c:	20400001 	.word	0x20400001

080021a0 <_fflush_r>:
 80021a0:	b538      	push	{r3, r4, r5, lr}
 80021a2:	690b      	ldr	r3, [r1, #16]
 80021a4:	4605      	mov	r5, r0
 80021a6:	460c      	mov	r4, r1
 80021a8:	b913      	cbnz	r3, 80021b0 <_fflush_r+0x10>
 80021aa:	2500      	movs	r5, #0
 80021ac:	4628      	mov	r0, r5
 80021ae:	bd38      	pop	{r3, r4, r5, pc}
 80021b0:	b118      	cbz	r0, 80021ba <_fflush_r+0x1a>
 80021b2:	6a03      	ldr	r3, [r0, #32]
 80021b4:	b90b      	cbnz	r3, 80021ba <_fflush_r+0x1a>
 80021b6:	f7ff fb25 	bl	8001804 <__sinit>
 80021ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f3      	beq.n	80021aa <_fflush_r+0xa>
 80021c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80021c4:	07d0      	lsls	r0, r2, #31
 80021c6:	d404      	bmi.n	80021d2 <_fflush_r+0x32>
 80021c8:	0599      	lsls	r1, r3, #22
 80021ca:	d402      	bmi.n	80021d2 <_fflush_r+0x32>
 80021cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80021ce:	f7ff fbf2 	bl	80019b6 <__retarget_lock_acquire_recursive>
 80021d2:	4628      	mov	r0, r5
 80021d4:	4621      	mov	r1, r4
 80021d6:	f7ff ff5f 	bl	8002098 <__sflush_r>
 80021da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80021dc:	07da      	lsls	r2, r3, #31
 80021de:	4605      	mov	r5, r0
 80021e0:	d4e4      	bmi.n	80021ac <_fflush_r+0xc>
 80021e2:	89a3      	ldrh	r3, [r4, #12]
 80021e4:	059b      	lsls	r3, r3, #22
 80021e6:	d4e1      	bmi.n	80021ac <_fflush_r+0xc>
 80021e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80021ea:	f7ff fbe5 	bl	80019b8 <__retarget_lock_release_recursive>
 80021ee:	e7dd      	b.n	80021ac <_fflush_r+0xc>

080021f0 <__malloc_lock>:
 80021f0:	4801      	ldr	r0, [pc, #4]	@ (80021f8 <__malloc_lock+0x8>)
 80021f2:	f7ff bbe0 	b.w	80019b6 <__retarget_lock_acquire_recursive>
 80021f6:	bf00      	nop
 80021f8:	20000218 	.word	0x20000218

080021fc <__malloc_unlock>:
 80021fc:	4801      	ldr	r0, [pc, #4]	@ (8002204 <__malloc_unlock+0x8>)
 80021fe:	f7ff bbdb 	b.w	80019b8 <__retarget_lock_release_recursive>
 8002202:	bf00      	nop
 8002204:	20000218 	.word	0x20000218

08002208 <__sread>:
 8002208:	b510      	push	{r4, lr}
 800220a:	460c      	mov	r4, r1
 800220c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002210:	f000 f956 	bl	80024c0 <_read_r>
 8002214:	2800      	cmp	r0, #0
 8002216:	bfab      	itete	ge
 8002218:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800221a:	89a3      	ldrhlt	r3, [r4, #12]
 800221c:	181b      	addge	r3, r3, r0
 800221e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002222:	bfac      	ite	ge
 8002224:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002226:	81a3      	strhlt	r3, [r4, #12]
 8002228:	bd10      	pop	{r4, pc}

0800222a <__swrite>:
 800222a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800222e:	461f      	mov	r7, r3
 8002230:	898b      	ldrh	r3, [r1, #12]
 8002232:	05db      	lsls	r3, r3, #23
 8002234:	4605      	mov	r5, r0
 8002236:	460c      	mov	r4, r1
 8002238:	4616      	mov	r6, r2
 800223a:	d505      	bpl.n	8002248 <__swrite+0x1e>
 800223c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002240:	2302      	movs	r3, #2
 8002242:	2200      	movs	r2, #0
 8002244:	f000 f92a 	bl	800249c <_lseek_r>
 8002248:	89a3      	ldrh	r3, [r4, #12]
 800224a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800224e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002252:	81a3      	strh	r3, [r4, #12]
 8002254:	4632      	mov	r2, r6
 8002256:	463b      	mov	r3, r7
 8002258:	4628      	mov	r0, r5
 800225a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800225e:	f000 b951 	b.w	8002504 <_write_r>

08002262 <__sseek>:
 8002262:	b510      	push	{r4, lr}
 8002264:	460c      	mov	r4, r1
 8002266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800226a:	f000 f917 	bl	800249c <_lseek_r>
 800226e:	1c43      	adds	r3, r0, #1
 8002270:	89a3      	ldrh	r3, [r4, #12]
 8002272:	bf15      	itete	ne
 8002274:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002276:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800227a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800227e:	81a3      	strheq	r3, [r4, #12]
 8002280:	bf18      	it	ne
 8002282:	81a3      	strhne	r3, [r4, #12]
 8002284:	bd10      	pop	{r4, pc}

08002286 <__sclose>:
 8002286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800228a:	f000 b94d 	b.w	8002528 <_close_r>

0800228e <__swbuf_r>:
 800228e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002290:	460e      	mov	r6, r1
 8002292:	4614      	mov	r4, r2
 8002294:	4605      	mov	r5, r0
 8002296:	b118      	cbz	r0, 80022a0 <__swbuf_r+0x12>
 8002298:	6a03      	ldr	r3, [r0, #32]
 800229a:	b90b      	cbnz	r3, 80022a0 <__swbuf_r+0x12>
 800229c:	f7ff fab2 	bl	8001804 <__sinit>
 80022a0:	69a3      	ldr	r3, [r4, #24]
 80022a2:	60a3      	str	r3, [r4, #8]
 80022a4:	89a3      	ldrh	r3, [r4, #12]
 80022a6:	071a      	lsls	r2, r3, #28
 80022a8:	d501      	bpl.n	80022ae <__swbuf_r+0x20>
 80022aa:	6923      	ldr	r3, [r4, #16]
 80022ac:	b943      	cbnz	r3, 80022c0 <__swbuf_r+0x32>
 80022ae:	4621      	mov	r1, r4
 80022b0:	4628      	mov	r0, r5
 80022b2:	f000 f82b 	bl	800230c <__swsetup_r>
 80022b6:	b118      	cbz	r0, 80022c0 <__swbuf_r+0x32>
 80022b8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80022bc:	4638      	mov	r0, r7
 80022be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022c0:	6823      	ldr	r3, [r4, #0]
 80022c2:	6922      	ldr	r2, [r4, #16]
 80022c4:	1a98      	subs	r0, r3, r2
 80022c6:	6963      	ldr	r3, [r4, #20]
 80022c8:	b2f6      	uxtb	r6, r6
 80022ca:	4283      	cmp	r3, r0
 80022cc:	4637      	mov	r7, r6
 80022ce:	dc05      	bgt.n	80022dc <__swbuf_r+0x4e>
 80022d0:	4621      	mov	r1, r4
 80022d2:	4628      	mov	r0, r5
 80022d4:	f7ff ff64 	bl	80021a0 <_fflush_r>
 80022d8:	2800      	cmp	r0, #0
 80022da:	d1ed      	bne.n	80022b8 <__swbuf_r+0x2a>
 80022dc:	68a3      	ldr	r3, [r4, #8]
 80022de:	3b01      	subs	r3, #1
 80022e0:	60a3      	str	r3, [r4, #8]
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	6022      	str	r2, [r4, #0]
 80022e8:	701e      	strb	r6, [r3, #0]
 80022ea:	6962      	ldr	r2, [r4, #20]
 80022ec:	1c43      	adds	r3, r0, #1
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d004      	beq.n	80022fc <__swbuf_r+0x6e>
 80022f2:	89a3      	ldrh	r3, [r4, #12]
 80022f4:	07db      	lsls	r3, r3, #31
 80022f6:	d5e1      	bpl.n	80022bc <__swbuf_r+0x2e>
 80022f8:	2e0a      	cmp	r6, #10
 80022fa:	d1df      	bne.n	80022bc <__swbuf_r+0x2e>
 80022fc:	4621      	mov	r1, r4
 80022fe:	4628      	mov	r0, r5
 8002300:	f7ff ff4e 	bl	80021a0 <_fflush_r>
 8002304:	2800      	cmp	r0, #0
 8002306:	d0d9      	beq.n	80022bc <__swbuf_r+0x2e>
 8002308:	e7d6      	b.n	80022b8 <__swbuf_r+0x2a>
	...

0800230c <__swsetup_r>:
 800230c:	b538      	push	{r3, r4, r5, lr}
 800230e:	4b29      	ldr	r3, [pc, #164]	@ (80023b4 <__swsetup_r+0xa8>)
 8002310:	4605      	mov	r5, r0
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	460c      	mov	r4, r1
 8002316:	b118      	cbz	r0, 8002320 <__swsetup_r+0x14>
 8002318:	6a03      	ldr	r3, [r0, #32]
 800231a:	b90b      	cbnz	r3, 8002320 <__swsetup_r+0x14>
 800231c:	f7ff fa72 	bl	8001804 <__sinit>
 8002320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002324:	0719      	lsls	r1, r3, #28
 8002326:	d422      	bmi.n	800236e <__swsetup_r+0x62>
 8002328:	06da      	lsls	r2, r3, #27
 800232a:	d407      	bmi.n	800233c <__swsetup_r+0x30>
 800232c:	2209      	movs	r2, #9
 800232e:	602a      	str	r2, [r5, #0]
 8002330:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002334:	81a3      	strh	r3, [r4, #12]
 8002336:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800233a:	e033      	b.n	80023a4 <__swsetup_r+0x98>
 800233c:	0758      	lsls	r0, r3, #29
 800233e:	d512      	bpl.n	8002366 <__swsetup_r+0x5a>
 8002340:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002342:	b141      	cbz	r1, 8002356 <__swsetup_r+0x4a>
 8002344:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002348:	4299      	cmp	r1, r3
 800234a:	d002      	beq.n	8002352 <__swsetup_r+0x46>
 800234c:	4628      	mov	r0, r5
 800234e:	f000 f90d 	bl	800256c <_free_r>
 8002352:	2300      	movs	r3, #0
 8002354:	6363      	str	r3, [r4, #52]	@ 0x34
 8002356:	89a3      	ldrh	r3, [r4, #12]
 8002358:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800235c:	81a3      	strh	r3, [r4, #12]
 800235e:	2300      	movs	r3, #0
 8002360:	6063      	str	r3, [r4, #4]
 8002362:	6923      	ldr	r3, [r4, #16]
 8002364:	6023      	str	r3, [r4, #0]
 8002366:	89a3      	ldrh	r3, [r4, #12]
 8002368:	f043 0308 	orr.w	r3, r3, #8
 800236c:	81a3      	strh	r3, [r4, #12]
 800236e:	6923      	ldr	r3, [r4, #16]
 8002370:	b94b      	cbnz	r3, 8002386 <__swsetup_r+0x7a>
 8002372:	89a3      	ldrh	r3, [r4, #12]
 8002374:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800237c:	d003      	beq.n	8002386 <__swsetup_r+0x7a>
 800237e:	4621      	mov	r1, r4
 8002380:	4628      	mov	r0, r5
 8002382:	f000 f83f 	bl	8002404 <__smakebuf_r>
 8002386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800238a:	f013 0201 	ands.w	r2, r3, #1
 800238e:	d00a      	beq.n	80023a6 <__swsetup_r+0x9a>
 8002390:	2200      	movs	r2, #0
 8002392:	60a2      	str	r2, [r4, #8]
 8002394:	6962      	ldr	r2, [r4, #20]
 8002396:	4252      	negs	r2, r2
 8002398:	61a2      	str	r2, [r4, #24]
 800239a:	6922      	ldr	r2, [r4, #16]
 800239c:	b942      	cbnz	r2, 80023b0 <__swsetup_r+0xa4>
 800239e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80023a2:	d1c5      	bne.n	8002330 <__swsetup_r+0x24>
 80023a4:	bd38      	pop	{r3, r4, r5, pc}
 80023a6:	0799      	lsls	r1, r3, #30
 80023a8:	bf58      	it	pl
 80023aa:	6962      	ldrpl	r2, [r4, #20]
 80023ac:	60a2      	str	r2, [r4, #8]
 80023ae:	e7f4      	b.n	800239a <__swsetup_r+0x8e>
 80023b0:	2000      	movs	r0, #0
 80023b2:	e7f7      	b.n	80023a4 <__swsetup_r+0x98>
 80023b4:	2000002c 	.word	0x2000002c

080023b8 <__swhatbuf_r>:
 80023b8:	b570      	push	{r4, r5, r6, lr}
 80023ba:	460c      	mov	r4, r1
 80023bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023c0:	2900      	cmp	r1, #0
 80023c2:	b096      	sub	sp, #88	@ 0x58
 80023c4:	4615      	mov	r5, r2
 80023c6:	461e      	mov	r6, r3
 80023c8:	da0d      	bge.n	80023e6 <__swhatbuf_r+0x2e>
 80023ca:	89a3      	ldrh	r3, [r4, #12]
 80023cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80023d0:	f04f 0100 	mov.w	r1, #0
 80023d4:	bf14      	ite	ne
 80023d6:	2340      	movne	r3, #64	@ 0x40
 80023d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80023dc:	2000      	movs	r0, #0
 80023de:	6031      	str	r1, [r6, #0]
 80023e0:	602b      	str	r3, [r5, #0]
 80023e2:	b016      	add	sp, #88	@ 0x58
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	466a      	mov	r2, sp
 80023e8:	f000 f8ae 	bl	8002548 <_fstat_r>
 80023ec:	2800      	cmp	r0, #0
 80023ee:	dbec      	blt.n	80023ca <__swhatbuf_r+0x12>
 80023f0:	9901      	ldr	r1, [sp, #4]
 80023f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80023f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80023fa:	4259      	negs	r1, r3
 80023fc:	4159      	adcs	r1, r3
 80023fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002402:	e7eb      	b.n	80023dc <__swhatbuf_r+0x24>

08002404 <__smakebuf_r>:
 8002404:	898b      	ldrh	r3, [r1, #12]
 8002406:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002408:	079d      	lsls	r5, r3, #30
 800240a:	4606      	mov	r6, r0
 800240c:	460c      	mov	r4, r1
 800240e:	d507      	bpl.n	8002420 <__smakebuf_r+0x1c>
 8002410:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002414:	6023      	str	r3, [r4, #0]
 8002416:	6123      	str	r3, [r4, #16]
 8002418:	2301      	movs	r3, #1
 800241a:	6163      	str	r3, [r4, #20]
 800241c:	b003      	add	sp, #12
 800241e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002420:	ab01      	add	r3, sp, #4
 8002422:	466a      	mov	r2, sp
 8002424:	f7ff ffc8 	bl	80023b8 <__swhatbuf_r>
 8002428:	9f00      	ldr	r7, [sp, #0]
 800242a:	4605      	mov	r5, r0
 800242c:	4639      	mov	r1, r7
 800242e:	4630      	mov	r0, r6
 8002430:	f7ff fc26 	bl	8001c80 <_malloc_r>
 8002434:	b948      	cbnz	r0, 800244a <__smakebuf_r+0x46>
 8002436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800243a:	059a      	lsls	r2, r3, #22
 800243c:	d4ee      	bmi.n	800241c <__smakebuf_r+0x18>
 800243e:	f023 0303 	bic.w	r3, r3, #3
 8002442:	f043 0302 	orr.w	r3, r3, #2
 8002446:	81a3      	strh	r3, [r4, #12]
 8002448:	e7e2      	b.n	8002410 <__smakebuf_r+0xc>
 800244a:	89a3      	ldrh	r3, [r4, #12]
 800244c:	6020      	str	r0, [r4, #0]
 800244e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002452:	81a3      	strh	r3, [r4, #12]
 8002454:	9b01      	ldr	r3, [sp, #4]
 8002456:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800245a:	b15b      	cbz	r3, 8002474 <__smakebuf_r+0x70>
 800245c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002460:	4630      	mov	r0, r6
 8002462:	f000 f80b 	bl	800247c <_isatty_r>
 8002466:	b128      	cbz	r0, 8002474 <__smakebuf_r+0x70>
 8002468:	89a3      	ldrh	r3, [r4, #12]
 800246a:	f023 0303 	bic.w	r3, r3, #3
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	81a3      	strh	r3, [r4, #12]
 8002474:	89a3      	ldrh	r3, [r4, #12]
 8002476:	431d      	orrs	r5, r3
 8002478:	81a5      	strh	r5, [r4, #12]
 800247a:	e7cf      	b.n	800241c <__smakebuf_r+0x18>

0800247c <_isatty_r>:
 800247c:	b538      	push	{r3, r4, r5, lr}
 800247e:	4d06      	ldr	r5, [pc, #24]	@ (8002498 <_isatty_r+0x1c>)
 8002480:	2300      	movs	r3, #0
 8002482:	4604      	mov	r4, r0
 8002484:	4608      	mov	r0, r1
 8002486:	602b      	str	r3, [r5, #0]
 8002488:	f7fe f911 	bl	80006ae <_isatty>
 800248c:	1c43      	adds	r3, r0, #1
 800248e:	d102      	bne.n	8002496 <_isatty_r+0x1a>
 8002490:	682b      	ldr	r3, [r5, #0]
 8002492:	b103      	cbz	r3, 8002496 <_isatty_r+0x1a>
 8002494:	6023      	str	r3, [r4, #0]
 8002496:	bd38      	pop	{r3, r4, r5, pc}
 8002498:	20000224 	.word	0x20000224

0800249c <_lseek_r>:
 800249c:	b538      	push	{r3, r4, r5, lr}
 800249e:	4d07      	ldr	r5, [pc, #28]	@ (80024bc <_lseek_r+0x20>)
 80024a0:	4604      	mov	r4, r0
 80024a2:	4608      	mov	r0, r1
 80024a4:	4611      	mov	r1, r2
 80024a6:	2200      	movs	r2, #0
 80024a8:	602a      	str	r2, [r5, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	f7fe f90a 	bl	80006c4 <_lseek>
 80024b0:	1c43      	adds	r3, r0, #1
 80024b2:	d102      	bne.n	80024ba <_lseek_r+0x1e>
 80024b4:	682b      	ldr	r3, [r5, #0]
 80024b6:	b103      	cbz	r3, 80024ba <_lseek_r+0x1e>
 80024b8:	6023      	str	r3, [r4, #0]
 80024ba:	bd38      	pop	{r3, r4, r5, pc}
 80024bc:	20000224 	.word	0x20000224

080024c0 <_read_r>:
 80024c0:	b538      	push	{r3, r4, r5, lr}
 80024c2:	4d07      	ldr	r5, [pc, #28]	@ (80024e0 <_read_r+0x20>)
 80024c4:	4604      	mov	r4, r0
 80024c6:	4608      	mov	r0, r1
 80024c8:	4611      	mov	r1, r2
 80024ca:	2200      	movs	r2, #0
 80024cc:	602a      	str	r2, [r5, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	f7fe f898 	bl	8000604 <_read>
 80024d4:	1c43      	adds	r3, r0, #1
 80024d6:	d102      	bne.n	80024de <_read_r+0x1e>
 80024d8:	682b      	ldr	r3, [r5, #0]
 80024da:	b103      	cbz	r3, 80024de <_read_r+0x1e>
 80024dc:	6023      	str	r3, [r4, #0]
 80024de:	bd38      	pop	{r3, r4, r5, pc}
 80024e0:	20000224 	.word	0x20000224

080024e4 <_sbrk_r>:
 80024e4:	b538      	push	{r3, r4, r5, lr}
 80024e6:	4d06      	ldr	r5, [pc, #24]	@ (8002500 <_sbrk_r+0x1c>)
 80024e8:	2300      	movs	r3, #0
 80024ea:	4604      	mov	r4, r0
 80024ec:	4608      	mov	r0, r1
 80024ee:	602b      	str	r3, [r5, #0]
 80024f0:	f7fe f8f6 	bl	80006e0 <_sbrk>
 80024f4:	1c43      	adds	r3, r0, #1
 80024f6:	d102      	bne.n	80024fe <_sbrk_r+0x1a>
 80024f8:	682b      	ldr	r3, [r5, #0]
 80024fa:	b103      	cbz	r3, 80024fe <_sbrk_r+0x1a>
 80024fc:	6023      	str	r3, [r4, #0]
 80024fe:	bd38      	pop	{r3, r4, r5, pc}
 8002500:	20000224 	.word	0x20000224

08002504 <_write_r>:
 8002504:	b538      	push	{r3, r4, r5, lr}
 8002506:	4d07      	ldr	r5, [pc, #28]	@ (8002524 <_write_r+0x20>)
 8002508:	4604      	mov	r4, r0
 800250a:	4608      	mov	r0, r1
 800250c:	4611      	mov	r1, r2
 800250e:	2200      	movs	r2, #0
 8002510:	602a      	str	r2, [r5, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	f7fe f893 	bl	800063e <_write>
 8002518:	1c43      	adds	r3, r0, #1
 800251a:	d102      	bne.n	8002522 <_write_r+0x1e>
 800251c:	682b      	ldr	r3, [r5, #0]
 800251e:	b103      	cbz	r3, 8002522 <_write_r+0x1e>
 8002520:	6023      	str	r3, [r4, #0]
 8002522:	bd38      	pop	{r3, r4, r5, pc}
 8002524:	20000224 	.word	0x20000224

08002528 <_close_r>:
 8002528:	b538      	push	{r3, r4, r5, lr}
 800252a:	4d06      	ldr	r5, [pc, #24]	@ (8002544 <_close_r+0x1c>)
 800252c:	2300      	movs	r3, #0
 800252e:	4604      	mov	r4, r0
 8002530:	4608      	mov	r0, r1
 8002532:	602b      	str	r3, [r5, #0]
 8002534:	f7fe f89f 	bl	8000676 <_close>
 8002538:	1c43      	adds	r3, r0, #1
 800253a:	d102      	bne.n	8002542 <_close_r+0x1a>
 800253c:	682b      	ldr	r3, [r5, #0]
 800253e:	b103      	cbz	r3, 8002542 <_close_r+0x1a>
 8002540:	6023      	str	r3, [r4, #0]
 8002542:	bd38      	pop	{r3, r4, r5, pc}
 8002544:	20000224 	.word	0x20000224

08002548 <_fstat_r>:
 8002548:	b538      	push	{r3, r4, r5, lr}
 800254a:	4d07      	ldr	r5, [pc, #28]	@ (8002568 <_fstat_r+0x20>)
 800254c:	2300      	movs	r3, #0
 800254e:	4604      	mov	r4, r0
 8002550:	4608      	mov	r0, r1
 8002552:	4611      	mov	r1, r2
 8002554:	602b      	str	r3, [r5, #0]
 8002556:	f7fe f89a 	bl	800068e <_fstat>
 800255a:	1c43      	adds	r3, r0, #1
 800255c:	d102      	bne.n	8002564 <_fstat_r+0x1c>
 800255e:	682b      	ldr	r3, [r5, #0]
 8002560:	b103      	cbz	r3, 8002564 <_fstat_r+0x1c>
 8002562:	6023      	str	r3, [r4, #0]
 8002564:	bd38      	pop	{r3, r4, r5, pc}
 8002566:	bf00      	nop
 8002568:	20000224 	.word	0x20000224

0800256c <_free_r>:
 800256c:	b538      	push	{r3, r4, r5, lr}
 800256e:	4605      	mov	r5, r0
 8002570:	2900      	cmp	r1, #0
 8002572:	d041      	beq.n	80025f8 <_free_r+0x8c>
 8002574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002578:	1f0c      	subs	r4, r1, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	bfb8      	it	lt
 800257e:	18e4      	addlt	r4, r4, r3
 8002580:	f7ff fe36 	bl	80021f0 <__malloc_lock>
 8002584:	4a1d      	ldr	r2, [pc, #116]	@ (80025fc <_free_r+0x90>)
 8002586:	6813      	ldr	r3, [r2, #0]
 8002588:	b933      	cbnz	r3, 8002598 <_free_r+0x2c>
 800258a:	6063      	str	r3, [r4, #4]
 800258c:	6014      	str	r4, [r2, #0]
 800258e:	4628      	mov	r0, r5
 8002590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002594:	f7ff be32 	b.w	80021fc <__malloc_unlock>
 8002598:	42a3      	cmp	r3, r4
 800259a:	d908      	bls.n	80025ae <_free_r+0x42>
 800259c:	6820      	ldr	r0, [r4, #0]
 800259e:	1821      	adds	r1, r4, r0
 80025a0:	428b      	cmp	r3, r1
 80025a2:	bf01      	itttt	eq
 80025a4:	6819      	ldreq	r1, [r3, #0]
 80025a6:	685b      	ldreq	r3, [r3, #4]
 80025a8:	1809      	addeq	r1, r1, r0
 80025aa:	6021      	streq	r1, [r4, #0]
 80025ac:	e7ed      	b.n	800258a <_free_r+0x1e>
 80025ae:	461a      	mov	r2, r3
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	b10b      	cbz	r3, 80025b8 <_free_r+0x4c>
 80025b4:	42a3      	cmp	r3, r4
 80025b6:	d9fa      	bls.n	80025ae <_free_r+0x42>
 80025b8:	6811      	ldr	r1, [r2, #0]
 80025ba:	1850      	adds	r0, r2, r1
 80025bc:	42a0      	cmp	r0, r4
 80025be:	d10b      	bne.n	80025d8 <_free_r+0x6c>
 80025c0:	6820      	ldr	r0, [r4, #0]
 80025c2:	4401      	add	r1, r0
 80025c4:	1850      	adds	r0, r2, r1
 80025c6:	4283      	cmp	r3, r0
 80025c8:	6011      	str	r1, [r2, #0]
 80025ca:	d1e0      	bne.n	800258e <_free_r+0x22>
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	6053      	str	r3, [r2, #4]
 80025d2:	4408      	add	r0, r1
 80025d4:	6010      	str	r0, [r2, #0]
 80025d6:	e7da      	b.n	800258e <_free_r+0x22>
 80025d8:	d902      	bls.n	80025e0 <_free_r+0x74>
 80025da:	230c      	movs	r3, #12
 80025dc:	602b      	str	r3, [r5, #0]
 80025de:	e7d6      	b.n	800258e <_free_r+0x22>
 80025e0:	6820      	ldr	r0, [r4, #0]
 80025e2:	1821      	adds	r1, r4, r0
 80025e4:	428b      	cmp	r3, r1
 80025e6:	bf04      	itt	eq
 80025e8:	6819      	ldreq	r1, [r3, #0]
 80025ea:	685b      	ldreq	r3, [r3, #4]
 80025ec:	6063      	str	r3, [r4, #4]
 80025ee:	bf04      	itt	eq
 80025f0:	1809      	addeq	r1, r1, r0
 80025f2:	6021      	streq	r1, [r4, #0]
 80025f4:	6054      	str	r4, [r2, #4]
 80025f6:	e7ca      	b.n	800258e <_free_r+0x22>
 80025f8:	bd38      	pop	{r3, r4, r5, pc}
 80025fa:	bf00      	nop
 80025fc:	20000220 	.word	0x20000220

08002600 <_init>:
 8002600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002602:	bf00      	nop
 8002604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002606:	bc08      	pop	{r3}
 8002608:	469e      	mov	lr, r3
 800260a:	4770      	bx	lr

0800260c <_fini>:
 800260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260e:	bf00      	nop
 8002610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002612:	bc08      	pop	{r3}
 8002614:	469e      	mov	lr, r3
 8002616:	4770      	bx	lr
