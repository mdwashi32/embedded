
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002074  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002204  08002204  00003204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002248  08002248  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002248  08002248  00003248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002250  08002250  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002250  08002250  00003250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002254  08002254  00003254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002258  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000405c  2**0
                  CONTENTS
 10 .bss          00000388  2000005c  2000005c  0000405c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003e4  200003e4  0000405c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001e7f  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007a3  00000000  00000000  00005f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000280  00000000  00000000  000066b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001ce  00000000  00000000  00006930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000376d  00000000  00000000  00006afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000029e7  00000000  00000000  0000a26b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c4a6  00000000  00000000  0000cc52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000190f8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000010fc  00000000  00000000  0001913c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  0001a238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080021ec 	.word	0x080021ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080021ec 	.word	0x080021ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000276:	4b14      	ldr	r3, [pc, #80]	@ (80002c8 <SPI2_GPIOInits+0x58>)
 8000278:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800027a:	2302      	movs	r3, #2
 800027c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800027e:	2305      	movs	r3, #5
 8000280:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000282:	2300      	movs	r3, #0
 8000284:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000286:	2300      	movs	r3, #0
 8000288:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800028a:	2302      	movs	r3, #2
 800028c:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800028e:	230d      	movs	r3, #13
 8000290:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	4618      	mov	r0, r3
 8000296:	f000 faf3 	bl	8000880 <GPIO_Init>

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800029a:	230f      	movs	r3, #15
 800029c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 faed 	bl	8000880 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80002a6:	230e      	movs	r3, #14
 80002a8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 fae7 	bl	8000880 <GPIO_Init>


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002b2:	230c      	movs	r3, #12
 80002b4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 fae1 	bl	8000880 <GPIO_Init>


}
 80002be:	bf00      	nop
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40020400 	.word	0x40020400

080002cc <SPI2_Inits>:

void SPI2_Inits(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	SPI2handle.pSPIx = SPI2;
 80002d0:	4b0e      	ldr	r3, [pc, #56]	@ (800030c <SPI2_Inits+0x40>)
 80002d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000310 <SPI2_Inits+0x44>)
 80002d4:	601a      	str	r2, [r3, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80002d6:	4b0d      	ldr	r3, [pc, #52]	@ (800030c <SPI2_Inits+0x40>)
 80002d8:	2201      	movs	r2, #1
 80002da:	715a      	strb	r2, [r3, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002dc:	4b0b      	ldr	r3, [pc, #44]	@ (800030c <SPI2_Inits+0x40>)
 80002de:	2201      	movs	r2, #1
 80002e0:	711a      	strb	r2, [r3, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 80002e2:	4b0a      	ldr	r3, [pc, #40]	@ (800030c <SPI2_Inits+0x40>)
 80002e4:	2204      	movs	r2, #4
 80002e6:	719a      	strb	r2, [r3, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_BITS8;
 80002e8:	4b08      	ldr	r3, [pc, #32]	@ (800030c <SPI2_Inits+0x40>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	71da      	strb	r2, [r3, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002ee:	4b07      	ldr	r3, [pc, #28]	@ (800030c <SPI2_Inits+0x40>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	721a      	strb	r2, [r3, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002f4:	4b05      	ldr	r3, [pc, #20]	@ (800030c <SPI2_Inits+0x40>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	725a      	strb	r2, [r3, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 80002fa:	4b04      	ldr	r3, [pc, #16]	@ (800030c <SPI2_Inits+0x40>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2handle);
 8000300:	4802      	ldr	r0, [pc, #8]	@ (800030c <SPI2_Inits+0x40>)
 8000302:	f000 fda7 	bl	8000e54 <SPI_Init>
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000078 	.word	0x20000078
 8000310:	40003800 	.word	0x40003800

08000314 <Slave_GPIO_InterruptPinInit>:


/* Configure GPIO Pin for SPI peripheral data available interrupt */
void Slave_GPIO_InterruptPinInit(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
	GPIO_Handle_t spiIntPin;
	memset(&spiIntPin,0,sizeof(spiIntPin));
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	220c      	movs	r2, #12
 800031e:	2100      	movs	r1, #0
 8000320:	4618      	mov	r0, r3
 8000322:	f001 f90b 	bl	800153c <memset>

	// LED GPIO configuration
	spiIntPin.pGPIOx = GPIOD;
 8000326:	4b0d      	ldr	r3, [pc, #52]	@ (800035c <Slave_GPIO_InterruptPinInit+0x48>)
 8000328:	607b      	str	r3, [r7, #4]
	spiIntPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800032a:	2306      	movs	r3, #6
 800032c:	723b      	strb	r3, [r7, #8]
	spiIntPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800032e:	2304      	movs	r3, #4
 8000330:	727b      	strb	r3, [r7, #9]
	spiIntPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000332:	2300      	movs	r3, #0
 8000334:	72bb      	strb	r3, [r7, #10]
	spiIntPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000336:	2301      	movs	r3, #1
 8000338:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&spiIntPin);
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	4618      	mov	r0, r3
 800033e:	f000 fa9f 	bl	8000880 <GPIO_Init>

	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5,NVIC_IRQ_PRIO15);
 8000342:	210f      	movs	r1, #15
 8000344:	2017      	movs	r0, #23
 8000346:	f000 fccb 	bl	8000ce0 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 800034a:	2101      	movs	r1, #1
 800034c:	2017      	movs	r0, #23
 800034e:	f000 fc41 	bl	8000bd4 <GPIO_IRQInterruptConfig>

}
 8000352:	bf00      	nop
 8000354:	3710      	adds	r7, #16
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40020c00 	.word	0x40020c00

08000360 <main>:


int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0

	uint8_t dummy = 0xFF;
 8000366:	23ff      	movs	r3, #255	@ 0xff
 8000368:	71fb      	strb	r3, [r7, #7]

	Slave_GPIO_InterruptPinInit();
 800036a:	f7ff ffd3 	bl	8000314 <Slave_GPIO_InterruptPinInit>

	// Initialize the GPIO pins as SPI2 pins
	SPI2_GPIOInits();
 800036e:	f7ff ff7f 	bl	8000270 <SPI2_GPIOInits>

	// Initialize SPI2 peripheral parameters
	SPI2_Inits();
 8000372:	f7ff ffab 	bl	80002cc <SPI2_Inits>
	* Setting SSOE to 1 => NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOE_Config(SPI2,ENABLE);
 8000376:	2101      	movs	r1, #1
 8000378:	4824      	ldr	r0, [pc, #144]	@ (800040c <main+0xac>)
 800037a:	f000 fed2 	bl	8001122 <SPI_SSOE_Config>

	SPI_IRQInterruptConfig(IRQ_NO_SPI2,ENABLE);
 800037e:	2101      	movs	r1, #1
 8000380:	202b      	movs	r0, #43	@ 0x2b
 8000382:	f000 fddf 	bl	8000f44 <SPI_IRQInterruptConfig>

	while(1){

		rcvStop = 0;
 8000386:	4b22      	ldr	r3, [pc, #136]	@ (8000410 <main+0xb0>)
 8000388:	2200      	movs	r2, #0
 800038a:	701a      	strb	r2, [r3, #0]

		while(!dataAvailable); //wait until data available interrupt from transmitter device(slave)
 800038c:	bf00      	nop
 800038e:	4b21      	ldr	r3, [pc, #132]	@ (8000414 <main+0xb4>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	b2db      	uxtb	r3, r3
 8000394:	2b00      	cmp	r3, #0
 8000396:	d0fa      	beq.n	800038e <main+0x2e>

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,DISABLE);
 8000398:	2100      	movs	r1, #0
 800039a:	2017      	movs	r0, #23
 800039c:	f000 fc1a 	bl	8000bd4 <GPIO_IRQInterruptConfig>

		// Enable SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 80003a0:	2101      	movs	r1, #1
 80003a2:	481a      	ldr	r0, [pc, #104]	@ (800040c <main+0xac>)
 80003a4:	f000 fea1 	bl	80010ea <SPI_PeripheralControl>


		while(!rcvStop)
 80003a8:	e012      	b.n	80003d0 <main+0x70>
		{
			/* fetch the data from the SPI peripheral byte by byte in interrupt mode */
			while (SPI_SendDataIT(&SPI2handle,&dummy,1) == SPI_BUSY_IN_TX);
 80003aa:	bf00      	nop
 80003ac:	1dfb      	adds	r3, r7, #7
 80003ae:	2201      	movs	r2, #1
 80003b0:	4619      	mov	r1, r3
 80003b2:	4819      	ldr	r0, [pc, #100]	@ (8000418 <main+0xb8>)
 80003b4:	f000 fed1 	bl	800115a <SPI_SendDataIT>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b02      	cmp	r3, #2
 80003bc:	d0f6      	beq.n	80003ac <main+0x4c>
			while (SPI_ReceiveDataIT(&SPI2handle,&ReadByte,1) == SPI_BUSY_IN_RX);
 80003be:	bf00      	nop
 80003c0:	2201      	movs	r2, #1
 80003c2:	4916      	ldr	r1, [pc, #88]	@ (800041c <main+0xbc>)
 80003c4:	4814      	ldr	r0, [pc, #80]	@ (8000418 <main+0xb8>)
 80003c6:	f000 feec 	bl	80011a2 <SPI_ReceiveDataIT>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d0f7      	beq.n	80003c0 <main+0x60>
		while(!rcvStop)
 80003d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000410 <main+0xb0>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d0e7      	beq.n	80003aa <main+0x4a>
		}


		// confirm SPI is not busy
		while(SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 80003da:	bf00      	nop
 80003dc:	2180      	movs	r1, #128	@ 0x80
 80003de:	480b      	ldr	r0, [pc, #44]	@ (800040c <main+0xac>)
 80003e0:	f000 fd9c 	bl	8000f1c <SPI_GetFlagStatus>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d1f8      	bne.n	80003dc <main+0x7c>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 80003ea:	2100      	movs	r1, #0
 80003ec:	4807      	ldr	r0, [pc, #28]	@ (800040c <main+0xac>)
 80003ee:	f000 fe7c 	bl	80010ea <SPI_PeripheralControl>

		printf("Rcvd data = %s\n",RcvBuff);
 80003f2:	490b      	ldr	r1, [pc, #44]	@ (8000420 <main+0xc0>)
 80003f4:	480b      	ldr	r0, [pc, #44]	@ (8000424 <main+0xc4>)
 80003f6:	f001 f88f 	bl	8001518 <iprintf>

		dataAvailable = 0;
 80003fa:	4b06      	ldr	r3, [pc, #24]	@ (8000414 <main+0xb4>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	701a      	strb	r2, [r3, #0]

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 8000400:	2101      	movs	r1, #1
 8000402:	2017      	movs	r0, #23
 8000404:	f000 fbe6 	bl	8000bd4 <GPIO_IRQInterruptConfig>
		rcvStop = 0;
 8000408:	e7bd      	b.n	8000386 <main+0x26>
 800040a:	bf00      	nop
 800040c:	40003800 	.word	0x40003800
 8000410:	2000028d 	.word	0x2000028d
 8000414:	2000028e 	.word	0x2000028e
 8000418:	20000078 	.word	0x20000078
 800041c:	2000028c 	.word	0x2000028c
 8000420:	20000098 	.word	0x20000098
 8000424:	08002204 	.word	0x08002204

08000428 <SPI2_IRQHandler>:

}

/* Runs when a data byte is received from the peripheral over SPI*/
void SPI2_IRQHandler(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0

	SPI_IRQHandling(&SPI2handle);
 800042c:	4802      	ldr	r0, [pc, #8]	@ (8000438 <SPI2_IRQHandler+0x10>)
 800042e:	f000 fe0f 	bl	8001050 <SPI_IRQHandling>
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000078 	.word	0x20000078

0800043c <SPI_ApplicationEventCallback>:



void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	460b      	mov	r3, r1
 8000446:	70fb      	strb	r3, [r7, #3]
	static uint32_t i = 0;
	/* In the RX complete event , copy data into RCV buffer . '\0' indicates end of message(rcvStop = 1) */
	if(AppEv == SPI_EVENT_RX_CMPLT)
 8000448:	78fb      	ldrb	r3, [r7, #3]
 800044a:	2b02      	cmp	r3, #2
 800044c:	d11f      	bne.n	800048e <SPI_ApplicationEventCallback+0x52>
	{
				RcvBuff[i++] = ReadByte;
 800044e:	4b13      	ldr	r3, [pc, #76]	@ (800049c <SPI_ApplicationEventCallback+0x60>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	1c5a      	adds	r2, r3, #1
 8000454:	4911      	ldr	r1, [pc, #68]	@ (800049c <SPI_ApplicationEventCallback+0x60>)
 8000456:	600a      	str	r2, [r1, #0]
 8000458:	4a11      	ldr	r2, [pc, #68]	@ (80004a0 <SPI_ApplicationEventCallback+0x64>)
 800045a:	7812      	ldrb	r2, [r2, #0]
 800045c:	b2d1      	uxtb	r1, r2
 800045e:	4a11      	ldr	r2, [pc, #68]	@ (80004a4 <SPI_ApplicationEventCallback+0x68>)
 8000460:	54d1      	strb	r1, [r2, r3]
				if(ReadByte == '\0' || ( i == MAX_LEN)){
 8000462:	4b0f      	ldr	r3, [pc, #60]	@ (80004a0 <SPI_ApplicationEventCallback+0x64>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	b2db      	uxtb	r3, r3
 8000468:	2b00      	cmp	r3, #0
 800046a:	d004      	beq.n	8000476 <SPI_ApplicationEventCallback+0x3a>
 800046c:	4b0b      	ldr	r3, [pc, #44]	@ (800049c <SPI_ApplicationEventCallback+0x60>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000474:	d10b      	bne.n	800048e <SPI_ApplicationEventCallback+0x52>
					rcvStop = 1;
 8000476:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <SPI_ApplicationEventCallback+0x6c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
					RcvBuff[i-1] = '\0';
 800047c:	4b07      	ldr	r3, [pc, #28]	@ (800049c <SPI_ApplicationEventCallback+0x60>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	3b01      	subs	r3, #1
 8000482:	4a08      	ldr	r2, [pc, #32]	@ (80004a4 <SPI_ApplicationEventCallback+0x68>)
 8000484:	2100      	movs	r1, #0
 8000486:	54d1      	strb	r1, [r2, r3]
					i = 0;
 8000488:	4b04      	ldr	r3, [pc, #16]	@ (800049c <SPI_ApplicationEventCallback+0x60>)
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
				}
	}

}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	20000290 	.word	0x20000290
 80004a0:	2000028c 	.word	0x2000028c
 80004a4:	20000098 	.word	0x20000098
 80004a8:	2000028d 	.word	0x2000028d

080004ac <EXTI9_5_IRQHandler>:

/* Slave data available interrupt handler */
void EXTI9_5_IRQHandler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_6);
 80004b0:	2006      	movs	r0, #6
 80004b2:	f000 fc3f 	bl	8000d34 <GPIO_IRQHandling>
	dataAvailable = 1;
 80004b6:	4b02      	ldr	r3, [pc, #8]	@ (80004c0 <EXTI9_5_IRQHandler+0x14>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	701a      	strb	r2, [r3, #0]
}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	2000028e 	.word	0x2000028e

080004c4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004ce:	4b0f      	ldr	r3, [pc, #60]	@ (800050c <ITM_SendChar+0x48>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a0e      	ldr	r2, [pc, #56]	@ (800050c <ITM_SendChar+0x48>)
 80004d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004d8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004da:	4b0d      	ldr	r3, [pc, #52]	@ (8000510 <ITM_SendChar+0x4c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a0c      	ldr	r2, [pc, #48]	@ (8000510 <ITM_SendChar+0x4c>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004e6:	bf00      	nop
 80004e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d0f8      	beq.n	80004e8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004f6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	6013      	str	r3, [r2, #0]
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	e000edfc 	.word	0xe000edfc
 8000510:	e0000e00 	.word	0xe0000e00

08000514 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	e00a      	b.n	800053c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000526:	f3af 8000 	nop.w
 800052a:	4601      	mov	r1, r0
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	1c5a      	adds	r2, r3, #1
 8000530:	60ba      	str	r2, [r7, #8]
 8000532:	b2ca      	uxtb	r2, r1
 8000534:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	3301      	adds	r3, #1
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	429a      	cmp	r2, r3
 8000542:	dbf0      	blt.n	8000526 <_read+0x12>
  }

  return len;
 8000544:	687b      	ldr	r3, [r7, #4]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3718      	adds	r7, #24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b086      	sub	sp, #24
 8000552:	af00      	add	r7, sp, #0
 8000554:	60f8      	str	r0, [r7, #12]
 8000556:	60b9      	str	r1, [r7, #8]
 8000558:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
 800055e:	e009      	b.n	8000574 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	60ba      	str	r2, [r7, #8]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff ffab 	bl	80004c4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	3301      	adds	r3, #1
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	429a      	cmp	r2, r3
 800057a:	dbf1      	blt.n	8000560 <_write+0x12>
  }
  return len;
 800057c:	687b      	ldr	r3, [r7, #4]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3718      	adds	r7, #24
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <_close>:

int _close(int file)
{
 8000586:	b480      	push	{r7}
 8000588:	b083      	sub	sp, #12
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800058e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
 80005a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005ae:	605a      	str	r2, [r3, #4]
  return 0;
 80005b0:	2300      	movs	r3, #0
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <_isatty>:

int _isatty(int file)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005c6:	2301      	movs	r3, #1
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005e0:	2300      	movs	r3, #0
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f8:	4a14      	ldr	r2, [pc, #80]	@ (800064c <_sbrk+0x5c>)
 80005fa:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <_sbrk+0x60>)
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000604:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <_sbrk+0x64>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d102      	bne.n	8000612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800060c:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <_sbrk+0x64>)
 800060e:	4a12      	ldr	r2, [pc, #72]	@ (8000658 <_sbrk+0x68>)
 8000610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000612:	4b10      	ldr	r3, [pc, #64]	@ (8000654 <_sbrk+0x64>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	693a      	ldr	r2, [r7, #16]
 800061c:	429a      	cmp	r2, r3
 800061e:	d207      	bcs.n	8000630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000620:	f000 ff94 	bl	800154c <__errno>
 8000624:	4603      	mov	r3, r0
 8000626:	220c      	movs	r2, #12
 8000628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800062a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800062e:	e009      	b.n	8000644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <_sbrk+0x64>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000636:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <_sbrk+0x64>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	4a05      	ldr	r2, [pc, #20]	@ (8000654 <_sbrk+0x64>)
 8000640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000642:	68fb      	ldr	r3, [r7, #12]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20020000 	.word	0x20020000
 8000650:	00000400 	.word	0x00000400
 8000654:	20000294 	.word	0x20000294
 8000658:	200003e8 	.word	0x200003e8

0800065c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800065c:	480d      	ldr	r0, [pc, #52]	@ (8000694 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800065e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000660:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000664:	480c      	ldr	r0, [pc, #48]	@ (8000698 <LoopForever+0x6>)
  ldr r1, =_edata
 8000666:	490d      	ldr	r1, [pc, #52]	@ (800069c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000668:	4a0d      	ldr	r2, [pc, #52]	@ (80006a0 <LoopForever+0xe>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800066c:	e002      	b.n	8000674 <LoopCopyDataInit>

0800066e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000672:	3304      	adds	r3, #4

08000674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000678:	d3f9      	bcc.n	800066e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067a:	4a0a      	ldr	r2, [pc, #40]	@ (80006a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800067c:	4c0a      	ldr	r4, [pc, #40]	@ (80006a8 <LoopForever+0x16>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000680:	e001      	b.n	8000686 <LoopFillZerobss>

08000682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000684:	3204      	adds	r2, #4

08000686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000688:	d3fb      	bcc.n	8000682 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800068a:	f000 ff65 	bl	8001558 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068e:	f7ff fe67 	bl	8000360 <main>

08000692 <LoopForever>:

LoopForever:
  b LoopForever
 8000692:	e7fe      	b.n	8000692 <LoopForever>
  ldr   r0, =_estack
 8000694:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800069c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006a0:	08002258 	.word	0x08002258
  ldr r2, =_sbss
 80006a4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006a8:	200003e4 	.word	0x200003e4

080006ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ac:	e7fe      	b.n	80006ac <ADC_IRQHandler>
	...

080006b0 <GPIO_PeriClockControl>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d162      	bne.n	8000788 <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a64      	ldr	r2, [pc, #400]	@ (8000858 <GPIO_PeriClockControl+0x1a8>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d106      	bne.n	80006d8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80006ca:	4b64      	ldr	r3, [pc, #400]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a63      	ldr	r2, [pc, #396]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 80006d6:	e0b9      	b.n	800084c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a61      	ldr	r2, [pc, #388]	@ (8000860 <GPIO_PeriClockControl+0x1b0>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d106      	bne.n	80006ee <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80006e0:	4b5e      	ldr	r3, [pc, #376]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 80006e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e4:	4a5d      	ldr	r2, [pc, #372]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 80006e6:	f043 0302 	orr.w	r3, r3, #2
 80006ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006ec:	e0ae      	b.n	800084c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4a5c      	ldr	r2, [pc, #368]	@ (8000864 <GPIO_PeriClockControl+0x1b4>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d106      	bne.n	8000704 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80006f6:	4b59      	ldr	r3, [pc, #356]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a58      	ldr	r2, [pc, #352]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000702:	e0a3      	b.n	800084c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a58      	ldr	r2, [pc, #352]	@ (8000868 <GPIO_PeriClockControl+0x1b8>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d106      	bne.n	800071a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800070c:	4b53      	ldr	r3, [pc, #332]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000710:	4a52      	ldr	r2, [pc, #328]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 8000712:	f043 0308 	orr.w	r3, r3, #8
 8000716:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000718:	e098      	b.n	800084c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a53      	ldr	r2, [pc, #332]	@ (800086c <GPIO_PeriClockControl+0x1bc>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d106      	bne.n	8000730 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000722:	4b4e      	ldr	r3, [pc, #312]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a4d      	ldr	r2, [pc, #308]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 8000728:	f043 0310 	orr.w	r3, r3, #16
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800072e:	e08d      	b.n	800084c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4a4f      	ldr	r2, [pc, #316]	@ (8000870 <GPIO_PeriClockControl+0x1c0>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d106      	bne.n	8000746 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000738:	4b48      	ldr	r3, [pc, #288]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 800073a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073c:	4a47      	ldr	r2, [pc, #284]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 800073e:	f043 0320 	orr.w	r3, r3, #32
 8000742:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000744:	e082      	b.n	800084c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4a4a      	ldr	r2, [pc, #296]	@ (8000874 <GPIO_PeriClockControl+0x1c4>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d106      	bne.n	800075c <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800074e:	4b43      	ldr	r3, [pc, #268]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a42      	ldr	r2, [pc, #264]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 8000754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800075a:	e077      	b.n	800084c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4a46      	ldr	r2, [pc, #280]	@ (8000878 <GPIO_PeriClockControl+0x1c8>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d106      	bne.n	8000772 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000764:	4b3d      	ldr	r3, [pc, #244]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000768:	4a3c      	ldr	r2, [pc, #240]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 800076a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800076e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000770:	e06c      	b.n	800084c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4a41      	ldr	r2, [pc, #260]	@ (800087c <GPIO_PeriClockControl+0x1cc>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d168      	bne.n	800084c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800077a:	4b38      	ldr	r3, [pc, #224]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a37      	ldr	r2, [pc, #220]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 8000780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000786:	e061      	b.n	800084c <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a33      	ldr	r2, [pc, #204]	@ (8000858 <GPIO_PeriClockControl+0x1a8>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d106      	bne.n	800079e <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000790:	4b32      	ldr	r3, [pc, #200]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000794:	4a31      	ldr	r2, [pc, #196]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 8000796:	f023 0301 	bic.w	r3, r3, #1
 800079a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800079c:	e056      	b.n	800084c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a2f      	ldr	r2, [pc, #188]	@ (8000860 <GPIO_PeriClockControl+0x1b0>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d106      	bne.n	80007b4 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80007a6:	4b2d      	ldr	r3, [pc, #180]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a2c      	ldr	r2, [pc, #176]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 80007ac:	f023 0302 	bic.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007b2:	e04b      	b.n	800084c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a2b      	ldr	r2, [pc, #172]	@ (8000864 <GPIO_PeriClockControl+0x1b4>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d106      	bne.n	80007ca <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80007bc:	4b27      	ldr	r3, [pc, #156]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c0:	4a26      	ldr	r2, [pc, #152]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 80007c2:	f023 0304 	bic.w	r3, r3, #4
 80007c6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007c8:	e040      	b.n	800084c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a26      	ldr	r2, [pc, #152]	@ (8000868 <GPIO_PeriClockControl+0x1b8>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d106      	bne.n	80007e0 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80007d2:	4b22      	ldr	r3, [pc, #136]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a21      	ldr	r2, [pc, #132]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 80007d8:	f023 0308 	bic.w	r3, r3, #8
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007de:	e035      	b.n	800084c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a22      	ldr	r2, [pc, #136]	@ (800086c <GPIO_PeriClockControl+0x1bc>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d106      	bne.n	80007f6 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 80007e8:	4b1c      	ldr	r3, [pc, #112]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 80007ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ec:	4a1b      	ldr	r2, [pc, #108]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 80007ee:	f023 0310 	bic.w	r3, r3, #16
 80007f2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007f4:	e02a      	b.n	800084c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000870 <GPIO_PeriClockControl+0x1c0>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d106      	bne.n	800080c <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80007fe:	4b17      	ldr	r3, [pc, #92]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a16      	ldr	r2, [pc, #88]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 8000804:	f023 0320 	bic.w	r3, r3, #32
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800080a:	e01f      	b.n	800084c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a19      	ldr	r2, [pc, #100]	@ (8000874 <GPIO_PeriClockControl+0x1c4>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d106      	bne.n	8000822 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000814:	4b11      	ldr	r3, [pc, #68]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 8000816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000818:	4a10      	ldr	r2, [pc, #64]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 800081a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800081e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000820:	e014      	b.n	800084c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a14      	ldr	r2, [pc, #80]	@ (8000878 <GPIO_PeriClockControl+0x1c8>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d106      	bne.n	8000838 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800082a:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a0b      	ldr	r2, [pc, #44]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 8000830:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000836:	e009      	b.n	800084c <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a10      	ldr	r2, [pc, #64]	@ (800087c <GPIO_PeriClockControl+0x1cc>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d105      	bne.n	800084c <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000844:	4a05      	ldr	r2, [pc, #20]	@ (800085c <GPIO_PeriClockControl+0x1ac>)
 8000846:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800084a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	40020000 	.word	0x40020000
 800085c:	40023800 	.word	0x40023800
 8000860:	40020400 	.word	0x40020400
 8000864:	40020800 	.word	0x40020800
 8000868:	40020c00 	.word	0x40020c00
 800086c:	40021000 	.word	0x40021000
 8000870:	40021400 	.word	0x40021400
 8000874:	40021800 	.word	0x40021800
 8000878:	40021c00 	.word	0x40021c00
 800087c:	40022000 	.word	0x40022000

08000880 <GPIO_Init>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0; // temporary register
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2101      	movs	r1, #1
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ff0c 	bl	80006b0 <GPIO_PeriClockControl>


	// 1. Configure mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	795b      	ldrb	r3, [r3, #5]
 800089c:	2b03      	cmp	r3, #3
 800089e:	d820      	bhi.n	80008e2 <GPIO_Init+0x62>
	{
		//Non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	795b      	ldrb	r3, [r3, #5]
 80008a4:	461a      	mov	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clear
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	791b      	ldrb	r3, [r3, #4]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	2103      	movs	r1, #3
 80008c0:	fa01 f303 	lsl.w	r3, r1, r3
 80008c4:	43db      	mvns	r3, r3
 80008c6:	4619      	mov	r1, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	400a      	ands	r2, r1
 80008ce:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //set
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	6819      	ldr	r1, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	697a      	ldr	r2, [r7, #20]
 80008dc:	430a      	orrs	r2, r1
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	e0d2      	b.n	8000a88 <GPIO_Init+0x208>
	}
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	795b      	ldrb	r3, [r3, #5]
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	d117      	bne.n	800091a <GPIO_Init+0x9a>
		{
			//1. Configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008ea:	4b4b      	ldr	r3, [pc, #300]	@ (8000a18 <GPIO_Init+0x198>)
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	7912      	ldrb	r2, [r2, #4]
 80008f2:	4611      	mov	r1, r2
 80008f4:	2201      	movs	r2, #1
 80008f6:	408a      	lsls	r2, r1
 80008f8:	4611      	mov	r1, r2
 80008fa:	4a47      	ldr	r2, [pc, #284]	@ (8000a18 <GPIO_Init+0x198>)
 80008fc:	430b      	orrs	r3, r1
 80008fe:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000900:	4b45      	ldr	r3, [pc, #276]	@ (8000a18 <GPIO_Init+0x198>)
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	7912      	ldrb	r2, [r2, #4]
 8000908:	4611      	mov	r1, r2
 800090a:	2201      	movs	r2, #1
 800090c:	408a      	lsls	r2, r1
 800090e:	43d2      	mvns	r2, r2
 8000910:	4611      	mov	r1, r2
 8000912:	4a41      	ldr	r2, [pc, #260]	@ (8000a18 <GPIO_Init+0x198>)
 8000914:	400b      	ands	r3, r1
 8000916:	6093      	str	r3, [r2, #8]
 8000918:	e035      	b.n	8000986 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	795b      	ldrb	r3, [r3, #5]
 800091e:	2b05      	cmp	r3, #5
 8000920:	d117      	bne.n	8000952 <GPIO_Init+0xd2>
		{
			//1. Configure RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000922:	4b3d      	ldr	r3, [pc, #244]	@ (8000a18 <GPIO_Init+0x198>)
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	7912      	ldrb	r2, [r2, #4]
 800092a:	4611      	mov	r1, r2
 800092c:	2201      	movs	r2, #1
 800092e:	408a      	lsls	r2, r1
 8000930:	4611      	mov	r1, r2
 8000932:	4a39      	ldr	r2, [pc, #228]	@ (8000a18 <GPIO_Init+0x198>)
 8000934:	430b      	orrs	r3, r1
 8000936:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000938:	4b37      	ldr	r3, [pc, #220]	@ (8000a18 <GPIO_Init+0x198>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	7912      	ldrb	r2, [r2, #4]
 8000940:	4611      	mov	r1, r2
 8000942:	2201      	movs	r2, #1
 8000944:	408a      	lsls	r2, r1
 8000946:	43d2      	mvns	r2, r2
 8000948:	4611      	mov	r1, r2
 800094a:	4a33      	ldr	r2, [pc, #204]	@ (8000a18 <GPIO_Init+0x198>)
 800094c:	400b      	ands	r3, r1
 800094e:	60d3      	str	r3, [r2, #12]
 8000950:	e019      	b.n	8000986 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	795b      	ldrb	r3, [r3, #5]
 8000956:	2b06      	cmp	r3, #6
 8000958:	d115      	bne.n	8000986 <GPIO_Init+0x106>
		{
			//1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800095a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a18 <GPIO_Init+0x198>)
 800095c:	68db      	ldr	r3, [r3, #12]
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	7912      	ldrb	r2, [r2, #4]
 8000962:	4611      	mov	r1, r2
 8000964:	2201      	movs	r2, #1
 8000966:	408a      	lsls	r2, r1
 8000968:	4611      	mov	r1, r2
 800096a:	4a2b      	ldr	r2, [pc, #172]	@ (8000a18 <GPIO_Init+0x198>)
 800096c:	430b      	orrs	r3, r1
 800096e:	60d3      	str	r3, [r2, #12]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000970:	4b29      	ldr	r3, [pc, #164]	@ (8000a18 <GPIO_Init+0x198>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	7912      	ldrb	r2, [r2, #4]
 8000978:	4611      	mov	r1, r2
 800097a:	2201      	movs	r2, #1
 800097c:	408a      	lsls	r2, r1
 800097e:	4611      	mov	r1, r2
 8000980:	4a25      	ldr	r2, [pc, #148]	@ (8000a18 <GPIO_Init+0x198>)
 8000982:	430b      	orrs	r3, r1
 8000984:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	791b      	ldrb	r3, [r3, #4]
 800098a:	089b      	lsrs	r3, r3, #2
 800098c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	791b      	ldrb	r3, [r3, #4]
 8000992:	f003 0303 	and.w	r3, r3, #3
 8000996:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a1f      	ldr	r2, [pc, #124]	@ (8000a1c <GPIO_Init+0x19c>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d04e      	beq.n	8000a40 <GPIO_Init+0x1c0>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000a20 <GPIO_Init+0x1a0>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d032      	beq.n	8000a12 <GPIO_Init+0x192>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a1c      	ldr	r2, [pc, #112]	@ (8000a24 <GPIO_Init+0x1a4>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d02b      	beq.n	8000a0e <GPIO_Init+0x18e>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a1b      	ldr	r2, [pc, #108]	@ (8000a28 <GPIO_Init+0x1a8>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d024      	beq.n	8000a0a <GPIO_Init+0x18a>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a19      	ldr	r2, [pc, #100]	@ (8000a2c <GPIO_Init+0x1ac>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d01d      	beq.n	8000a06 <GPIO_Init+0x186>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a18      	ldr	r2, [pc, #96]	@ (8000a30 <GPIO_Init+0x1b0>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d016      	beq.n	8000a02 <GPIO_Init+0x182>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a16      	ldr	r2, [pc, #88]	@ (8000a34 <GPIO_Init+0x1b4>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d00f      	beq.n	80009fe <GPIO_Init+0x17e>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a15      	ldr	r2, [pc, #84]	@ (8000a38 <GPIO_Init+0x1b8>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d008      	beq.n	80009fa <GPIO_Init+0x17a>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a13      	ldr	r2, [pc, #76]	@ (8000a3c <GPIO_Init+0x1bc>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d101      	bne.n	80009f6 <GPIO_Init+0x176>
 80009f2:	2308      	movs	r3, #8
 80009f4:	e025      	b.n	8000a42 <GPIO_Init+0x1c2>
 80009f6:	2300      	movs	r3, #0
 80009f8:	e023      	b.n	8000a42 <GPIO_Init+0x1c2>
 80009fa:	2307      	movs	r3, #7
 80009fc:	e021      	b.n	8000a42 <GPIO_Init+0x1c2>
 80009fe:	2306      	movs	r3, #6
 8000a00:	e01f      	b.n	8000a42 <GPIO_Init+0x1c2>
 8000a02:	2305      	movs	r3, #5
 8000a04:	e01d      	b.n	8000a42 <GPIO_Init+0x1c2>
 8000a06:	2304      	movs	r3, #4
 8000a08:	e01b      	b.n	8000a42 <GPIO_Init+0x1c2>
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	e019      	b.n	8000a42 <GPIO_Init+0x1c2>
 8000a0e:	2302      	movs	r3, #2
 8000a10:	e017      	b.n	8000a42 <GPIO_Init+0x1c2>
 8000a12:	2301      	movs	r3, #1
 8000a14:	e015      	b.n	8000a42 <GPIO_Init+0x1c2>
 8000a16:	bf00      	nop
 8000a18:	40013c00 	.word	0x40013c00
 8000a1c:	40020000 	.word	0x40020000
 8000a20:	40020400 	.word	0x40020400
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40020c00 	.word	0x40020c00
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40021400 	.word	0x40021400
 8000a34:	40021800 	.word	0x40021800
 8000a38:	40021c00 	.word	0x40021c00
 8000a3c:	40022000 	.word	0x40022000
 8000a40:	2300      	movs	r3, #0
 8000a42:	747b      	strb	r3, [r7, #17]

		SYSCFG_PCLK_EN();
 8000a44:	4b60      	ldr	r3, [pc, #384]	@ (8000bc8 <GPIO_Init+0x348>)
 8000a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a48:	4a5f      	ldr	r2, [pc, #380]	@ (8000bc8 <GPIO_Init+0x348>)
 8000a4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4e:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] |= portCode << (temp2 * 4);
 8000a50:	4a5e      	ldr	r2, [pc, #376]	@ (8000bcc <GPIO_Init+0x34c>)
 8000a52:	7cfb      	ldrb	r3, [r7, #19]
 8000a54:	3302      	adds	r3, #2
 8000a56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a5a:	7c79      	ldrb	r1, [r7, #17]
 8000a5c:	7cbb      	ldrb	r3, [r7, #18]
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	fa01 f303 	lsl.w	r3, r1, r3
 8000a64:	4618      	mov	r0, r3
 8000a66:	4959      	ldr	r1, [pc, #356]	@ (8000bcc <GPIO_Init+0x34c>)
 8000a68:	7cfb      	ldrb	r3, [r7, #19]
 8000a6a:	4302      	orrs	r2, r0
 8000a6c:	3302      	adds	r3, #2
 8000a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3. Enable the EXTI delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a72:	4b57      	ldr	r3, [pc, #348]	@ (8000bd0 <GPIO_Init+0x350>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	7912      	ldrb	r2, [r2, #4]
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	408a      	lsls	r2, r1
 8000a80:	4611      	mov	r1, r2
 8000a82:	4a53      	ldr	r2, [pc, #332]	@ (8000bd0 <GPIO_Init+0x350>)
 8000a84:	430b      	orrs	r3, r1
 8000a86:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	799b      	ldrb	r3, [r3, #6]
 8000a90:	461a      	mov	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	791b      	ldrb	r3, [r3, #4]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	689a      	ldr	r2, [r3, #8]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	791b      	ldrb	r3, [r3, #4]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	2303      	movs	r3, #3
 8000aac:	408b      	lsls	r3, r1
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	400a      	ands	r2, r1
 8000ab8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6899      	ldr	r1, [r3, #8]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	697a      	ldr	r2, [r7, #20]
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]

	// 3. Configure the pull-up/pull-down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	79db      	ldrb	r3, [r3, #7]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	791b      	ldrb	r3, [r3, #4]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	68da      	ldr	r2, [r3, #12]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	791b      	ldrb	r3, [r3, #4]
 8000aea:	4619      	mov	r1, r3
 8000aec:	2303      	movs	r3, #3
 8000aee:	408b      	lsls	r3, r1
 8000af0:	43db      	mvns	r3, r3
 8000af2:	4619      	mov	r1, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	400a      	ands	r2, r1
 8000afa:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	68d9      	ldr	r1, [r3, #12]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	697a      	ldr	r2, [r7, #20]
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]

	// 4. Configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	7a1b      	ldrb	r3, [r3, #8]
 8000b14:	461a      	mov	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	791b      	ldrb	r3, [r3, #4]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	685a      	ldr	r2, [r3, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	791b      	ldrb	r3, [r3, #4]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	408b      	lsls	r3, r1
 8000b30:	43db      	mvns	r3, r3
 8000b32:	4619      	mov	r1, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	400a      	ands	r2, r1
 8000b3a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	6859      	ldr	r1, [r3, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	697a      	ldr	r2, [r7, #20]
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]

	// 5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	795b      	ldrb	r3, [r3, #5]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d131      	bne.n	8000bbc <GPIO_Init+0x33c>
	{
		// configure the alternate function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	791b      	ldrb	r3, [r3, #4]
 8000b5c:	08db      	lsrs	r3, r3, #3
 8000b5e:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	791b      	ldrb	r3, [r3, #4]
 8000b64:	f003 0307 	and.w	r3, r3, #7
 8000b68:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	7c3a      	ldrb	r2, [r7, #16]
 8000b70:	3208      	adds	r2, #8
 8000b72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	220f      	movs	r2, #15
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	7c3a      	ldrb	r2, [r7, #16]
 8000b8a:	4001      	ands	r1, r0
 8000b8c:	3208      	adds	r2, #8
 8000b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	7c3a      	ldrb	r2, [r7, #16]
 8000b98:	3208      	adds	r2, #8
 8000b9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	7a5b      	ldrb	r3, [r3, #9]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	4618      	mov	r0, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	7c3a      	ldrb	r2, [r7, #16]
 8000bb4:	4301      	orrs	r1, r0
 8000bb6:	3208      	adds	r2, #8
 8000bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

	temp = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
}
 8000bc0:	bf00      	nop
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40013800 	.word	0x40013800
 8000bd0:	40013c00 	.word	0x40013c00

08000bd4 <GPIO_IRQInterruptConfig>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	460a      	mov	r2, r1
 8000bde:	71fb      	strb	r3, [r7, #7]
 8000be0:	4613      	mov	r3, r2
 8000be2:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE)
 8000be4:	79bb      	ldrb	r3, [r7, #6]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d133      	bne.n	8000c52 <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b1f      	cmp	r3, #31
 8000bee:	d80a      	bhi.n	8000c06 <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000bf0:	4b35      	ldr	r3, [pc, #212]	@ (8000cc8 <GPIO_IRQInterruptConfig+0xf4>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	79fa      	ldrb	r2, [r7, #7]
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4a32      	ldr	r2, [pc, #200]	@ (8000cc8 <GPIO_IRQInterruptConfig+0xf4>)
 8000c00:	430b      	orrs	r3, r1
 8000c02:	6013      	str	r3, [r2, #0]
		{
			//ICER2
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}
	}
}
 8000c04:	e059      	b.n	8000cba <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber > 32 && IRQNumber < 64)
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2b20      	cmp	r3, #32
 8000c0a:	d90f      	bls.n	8000c2c <GPIO_IRQInterruptConfig+0x58>
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c10:	d80c      	bhi.n	8000c2c <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
 8000c12:	4b2e      	ldr	r3, [pc, #184]	@ (8000ccc <GPIO_IRQInterruptConfig+0xf8>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	79fa      	ldrb	r2, [r7, #7]
 8000c18:	f002 021f 	and.w	r2, r2, #31
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c22:	4611      	mov	r1, r2
 8000c24:	4a29      	ldr	r2, [pc, #164]	@ (8000ccc <GPIO_IRQInterruptConfig+0xf8>)
 8000c26:	430b      	orrs	r3, r1
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	e046      	b.n	8000cba <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber > 64 && IRQNumber < 96)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	2b40      	cmp	r3, #64	@ 0x40
 8000c30:	d943      	bls.n	8000cba <GPIO_IRQInterruptConfig+0xe6>
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b5f      	cmp	r3, #95	@ 0x5f
 8000c36:	d840      	bhi.n	8000cba <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << IRQNumber % 64);
 8000c38:	4b25      	ldr	r3, [pc, #148]	@ (8000cd0 <GPIO_IRQInterruptConfig+0xfc>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	79fa      	ldrb	r2, [r7, #7]
 8000c3e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000c42:	2101      	movs	r1, #1
 8000c44:	fa01 f202 	lsl.w	r2, r1, r2
 8000c48:	4611      	mov	r1, r2
 8000c4a:	4a21      	ldr	r2, [pc, #132]	@ (8000cd0 <GPIO_IRQInterruptConfig+0xfc>)
 8000c4c:	430b      	orrs	r3, r1
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	e033      	b.n	8000cba <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	2b1f      	cmp	r3, #31
 8000c56:	d80a      	bhi.n	8000c6e <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000c58:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd4 <GPIO_IRQInterruptConfig+0x100>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	79fa      	ldrb	r2, [r7, #7]
 8000c5e:	2101      	movs	r1, #1
 8000c60:	fa01 f202 	lsl.w	r2, r1, r2
 8000c64:	4611      	mov	r1, r2
 8000c66:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd4 <GPIO_IRQInterruptConfig+0x100>)
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	e025      	b.n	8000cba <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber > 32 && IRQNumber < 64)
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b20      	cmp	r3, #32
 8000c72:	d90f      	bls.n	8000c94 <GPIO_IRQInterruptConfig+0xc0>
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c78:	d80c      	bhi.n	8000c94 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
 8000c7a:	4b17      	ldr	r3, [pc, #92]	@ (8000cd8 <GPIO_IRQInterruptConfig+0x104>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	79fa      	ldrb	r2, [r7, #7]
 8000c80:	f002 021f 	and.w	r2, r2, #31
 8000c84:	2101      	movs	r1, #1
 8000c86:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	4a12      	ldr	r2, [pc, #72]	@ (8000cd8 <GPIO_IRQInterruptConfig+0x104>)
 8000c8e:	430b      	orrs	r3, r1
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	e012      	b.n	8000cba <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber > 64 && IRQNumber < 96)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	2b40      	cmp	r3, #64	@ 0x40
 8000c98:	d90f      	bls.n	8000cba <GPIO_IRQInterruptConfig+0xe6>
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	2b5f      	cmp	r3, #95	@ 0x5f
 8000c9e:	d80c      	bhi.n	8000cba <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <GPIO_IRQInterruptConfig+0x108>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	79fa      	ldrb	r2, [r7, #7]
 8000ca6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000caa:	2101      	movs	r1, #1
 8000cac:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <GPIO_IRQInterruptConfig+0x108>)
 8000cb4:	430b      	orrs	r3, r1
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	e7ff      	b.n	8000cba <GPIO_IRQInterruptConfig+0xe6>
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000e104 	.word	0xe000e104
 8000cd0:	e000e108 	.word	0xe000e108
 8000cd4:	e000e180 	.word	0xe000e180
 8000cd8:	e000e184 	.word	0xe000e184
 8000cdc:	e000e188 	.word	0xe000e188

08000ce0 <GPIO_IRQPriorityConfig>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
	//1. first determine IPR register
	uint8_t iprx = IRQNumber / 4;
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	089b      	lsrs	r3, r3, #2
 8000cf0:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4 ;
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	73bb      	strb	r3, [r7, #14]

	//2. set priority
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000cfa:	7bbb      	ldrb	r3, [r7, #14]
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	3304      	adds	r3, #4
 8000d02:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount); // +iprx because pointer arithmetic leads to +4 address bytes
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000d0c:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000d10:	6819      	ldr	r1, [r3, #0]
 8000d12:	7b7b      	ldrb	r3, [r7, #13]
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	409a      	lsls	r2, r3
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000d20:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000d24:	430a      	orrs	r2, r1
 8000d26:	601a      	str	r2, [r3, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <GPIO_IRQHandling>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
	//clear the EXTI PR register corresponding to the pin number
	if(EXTI->PR &(1 <<PinNumber))
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <GPIO_IRQHandling+0x3c>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	79fa      	ldrb	r2, [r7, #7]
 8000d44:	2101      	movs	r1, #1
 8000d46:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d009      	beq.n	8000d64 <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= (1 << PinNumber); //CLR EXTI PR for pin by setting 1
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <GPIO_IRQHandling+0x3c>)
 8000d52:	695b      	ldr	r3, [r3, #20]
 8000d54:	79fa      	ldrb	r2, [r7, #7]
 8000d56:	2101      	movs	r1, #1
 8000d58:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <GPIO_IRQHandling+0x3c>)
 8000d60:	430b      	orrs	r3, r1
 8000d62:	6153      	str	r3, [r2, #20]
	}
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	40013c00 	.word	0x40013c00

08000d74 <SPI_PeriClockControl>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d12b      	bne.n	8000dde <SPI_PeriClockControl+0x6a>
	{
		if(pSPIx == SPI1)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a2d      	ldr	r2, [pc, #180]	@ (8000e40 <SPI_PeriClockControl+0xcc>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d106      	bne.n	8000d9c <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000d8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e44 <SPI_PeriClockControl+0xd0>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d92:	4a2c      	ldr	r2, [pc, #176]	@ (8000e44 <SPI_PeriClockControl+0xd0>)
 8000d94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d98:	6453      	str	r3, [r2, #68]	@ 0x44
		else if(pSPIx == SPI4)
		{
			SPI4_PCLK_DI();
		}
	}
}
 8000d9a:	e04b      	b.n	8000e34 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI2)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a2a      	ldr	r2, [pc, #168]	@ (8000e48 <SPI_PeriClockControl+0xd4>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d106      	bne.n	8000db2 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000da4:	4b27      	ldr	r3, [pc, #156]	@ (8000e44 <SPI_PeriClockControl+0xd0>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da8:	4a26      	ldr	r2, [pc, #152]	@ (8000e44 <SPI_PeriClockControl+0xd0>)
 8000daa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dae:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000db0:	e040      	b.n	8000e34 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI3)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a25      	ldr	r2, [pc, #148]	@ (8000e4c <SPI_PeriClockControl+0xd8>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d106      	bne.n	8000dc8 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 8000dba:	4b22      	ldr	r3, [pc, #136]	@ (8000e44 <SPI_PeriClockControl+0xd0>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	4a21      	ldr	r2, [pc, #132]	@ (8000e44 <SPI_PeriClockControl+0xd0>)
 8000dc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dc4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000dc6:	e035      	b.n	8000e34 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI4)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a21      	ldr	r2, [pc, #132]	@ (8000e50 <SPI_PeriClockControl+0xdc>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d131      	bne.n	8000e34 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 8000dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e44 <SPI_PeriClockControl+0xd0>)
 8000dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e44 <SPI_PeriClockControl+0xd0>)
 8000dd6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000dda:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000ddc:	e02a      	b.n	8000e34 <SPI_PeriClockControl+0xc0>
		if(pSPIx == SPI1)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a17      	ldr	r2, [pc, #92]	@ (8000e40 <SPI_PeriClockControl+0xcc>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d106      	bne.n	8000df4 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 8000de6:	4b17      	ldr	r3, [pc, #92]	@ (8000e44 <SPI_PeriClockControl+0xd0>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dea:	4a16      	ldr	r2, [pc, #88]	@ (8000e44 <SPI_PeriClockControl+0xd0>)
 8000dec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000df0:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000df2:	e01f      	b.n	8000e34 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI2)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a14      	ldr	r2, [pc, #80]	@ (8000e48 <SPI_PeriClockControl+0xd4>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d106      	bne.n	8000e0a <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 8000dfc:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <SPI_PeriClockControl+0xd0>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e00:	4a10      	ldr	r2, [pc, #64]	@ (8000e44 <SPI_PeriClockControl+0xd0>)
 8000e02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e06:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e08:	e014      	b.n	8000e34 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI3)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8000e4c <SPI_PeriClockControl+0xd8>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d106      	bne.n	8000e20 <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DI();
 8000e12:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <SPI_PeriClockControl+0xd0>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	4a0b      	ldr	r2, [pc, #44]	@ (8000e44 <SPI_PeriClockControl+0xd0>)
 8000e18:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000e1c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e1e:	e009      	b.n	8000e34 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI4)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a0b      	ldr	r2, [pc, #44]	@ (8000e50 <SPI_PeriClockControl+0xdc>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d105      	bne.n	8000e34 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DI();
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <SPI_PeriClockControl+0xd0>)
 8000e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2c:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <SPI_PeriClockControl+0xd0>)
 8000e2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000e32:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	40013000 	.word	0x40013000
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40003800 	.word	0x40003800
 8000e4c:	40003c00 	.word	0x40003c00
 8000e50:	40013400 	.word	0x40013400

08000e54 <SPI_Init>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	//Enable SPI peripheral clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2101      	movs	r1, #1
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff86 	bl	8000d74 <SPI_PeriClockControl>

	//Configure SPI CR1
	uint32_t temp = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]

	//1. Configure Device Mode
	temp |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MODE;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	791b      	ldrb	r3, [r3, #4]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	461a      	mov	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]

	//2. Configure SPI Bus
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) // 2-line Full-Duplex
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	795b      	ldrb	r3, [r3, #5]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d104      	bne.n	8000e90 <SPI_Init+0x3c>
	{
		// Clear Bidirectional Mode
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	e016      	b.n	8000ebe <SPI_Init+0x6a>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) // 1-line Half-Duplex
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	795b      	ldrb	r3, [r3, #5]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d104      	bne.n	8000ea4 <SPI_Init+0x50>
	{
		// Set Bidirectional Mode
		temp |= (1 << SPI_CR1_BIDIMODE);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	e00c      	b.n	8000ebe <SPI_Init+0x6a>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY) // Receive only
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	795b      	ldrb	r3, [r3, #5]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b03      	cmp	r3, #3
 8000eac:	d107      	bne.n	8000ebe <SPI_Init+0x6a>
	{
		// Clear Bidirectional Mode
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000eb4:	60fb      	str	r3, [r7, #12]

		// Set RXONLY Bit
		temp |= (1 << SPI_CR1_RXONLY);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ebc:	60fb      	str	r3, [r7, #12]
	}

	//3. Configure SPI Clock Speed (Baud Rate)
	temp |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	799b      	ldrb	r3, [r3, #6]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]

	//4. Configure Date Frame Format
	temp |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	79db      	ldrb	r3, [r3, #7]
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	02db      	lsls	r3, r3, #11
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]

	//5. Configure Clock Polarity (Idle state High VS Low)
	temp |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7a1b      	ldrb	r3, [r3, #8]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]

	//6. Configure Clock Phase (Data Capture Trailing VS Leading Edge)
	temp |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	7a5b      	ldrb	r3, [r3, #9]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]

	//7. Configure Slave Select Mode (SW or HW)
	temp |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	7a9b      	ldrb	r3, [r3, #10]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	025b      	lsls	r3, r3, #9
 8000f04:	461a      	mov	r2, r3
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = temp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	601a      	str	r2, [r3, #0]

}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <SPI_GetFlagStatus>:
/*
 * Data Send and Receive
 */

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689a      	ldr	r2, [r3, #8]
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <SPI_IRQInterruptConfig>:
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	460a      	mov	r2, r1
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE)
 8000f54:	79bb      	ldrb	r3, [r7, #6]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d133      	bne.n	8000fc2 <SPI_IRQInterruptConfig+0x7e>
		{
			if(IRQNumber <= 31)
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b1f      	cmp	r3, #31
 8000f5e:	d80a      	bhi.n	8000f76 <SPI_IRQInterruptConfig+0x32>
			{
				//program ISER0
				*NVIC_ISER0 |= (1 << IRQNumber);
 8000f60:	4b35      	ldr	r3, [pc, #212]	@ (8001038 <SPI_IRQInterruptConfig+0xf4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	79fa      	ldrb	r2, [r7, #7]
 8000f66:	2101      	movs	r1, #1
 8000f68:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4a32      	ldr	r2, [pc, #200]	@ (8001038 <SPI_IRQInterruptConfig+0xf4>)
 8000f70:	430b      	orrs	r3, r1
 8000f72:	6013      	str	r3, [r2, #0]
			{
				//ICER2
				*NVIC_ICER2 |= (1 << IRQNumber % 64);
			}
		}
}
 8000f74:	e059      	b.n	800102a <SPI_IRQInterruptConfig+0xe6>
			else if (IRQNumber > 32 && IRQNumber < 64)
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2b20      	cmp	r3, #32
 8000f7a:	d90f      	bls.n	8000f9c <SPI_IRQInterruptConfig+0x58>
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f80:	d80c      	bhi.n	8000f9c <SPI_IRQInterruptConfig+0x58>
				*NVIC_ISER1 |= (1 << IRQNumber % 32);
 8000f82:	4b2e      	ldr	r3, [pc, #184]	@ (800103c <SPI_IRQInterruptConfig+0xf8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	79fa      	ldrb	r2, [r7, #7]
 8000f88:	f002 021f 	and.w	r2, r2, #31
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f92:	4611      	mov	r1, r2
 8000f94:	4a29      	ldr	r2, [pc, #164]	@ (800103c <SPI_IRQInterruptConfig+0xf8>)
 8000f96:	430b      	orrs	r3, r1
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	e046      	b.n	800102a <SPI_IRQInterruptConfig+0xe6>
			else if (IRQNumber > 64 && IRQNumber < 96)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2b40      	cmp	r3, #64	@ 0x40
 8000fa0:	d943      	bls.n	800102a <SPI_IRQInterruptConfig+0xe6>
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b5f      	cmp	r3, #95	@ 0x5f
 8000fa6:	d840      	bhi.n	800102a <SPI_IRQInterruptConfig+0xe6>
				*NVIC_ISER2 |= (1 << IRQNumber % 64);
 8000fa8:	4b25      	ldr	r3, [pc, #148]	@ (8001040 <SPI_IRQInterruptConfig+0xfc>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	79fa      	ldrb	r2, [r7, #7]
 8000fae:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb8:	4611      	mov	r1, r2
 8000fba:	4a21      	ldr	r2, [pc, #132]	@ (8001040 <SPI_IRQInterruptConfig+0xfc>)
 8000fbc:	430b      	orrs	r3, r1
 8000fbe:	6013      	str	r3, [r2, #0]
}
 8000fc0:	e033      	b.n	800102a <SPI_IRQInterruptConfig+0xe6>
			if(IRQNumber <= 31)
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	2b1f      	cmp	r3, #31
 8000fc6:	d80a      	bhi.n	8000fde <SPI_IRQInterruptConfig+0x9a>
				*NVIC_ICER0 |= (1 << IRQNumber);
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001044 <SPI_IRQInterruptConfig+0x100>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	79fa      	ldrb	r2, [r7, #7]
 8000fce:	2101      	movs	r1, #1
 8000fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8001044 <SPI_IRQInterruptConfig+0x100>)
 8000fd8:	430b      	orrs	r3, r1
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	e025      	b.n	800102a <SPI_IRQInterruptConfig+0xe6>
			else if (IRQNumber > 32 && IRQNumber < 64)
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b20      	cmp	r3, #32
 8000fe2:	d90f      	bls.n	8001004 <SPI_IRQInterruptConfig+0xc0>
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fe8:	d80c      	bhi.n	8001004 <SPI_IRQInterruptConfig+0xc0>
				*NVIC_ICER1 |= (1 << IRQNumber % 32);
 8000fea:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <SPI_IRQInterruptConfig+0x104>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	79fa      	ldrb	r2, [r7, #7]
 8000ff0:	f002 021f 	and.w	r2, r2, #31
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4a12      	ldr	r2, [pc, #72]	@ (8001048 <SPI_IRQInterruptConfig+0x104>)
 8000ffe:	430b      	orrs	r3, r1
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e012      	b.n	800102a <SPI_IRQInterruptConfig+0xe6>
			else if (IRQNumber > 64 && IRQNumber < 96)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2b40      	cmp	r3, #64	@ 0x40
 8001008:	d90f      	bls.n	800102a <SPI_IRQInterruptConfig+0xe6>
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b5f      	cmp	r3, #95	@ 0x5f
 800100e:	d80c      	bhi.n	800102a <SPI_IRQInterruptConfig+0xe6>
				*NVIC_ICER2 |= (1 << IRQNumber % 64);
 8001010:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <SPI_IRQInterruptConfig+0x108>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	79fa      	ldrb	r2, [r7, #7]
 8001016:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800101a:	2101      	movs	r1, #1
 800101c:	fa01 f202 	lsl.w	r2, r1, r2
 8001020:	4611      	mov	r1, r2
 8001022:	4a0a      	ldr	r2, [pc, #40]	@ (800104c <SPI_IRQInterruptConfig+0x108>)
 8001024:	430b      	orrs	r3, r1
 8001026:	6013      	str	r3, [r2, #0]
}
 8001028:	e7ff      	b.n	800102a <SPI_IRQInterruptConfig+0xe6>
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000e104 	.word	0xe000e104
 8001040:	e000e108 	.word	0xe000e108
 8001044:	e000e180 	.word	0xe000e180
 8001048:	e000e184 	.word	0xe000e184
 800104c:	e000e188 	.word	0xe000e188

08001050 <SPI_IRQHandling>:
	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount); // +iprx because pointer arithmetic leads to +4 address bytes
}


void SPI_IRQHandling(SPI_Handle_t *pSPIHandle)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	uint8_t temp1, temp2;
	// Check For TXE
	temp1 = pSPIHandle->pSPIx->SR & (1 << SPI_SR_TXE);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	73fb      	strb	r3, [r7, #15]
	temp2 = pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_TXEIE);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001072:	73bb      	strb	r3, [r7, #14]

	if (temp1 && temp2)
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d005      	beq.n	8001086 <SPI_IRQHandling+0x36>
 800107a:	7bbb      	ldrb	r3, [r7, #14]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <SPI_IRQHandling+0x36>
	{
		//Handle TXE
		spi_txe_interrupt_handle(pSPIHandle);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f000 f8b2 	bl	80011ea <spi_txe_interrupt_handle>
	}

	// Check for RXNE
	temp1 = pSPIHandle->pSPIx->SR & (1 << SPI_SR_RXNE);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
	temp2 = pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_RXNEIE);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010a0:	73bb      	strb	r3, [r7, #14]

	if (temp1 && temp2)
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <SPI_IRQHandling+0x64>
 80010a8:	7bbb      	ldrb	r3, [r7, #14]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d002      	beq.n	80010b4 <SPI_IRQHandling+0x64>
	{
		//Handle RXNE
		spi_rxne_interrupt_handle(pSPIHandle);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 f8db 	bl	800126a <spi_rxne_interrupt_handle>
	}

	// Check for Overrun error
	temp1 = pSPIHandle->pSPIx->SR & (1 << SPI_SR_OVR);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010c0:	73fb      	strb	r3, [r7, #15]
	temp2 = pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_ERRIE);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	f003 0320 	and.w	r3, r3, #32
 80010ce:	73bb      	strb	r3, [r7, #14]

	if (temp1 && temp2)
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d005      	beq.n	80010e2 <SPI_IRQHandling+0x92>
 80010d6:	7bbb      	ldrb	r3, [r7, #14]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <SPI_IRQHandling+0x92>
	{
		//Handle RXNE
		spi_ovr_err_interrupt_handle(pSPIHandle);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 f90b 	bl	80012f8 <spi_ovr_err_interrupt_handle>
	}

}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <SPI_PeripheralControl>:
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80010f6:	78fb      	ldrb	r3, [r7, #3]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d106      	bne.n	800110a <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8001108:	e005      	b.n	8001116 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	601a      	str	r2, [r3, #0]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <SPI_SSOE_Config>:
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void SPI_SSOE_Config(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	460b      	mov	r3, r1
 800112c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800112e:	78fb      	ldrb	r3, [r7, #3]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d106      	bne.n	8001142 <SPI_SSOE_Config+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f043 0204 	orr.w	r2, r3, #4
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8001140:	e005      	b.n	800114e <SPI_SSOE_Config+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f023 0204 	bic.w	r2, r3, #4
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	605a      	str	r2, [r3, #4]
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <SPI_SendDataIT>:
 *
 * 	@Note					-	This is a non-blocking call (interrupt type)
 *************************************************************************************************************/

uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 800115a:	b480      	push	{r7}
 800115c:	b087      	sub	sp, #28
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->TxState;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	7f1b      	ldrb	r3, [r3, #28]
 800116a:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_TX)
 800116c:	7dfb      	ldrb	r3, [r7, #23]
 800116e:	2b02      	cmp	r3, #2
 8001170:	d010      	beq.n	8001194 <SPI_SendDataIT+0x3a>
	{
		//1. Save Tx Buffer Address and Length Information in Global Variables
		pSPIHandle->pTxBuffer = pTxBuffer;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	68ba      	ldr	r2, [r7, #8]
 8001176:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = Len;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	615a      	str	r2, [r3, #20]

		//2. Mark SPI state as busy in transmission so that no other code can take over same peripheral until transmission ends
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2202      	movs	r2, #2
 8001182:	771a      	strb	r2, [r3, #28]

		//3. Enable TXEIE control but to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_TXEIE);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001192:	605a      	str	r2, [r3, #4]
	}

	return state;
 8001194:	7dfb      	ldrb	r3, [r7, #23]
}
 8001196:	4618      	mov	r0, r3
 8001198:	371c      	adds	r7, #28
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <SPI_ReceiveDataIT>:
 *
 * 	@Note					-	none
 *************************************************************************************************************/

uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b087      	sub	sp, #28
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	60f8      	str	r0, [r7, #12]
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->RxState;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	7f5b      	ldrb	r3, [r3, #29]
 80011b2:	75fb      	strb	r3, [r7, #23]

		if(state != SPI_BUSY_IN_RX)
 80011b4:	7dfb      	ldrb	r3, [r7, #23]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d010      	beq.n	80011dc <SPI_ReceiveDataIT+0x3a>
		{
			//1. Save Rx Buffer Address and Length Information in Global Variables
			pSPIHandle->pRxBuffer = pRxBuffer;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	68ba      	ldr	r2, [r7, #8]
 80011be:	611a      	str	r2, [r3, #16]
			pSPIHandle->RxLen = Len;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	619a      	str	r2, [r3, #24]

			//2. Mark SPI state as busy in transmission so that no other code can take over same peripheral until transmission ends
			pSPIHandle->RxState = SPI_BUSY_IN_RX;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2201      	movs	r2, #1
 80011ca:	775a      	strb	r2, [r3, #29]

			//3. Enable RXNEIE control but to get interrupt whenever RXNE flag is set in SR
			pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_RXNEIE);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80011da:	605a      	str	r2, [r3, #4]
		}

		return state;
 80011dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	371c      	adds	r7, #28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <spi_txe_interrupt_handle>:

// Helper functions
static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
	//check DFF but in CR1
	if(pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d015      	beq.n	800122c <spi_txe_interrupt_handle+0x42>
	{
		//16-bit DFF
		//1. Load data into DR
		pSPIHandle->pSPIx->DR = *((uint16_t*)pSPIHandle->pTxBuffer); //need to typecast data to two bytes
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	881a      	ldrh	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	1e5a      	subs	r2, r3, #1
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	615a      	str	r2, [r3, #20]
		pSPIHandle->TxLen--;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	1e5a      	subs	r2, r3, #1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	615a      	str	r2, [r3, #20]
		(uint16_t*)pSPIHandle->pTxBuffer++;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	1c5a      	adds	r2, r3, #1
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	e00f      	b.n	800124c <spi_txe_interrupt_handle+0x62>
	}
	else
	{
		//8-bit DFF
		pSPIHandle->pSPIx->DR = *pSPIHandle->pTxBuffer;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	781a      	ldrb	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	1e5a      	subs	r2, r3, #1
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	615a      	str	r2, [r3, #20]
		pSPIHandle->pTxBuffer++;;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	60da      	str	r2, [r3, #12]
	}

	if(!pSPIHandle->TxLen)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d106      	bne.n	8001262 <spi_txe_interrupt_handle+0x78>
	{
		// if TxLen is Zero, close spi transmission and inform application that Tx is over
		SPI_CloseTransmission(pSPIHandle);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f867 	bl	8001328 <SPI_CloseTransmission>
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_TX_CMPLT);
 800125a:	2101      	movs	r1, #1
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff f8ed 	bl	800043c <SPI_ApplicationEventCallback>
	}
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <spi_rxne_interrupt_handle>:

static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
	//check DFF but in CR1
	if(pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800127c:	2b00      	cmp	r3, #0
 800127e:	d01b      	beq.n	80012b8 <spi_rxne_interrupt_handle+0x4e>
	{
		//16-bit DFF
		//1. Load Data From DR to RxBuffer Address
		*((uint16_t*)pSPIHandle->pRxBuffer) = pSPIHandle->pSPIx->DR; //need to typecast data to two bytes
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68da      	ldr	r2, [r3, #12]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	b292      	uxth	r2, r2
 800128c:	801a      	strh	r2, [r3, #0]
		pSPIHandle->RxLen--;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	1e5a      	subs	r2, r3, #1
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	619a      	str	r2, [r3, #24]
		pSPIHandle->RxLen--;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	1e5a      	subs	r2, r3, #1
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	619a      	str	r2, [r3, #24]
		(uint16_t*)pSPIHandle->pRxBuffer--;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	1e5a      	subs	r2, r3, #1
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	611a      	str	r2, [r3, #16]
		(uint16_t*)pSPIHandle->pRxBuffer--;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	1e5a      	subs	r2, r3, #1
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	611a      	str	r2, [r3, #16]
 80012b6:	e010      	b.n	80012da <spi_rxne_interrupt_handle+0x70>
	}
	else
	{
		//8-bit DFF
		*(pSPIHandle->pRxBuffer) = pSPIHandle->pSPIx->DR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	701a      	strb	r2, [r3, #0]
		pSPIHandle->RxLen--;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	1e5a      	subs	r2, r3, #1
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer--;;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	1e5a      	subs	r2, r3, #1
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	611a      	str	r2, [r3, #16]
	}

	if(!pSPIHandle->RxLen)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d106      	bne.n	80012f0 <spi_rxne_interrupt_handle+0x86>
	{
		// Reception complete
		SPI_CloseReception(pSPIHandle);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 f83b 	bl	800135e <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_RX_CMPLT);
 80012e8:	2102      	movs	r1, #2
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff f8a6 	bl	800043c <SPI_ApplicationEventCallback>
	}
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <spi_ovr_err_interrupt_handle>:
static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	uint8_t temp;

	//1. clear OVR flag by reading DR and SR
	if (pSPIHandle->TxState != SPI_BUSY_IN_TX)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	7f1b      	ldrb	r3, [r3, #28]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d007      	beq.n	8001318 <spi_ovr_err_interrupt_handle+0x20>
	{
		temp = pSPIHandle->pSPIx->DR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	73fb      	strb	r3, [r7, #15]

	}
	(void)temp;

	//2. inform application
	SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_OVR_ERR);
 8001318:	2103      	movs	r1, #3
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff f88e 	bl	800043c <SPI_ApplicationEventCallback>
}
 8001320:	bf00      	nop
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <SPI_CloseTransmission>:
	temp = pSPIx->SR;
	(void)temp;
}

void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	//1. deactivate TXIE
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_TXEIE); // prevents interrupts from setting TXE flag
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800133e:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTxBuffer = NULL;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen = 0;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	615a      	str	r2, [r3, #20]
	pSPIHandle->TxState = SPI_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	771a      	strb	r2, [r3, #28]
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <SPI_CloseReception>:

void SPI_CloseReception(SPI_Handle_t *pSPIHandle)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
	//1. deactivate RXNEIE
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE); // prevents interrupts from setting TXE flag
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001374:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	775a      	strb	r2, [r3, #29]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <std>:
 8001394:	2300      	movs	r3, #0
 8001396:	b510      	push	{r4, lr}
 8001398:	4604      	mov	r4, r0
 800139a:	e9c0 3300 	strd	r3, r3, [r0]
 800139e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80013a2:	6083      	str	r3, [r0, #8]
 80013a4:	8181      	strh	r1, [r0, #12]
 80013a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80013a8:	81c2      	strh	r2, [r0, #14]
 80013aa:	6183      	str	r3, [r0, #24]
 80013ac:	4619      	mov	r1, r3
 80013ae:	2208      	movs	r2, #8
 80013b0:	305c      	adds	r0, #92	@ 0x5c
 80013b2:	f000 f8c3 	bl	800153c <memset>
 80013b6:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <std+0x58>)
 80013b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80013ba:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <std+0x5c>)
 80013bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80013be:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <std+0x60>)
 80013c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80013c2:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <std+0x64>)
 80013c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80013c6:	4b0d      	ldr	r3, [pc, #52]	@ (80013fc <std+0x68>)
 80013c8:	6224      	str	r4, [r4, #32]
 80013ca:	429c      	cmp	r4, r3
 80013cc:	d006      	beq.n	80013dc <std+0x48>
 80013ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80013d2:	4294      	cmp	r4, r2
 80013d4:	d002      	beq.n	80013dc <std+0x48>
 80013d6:	33d0      	adds	r3, #208	@ 0xd0
 80013d8:	429c      	cmp	r4, r3
 80013da:	d105      	bne.n	80013e8 <std+0x54>
 80013dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80013e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013e4:	f000 b8dc 	b.w	80015a0 <__retarget_lock_init_recursive>
 80013e8:	bd10      	pop	{r4, pc}
 80013ea:	bf00      	nop
 80013ec:	08001df5 	.word	0x08001df5
 80013f0:	08001e17 	.word	0x08001e17
 80013f4:	08001e4f 	.word	0x08001e4f
 80013f8:	08001e73 	.word	0x08001e73
 80013fc:	20000298 	.word	0x20000298

08001400 <stdio_exit_handler>:
 8001400:	4a02      	ldr	r2, [pc, #8]	@ (800140c <stdio_exit_handler+0xc>)
 8001402:	4903      	ldr	r1, [pc, #12]	@ (8001410 <stdio_exit_handler+0x10>)
 8001404:	4803      	ldr	r0, [pc, #12]	@ (8001414 <stdio_exit_handler+0x14>)
 8001406:	f000 b869 	b.w	80014dc <_fwalk_sglue>
 800140a:	bf00      	nop
 800140c:	20000000 	.word	0x20000000
 8001410:	08001d8d 	.word	0x08001d8d
 8001414:	20000010 	.word	0x20000010

08001418 <cleanup_stdio>:
 8001418:	6841      	ldr	r1, [r0, #4]
 800141a:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <cleanup_stdio+0x34>)
 800141c:	4299      	cmp	r1, r3
 800141e:	b510      	push	{r4, lr}
 8001420:	4604      	mov	r4, r0
 8001422:	d001      	beq.n	8001428 <cleanup_stdio+0x10>
 8001424:	f000 fcb2 	bl	8001d8c <_fflush_r>
 8001428:	68a1      	ldr	r1, [r4, #8]
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <cleanup_stdio+0x38>)
 800142c:	4299      	cmp	r1, r3
 800142e:	d002      	beq.n	8001436 <cleanup_stdio+0x1e>
 8001430:	4620      	mov	r0, r4
 8001432:	f000 fcab 	bl	8001d8c <_fflush_r>
 8001436:	68e1      	ldr	r1, [r4, #12]
 8001438:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <cleanup_stdio+0x3c>)
 800143a:	4299      	cmp	r1, r3
 800143c:	d004      	beq.n	8001448 <cleanup_stdio+0x30>
 800143e:	4620      	mov	r0, r4
 8001440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001444:	f000 bca2 	b.w	8001d8c <_fflush_r>
 8001448:	bd10      	pop	{r4, pc}
 800144a:	bf00      	nop
 800144c:	20000298 	.word	0x20000298
 8001450:	20000300 	.word	0x20000300
 8001454:	20000368 	.word	0x20000368

08001458 <global_stdio_init.part.0>:
 8001458:	b510      	push	{r4, lr}
 800145a:	4b0b      	ldr	r3, [pc, #44]	@ (8001488 <global_stdio_init.part.0+0x30>)
 800145c:	4c0b      	ldr	r4, [pc, #44]	@ (800148c <global_stdio_init.part.0+0x34>)
 800145e:	4a0c      	ldr	r2, [pc, #48]	@ (8001490 <global_stdio_init.part.0+0x38>)
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	4620      	mov	r0, r4
 8001464:	2200      	movs	r2, #0
 8001466:	2104      	movs	r1, #4
 8001468:	f7ff ff94 	bl	8001394 <std>
 800146c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001470:	2201      	movs	r2, #1
 8001472:	2109      	movs	r1, #9
 8001474:	f7ff ff8e 	bl	8001394 <std>
 8001478:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800147c:	2202      	movs	r2, #2
 800147e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001482:	2112      	movs	r1, #18
 8001484:	f7ff bf86 	b.w	8001394 <std>
 8001488:	200003d0 	.word	0x200003d0
 800148c:	20000298 	.word	0x20000298
 8001490:	08001401 	.word	0x08001401

08001494 <__sfp_lock_acquire>:
 8001494:	4801      	ldr	r0, [pc, #4]	@ (800149c <__sfp_lock_acquire+0x8>)
 8001496:	f000 b884 	b.w	80015a2 <__retarget_lock_acquire_recursive>
 800149a:	bf00      	nop
 800149c:	200003d5 	.word	0x200003d5

080014a0 <__sfp_lock_release>:
 80014a0:	4801      	ldr	r0, [pc, #4]	@ (80014a8 <__sfp_lock_release+0x8>)
 80014a2:	f000 b87f 	b.w	80015a4 <__retarget_lock_release_recursive>
 80014a6:	bf00      	nop
 80014a8:	200003d5 	.word	0x200003d5

080014ac <__sinit>:
 80014ac:	b510      	push	{r4, lr}
 80014ae:	4604      	mov	r4, r0
 80014b0:	f7ff fff0 	bl	8001494 <__sfp_lock_acquire>
 80014b4:	6a23      	ldr	r3, [r4, #32]
 80014b6:	b11b      	cbz	r3, 80014c0 <__sinit+0x14>
 80014b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014bc:	f7ff bff0 	b.w	80014a0 <__sfp_lock_release>
 80014c0:	4b04      	ldr	r3, [pc, #16]	@ (80014d4 <__sinit+0x28>)
 80014c2:	6223      	str	r3, [r4, #32]
 80014c4:	4b04      	ldr	r3, [pc, #16]	@ (80014d8 <__sinit+0x2c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f5      	bne.n	80014b8 <__sinit+0xc>
 80014cc:	f7ff ffc4 	bl	8001458 <global_stdio_init.part.0>
 80014d0:	e7f2      	b.n	80014b8 <__sinit+0xc>
 80014d2:	bf00      	nop
 80014d4:	08001419 	.word	0x08001419
 80014d8:	200003d0 	.word	0x200003d0

080014dc <_fwalk_sglue>:
 80014dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014e0:	4607      	mov	r7, r0
 80014e2:	4688      	mov	r8, r1
 80014e4:	4614      	mov	r4, r2
 80014e6:	2600      	movs	r6, #0
 80014e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80014ec:	f1b9 0901 	subs.w	r9, r9, #1
 80014f0:	d505      	bpl.n	80014fe <_fwalk_sglue+0x22>
 80014f2:	6824      	ldr	r4, [r4, #0]
 80014f4:	2c00      	cmp	r4, #0
 80014f6:	d1f7      	bne.n	80014e8 <_fwalk_sglue+0xc>
 80014f8:	4630      	mov	r0, r6
 80014fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014fe:	89ab      	ldrh	r3, [r5, #12]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d907      	bls.n	8001514 <_fwalk_sglue+0x38>
 8001504:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001508:	3301      	adds	r3, #1
 800150a:	d003      	beq.n	8001514 <_fwalk_sglue+0x38>
 800150c:	4629      	mov	r1, r5
 800150e:	4638      	mov	r0, r7
 8001510:	47c0      	blx	r8
 8001512:	4306      	orrs	r6, r0
 8001514:	3568      	adds	r5, #104	@ 0x68
 8001516:	e7e9      	b.n	80014ec <_fwalk_sglue+0x10>

08001518 <iprintf>:
 8001518:	b40f      	push	{r0, r1, r2, r3}
 800151a:	b507      	push	{r0, r1, r2, lr}
 800151c:	4906      	ldr	r1, [pc, #24]	@ (8001538 <iprintf+0x20>)
 800151e:	ab04      	add	r3, sp, #16
 8001520:	6808      	ldr	r0, [r1, #0]
 8001522:	f853 2b04 	ldr.w	r2, [r3], #4
 8001526:	6881      	ldr	r1, [r0, #8]
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	f000 f865 	bl	80015f8 <_vfiprintf_r>
 800152e:	b003      	add	sp, #12
 8001530:	f85d eb04 	ldr.w	lr, [sp], #4
 8001534:	b004      	add	sp, #16
 8001536:	4770      	bx	lr
 8001538:	2000000c 	.word	0x2000000c

0800153c <memset>:
 800153c:	4402      	add	r2, r0
 800153e:	4603      	mov	r3, r0
 8001540:	4293      	cmp	r3, r2
 8001542:	d100      	bne.n	8001546 <memset+0xa>
 8001544:	4770      	bx	lr
 8001546:	f803 1b01 	strb.w	r1, [r3], #1
 800154a:	e7f9      	b.n	8001540 <memset+0x4>

0800154c <__errno>:
 800154c:	4b01      	ldr	r3, [pc, #4]	@ (8001554 <__errno+0x8>)
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	2000000c 	.word	0x2000000c

08001558 <__libc_init_array>:
 8001558:	b570      	push	{r4, r5, r6, lr}
 800155a:	4d0d      	ldr	r5, [pc, #52]	@ (8001590 <__libc_init_array+0x38>)
 800155c:	4c0d      	ldr	r4, [pc, #52]	@ (8001594 <__libc_init_array+0x3c>)
 800155e:	1b64      	subs	r4, r4, r5
 8001560:	10a4      	asrs	r4, r4, #2
 8001562:	2600      	movs	r6, #0
 8001564:	42a6      	cmp	r6, r4
 8001566:	d109      	bne.n	800157c <__libc_init_array+0x24>
 8001568:	4d0b      	ldr	r5, [pc, #44]	@ (8001598 <__libc_init_array+0x40>)
 800156a:	4c0c      	ldr	r4, [pc, #48]	@ (800159c <__libc_init_array+0x44>)
 800156c:	f000 fe3e 	bl	80021ec <_init>
 8001570:	1b64      	subs	r4, r4, r5
 8001572:	10a4      	asrs	r4, r4, #2
 8001574:	2600      	movs	r6, #0
 8001576:	42a6      	cmp	r6, r4
 8001578:	d105      	bne.n	8001586 <__libc_init_array+0x2e>
 800157a:	bd70      	pop	{r4, r5, r6, pc}
 800157c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001580:	4798      	blx	r3
 8001582:	3601      	adds	r6, #1
 8001584:	e7ee      	b.n	8001564 <__libc_init_array+0xc>
 8001586:	f855 3b04 	ldr.w	r3, [r5], #4
 800158a:	4798      	blx	r3
 800158c:	3601      	adds	r6, #1
 800158e:	e7f2      	b.n	8001576 <__libc_init_array+0x1e>
 8001590:	08002250 	.word	0x08002250
 8001594:	08002250 	.word	0x08002250
 8001598:	08002250 	.word	0x08002250
 800159c:	08002254 	.word	0x08002254

080015a0 <__retarget_lock_init_recursive>:
 80015a0:	4770      	bx	lr

080015a2 <__retarget_lock_acquire_recursive>:
 80015a2:	4770      	bx	lr

080015a4 <__retarget_lock_release_recursive>:
 80015a4:	4770      	bx	lr

080015a6 <__sfputc_r>:
 80015a6:	6893      	ldr	r3, [r2, #8]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	b410      	push	{r4}
 80015ae:	6093      	str	r3, [r2, #8]
 80015b0:	da08      	bge.n	80015c4 <__sfputc_r+0x1e>
 80015b2:	6994      	ldr	r4, [r2, #24]
 80015b4:	42a3      	cmp	r3, r4
 80015b6:	db01      	blt.n	80015bc <__sfputc_r+0x16>
 80015b8:	290a      	cmp	r1, #10
 80015ba:	d103      	bne.n	80015c4 <__sfputc_r+0x1e>
 80015bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015c0:	f000 bc5b 	b.w	8001e7a <__swbuf_r>
 80015c4:	6813      	ldr	r3, [r2, #0]
 80015c6:	1c58      	adds	r0, r3, #1
 80015c8:	6010      	str	r0, [r2, #0]
 80015ca:	7019      	strb	r1, [r3, #0]
 80015cc:	4608      	mov	r0, r1
 80015ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <__sfputs_r>:
 80015d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015d6:	4606      	mov	r6, r0
 80015d8:	460f      	mov	r7, r1
 80015da:	4614      	mov	r4, r2
 80015dc:	18d5      	adds	r5, r2, r3
 80015de:	42ac      	cmp	r4, r5
 80015e0:	d101      	bne.n	80015e6 <__sfputs_r+0x12>
 80015e2:	2000      	movs	r0, #0
 80015e4:	e007      	b.n	80015f6 <__sfputs_r+0x22>
 80015e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015ea:	463a      	mov	r2, r7
 80015ec:	4630      	mov	r0, r6
 80015ee:	f7ff ffda 	bl	80015a6 <__sfputc_r>
 80015f2:	1c43      	adds	r3, r0, #1
 80015f4:	d1f3      	bne.n	80015de <__sfputs_r+0xa>
 80015f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080015f8 <_vfiprintf_r>:
 80015f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015fc:	460d      	mov	r5, r1
 80015fe:	b09d      	sub	sp, #116	@ 0x74
 8001600:	4614      	mov	r4, r2
 8001602:	4698      	mov	r8, r3
 8001604:	4606      	mov	r6, r0
 8001606:	b118      	cbz	r0, 8001610 <_vfiprintf_r+0x18>
 8001608:	6a03      	ldr	r3, [r0, #32]
 800160a:	b90b      	cbnz	r3, 8001610 <_vfiprintf_r+0x18>
 800160c:	f7ff ff4e 	bl	80014ac <__sinit>
 8001610:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001612:	07d9      	lsls	r1, r3, #31
 8001614:	d405      	bmi.n	8001622 <_vfiprintf_r+0x2a>
 8001616:	89ab      	ldrh	r3, [r5, #12]
 8001618:	059a      	lsls	r2, r3, #22
 800161a:	d402      	bmi.n	8001622 <_vfiprintf_r+0x2a>
 800161c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800161e:	f7ff ffc0 	bl	80015a2 <__retarget_lock_acquire_recursive>
 8001622:	89ab      	ldrh	r3, [r5, #12]
 8001624:	071b      	lsls	r3, r3, #28
 8001626:	d501      	bpl.n	800162c <_vfiprintf_r+0x34>
 8001628:	692b      	ldr	r3, [r5, #16]
 800162a:	b99b      	cbnz	r3, 8001654 <_vfiprintf_r+0x5c>
 800162c:	4629      	mov	r1, r5
 800162e:	4630      	mov	r0, r6
 8001630:	f000 fc62 	bl	8001ef8 <__swsetup_r>
 8001634:	b170      	cbz	r0, 8001654 <_vfiprintf_r+0x5c>
 8001636:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001638:	07dc      	lsls	r4, r3, #31
 800163a:	d504      	bpl.n	8001646 <_vfiprintf_r+0x4e>
 800163c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001640:	b01d      	add	sp, #116	@ 0x74
 8001642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001646:	89ab      	ldrh	r3, [r5, #12]
 8001648:	0598      	lsls	r0, r3, #22
 800164a:	d4f7      	bmi.n	800163c <_vfiprintf_r+0x44>
 800164c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800164e:	f7ff ffa9 	bl	80015a4 <__retarget_lock_release_recursive>
 8001652:	e7f3      	b.n	800163c <_vfiprintf_r+0x44>
 8001654:	2300      	movs	r3, #0
 8001656:	9309      	str	r3, [sp, #36]	@ 0x24
 8001658:	2320      	movs	r3, #32
 800165a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800165e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001662:	2330      	movs	r3, #48	@ 0x30
 8001664:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001814 <_vfiprintf_r+0x21c>
 8001668:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800166c:	f04f 0901 	mov.w	r9, #1
 8001670:	4623      	mov	r3, r4
 8001672:	469a      	mov	sl, r3
 8001674:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001678:	b10a      	cbz	r2, 800167e <_vfiprintf_r+0x86>
 800167a:	2a25      	cmp	r2, #37	@ 0x25
 800167c:	d1f9      	bne.n	8001672 <_vfiprintf_r+0x7a>
 800167e:	ebba 0b04 	subs.w	fp, sl, r4
 8001682:	d00b      	beq.n	800169c <_vfiprintf_r+0xa4>
 8001684:	465b      	mov	r3, fp
 8001686:	4622      	mov	r2, r4
 8001688:	4629      	mov	r1, r5
 800168a:	4630      	mov	r0, r6
 800168c:	f7ff ffa2 	bl	80015d4 <__sfputs_r>
 8001690:	3001      	adds	r0, #1
 8001692:	f000 80a7 	beq.w	80017e4 <_vfiprintf_r+0x1ec>
 8001696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001698:	445a      	add	r2, fp
 800169a:	9209      	str	r2, [sp, #36]	@ 0x24
 800169c:	f89a 3000 	ldrb.w	r3, [sl]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 809f 	beq.w	80017e4 <_vfiprintf_r+0x1ec>
 80016a6:	2300      	movs	r3, #0
 80016a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80016b0:	f10a 0a01 	add.w	sl, sl, #1
 80016b4:	9304      	str	r3, [sp, #16]
 80016b6:	9307      	str	r3, [sp, #28]
 80016b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80016bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80016be:	4654      	mov	r4, sl
 80016c0:	2205      	movs	r2, #5
 80016c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016c6:	4853      	ldr	r0, [pc, #332]	@ (8001814 <_vfiprintf_r+0x21c>)
 80016c8:	f7fe fd82 	bl	80001d0 <memchr>
 80016cc:	9a04      	ldr	r2, [sp, #16]
 80016ce:	b9d8      	cbnz	r0, 8001708 <_vfiprintf_r+0x110>
 80016d0:	06d1      	lsls	r1, r2, #27
 80016d2:	bf44      	itt	mi
 80016d4:	2320      	movmi	r3, #32
 80016d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80016da:	0713      	lsls	r3, r2, #28
 80016dc:	bf44      	itt	mi
 80016de:	232b      	movmi	r3, #43	@ 0x2b
 80016e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80016e4:	f89a 3000 	ldrb.w	r3, [sl]
 80016e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80016ea:	d015      	beq.n	8001718 <_vfiprintf_r+0x120>
 80016ec:	9a07      	ldr	r2, [sp, #28]
 80016ee:	4654      	mov	r4, sl
 80016f0:	2000      	movs	r0, #0
 80016f2:	f04f 0c0a 	mov.w	ip, #10
 80016f6:	4621      	mov	r1, r4
 80016f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80016fc:	3b30      	subs	r3, #48	@ 0x30
 80016fe:	2b09      	cmp	r3, #9
 8001700:	d94b      	bls.n	800179a <_vfiprintf_r+0x1a2>
 8001702:	b1b0      	cbz	r0, 8001732 <_vfiprintf_r+0x13a>
 8001704:	9207      	str	r2, [sp, #28]
 8001706:	e014      	b.n	8001732 <_vfiprintf_r+0x13a>
 8001708:	eba0 0308 	sub.w	r3, r0, r8
 800170c:	fa09 f303 	lsl.w	r3, r9, r3
 8001710:	4313      	orrs	r3, r2
 8001712:	9304      	str	r3, [sp, #16]
 8001714:	46a2      	mov	sl, r4
 8001716:	e7d2      	b.n	80016be <_vfiprintf_r+0xc6>
 8001718:	9b03      	ldr	r3, [sp, #12]
 800171a:	1d19      	adds	r1, r3, #4
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	9103      	str	r1, [sp, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	bfbb      	ittet	lt
 8001724:	425b      	neglt	r3, r3
 8001726:	f042 0202 	orrlt.w	r2, r2, #2
 800172a:	9307      	strge	r3, [sp, #28]
 800172c:	9307      	strlt	r3, [sp, #28]
 800172e:	bfb8      	it	lt
 8001730:	9204      	strlt	r2, [sp, #16]
 8001732:	7823      	ldrb	r3, [r4, #0]
 8001734:	2b2e      	cmp	r3, #46	@ 0x2e
 8001736:	d10a      	bne.n	800174e <_vfiprintf_r+0x156>
 8001738:	7863      	ldrb	r3, [r4, #1]
 800173a:	2b2a      	cmp	r3, #42	@ 0x2a
 800173c:	d132      	bne.n	80017a4 <_vfiprintf_r+0x1ac>
 800173e:	9b03      	ldr	r3, [sp, #12]
 8001740:	1d1a      	adds	r2, r3, #4
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	9203      	str	r2, [sp, #12]
 8001746:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800174a:	3402      	adds	r4, #2
 800174c:	9305      	str	r3, [sp, #20]
 800174e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001824 <_vfiprintf_r+0x22c>
 8001752:	7821      	ldrb	r1, [r4, #0]
 8001754:	2203      	movs	r2, #3
 8001756:	4650      	mov	r0, sl
 8001758:	f7fe fd3a 	bl	80001d0 <memchr>
 800175c:	b138      	cbz	r0, 800176e <_vfiprintf_r+0x176>
 800175e:	9b04      	ldr	r3, [sp, #16]
 8001760:	eba0 000a 	sub.w	r0, r0, sl
 8001764:	2240      	movs	r2, #64	@ 0x40
 8001766:	4082      	lsls	r2, r0
 8001768:	4313      	orrs	r3, r2
 800176a:	3401      	adds	r4, #1
 800176c:	9304      	str	r3, [sp, #16]
 800176e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001772:	4829      	ldr	r0, [pc, #164]	@ (8001818 <_vfiprintf_r+0x220>)
 8001774:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001778:	2206      	movs	r2, #6
 800177a:	f7fe fd29 	bl	80001d0 <memchr>
 800177e:	2800      	cmp	r0, #0
 8001780:	d03f      	beq.n	8001802 <_vfiprintf_r+0x20a>
 8001782:	4b26      	ldr	r3, [pc, #152]	@ (800181c <_vfiprintf_r+0x224>)
 8001784:	bb1b      	cbnz	r3, 80017ce <_vfiprintf_r+0x1d6>
 8001786:	9b03      	ldr	r3, [sp, #12]
 8001788:	3307      	adds	r3, #7
 800178a:	f023 0307 	bic.w	r3, r3, #7
 800178e:	3308      	adds	r3, #8
 8001790:	9303      	str	r3, [sp, #12]
 8001792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001794:	443b      	add	r3, r7
 8001796:	9309      	str	r3, [sp, #36]	@ 0x24
 8001798:	e76a      	b.n	8001670 <_vfiprintf_r+0x78>
 800179a:	fb0c 3202 	mla	r2, ip, r2, r3
 800179e:	460c      	mov	r4, r1
 80017a0:	2001      	movs	r0, #1
 80017a2:	e7a8      	b.n	80016f6 <_vfiprintf_r+0xfe>
 80017a4:	2300      	movs	r3, #0
 80017a6:	3401      	adds	r4, #1
 80017a8:	9305      	str	r3, [sp, #20]
 80017aa:	4619      	mov	r1, r3
 80017ac:	f04f 0c0a 	mov.w	ip, #10
 80017b0:	4620      	mov	r0, r4
 80017b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80017b6:	3a30      	subs	r2, #48	@ 0x30
 80017b8:	2a09      	cmp	r2, #9
 80017ba:	d903      	bls.n	80017c4 <_vfiprintf_r+0x1cc>
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0c6      	beq.n	800174e <_vfiprintf_r+0x156>
 80017c0:	9105      	str	r1, [sp, #20]
 80017c2:	e7c4      	b.n	800174e <_vfiprintf_r+0x156>
 80017c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80017c8:	4604      	mov	r4, r0
 80017ca:	2301      	movs	r3, #1
 80017cc:	e7f0      	b.n	80017b0 <_vfiprintf_r+0x1b8>
 80017ce:	ab03      	add	r3, sp, #12
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	462a      	mov	r2, r5
 80017d4:	4b12      	ldr	r3, [pc, #72]	@ (8001820 <_vfiprintf_r+0x228>)
 80017d6:	a904      	add	r1, sp, #16
 80017d8:	4630      	mov	r0, r6
 80017da:	f3af 8000 	nop.w
 80017de:	4607      	mov	r7, r0
 80017e0:	1c78      	adds	r0, r7, #1
 80017e2:	d1d6      	bne.n	8001792 <_vfiprintf_r+0x19a>
 80017e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80017e6:	07d9      	lsls	r1, r3, #31
 80017e8:	d405      	bmi.n	80017f6 <_vfiprintf_r+0x1fe>
 80017ea:	89ab      	ldrh	r3, [r5, #12]
 80017ec:	059a      	lsls	r2, r3, #22
 80017ee:	d402      	bmi.n	80017f6 <_vfiprintf_r+0x1fe>
 80017f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80017f2:	f7ff fed7 	bl	80015a4 <__retarget_lock_release_recursive>
 80017f6:	89ab      	ldrh	r3, [r5, #12]
 80017f8:	065b      	lsls	r3, r3, #25
 80017fa:	f53f af1f 	bmi.w	800163c <_vfiprintf_r+0x44>
 80017fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001800:	e71e      	b.n	8001640 <_vfiprintf_r+0x48>
 8001802:	ab03      	add	r3, sp, #12
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	462a      	mov	r2, r5
 8001808:	4b05      	ldr	r3, [pc, #20]	@ (8001820 <_vfiprintf_r+0x228>)
 800180a:	a904      	add	r1, sp, #16
 800180c:	4630      	mov	r0, r6
 800180e:	f000 f91b 	bl	8001a48 <_printf_i>
 8001812:	e7e4      	b.n	80017de <_vfiprintf_r+0x1e6>
 8001814:	08002214 	.word	0x08002214
 8001818:	0800221e 	.word	0x0800221e
 800181c:	00000000 	.word	0x00000000
 8001820:	080015d5 	.word	0x080015d5
 8001824:	0800221a 	.word	0x0800221a

08001828 <sbrk_aligned>:
 8001828:	b570      	push	{r4, r5, r6, lr}
 800182a:	4e0f      	ldr	r6, [pc, #60]	@ (8001868 <sbrk_aligned+0x40>)
 800182c:	460c      	mov	r4, r1
 800182e:	6831      	ldr	r1, [r6, #0]
 8001830:	4605      	mov	r5, r0
 8001832:	b911      	cbnz	r1, 800183a <sbrk_aligned+0x12>
 8001834:	f000 fc4c 	bl	80020d0 <_sbrk_r>
 8001838:	6030      	str	r0, [r6, #0]
 800183a:	4621      	mov	r1, r4
 800183c:	4628      	mov	r0, r5
 800183e:	f000 fc47 	bl	80020d0 <_sbrk_r>
 8001842:	1c43      	adds	r3, r0, #1
 8001844:	d103      	bne.n	800184e <sbrk_aligned+0x26>
 8001846:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800184a:	4620      	mov	r0, r4
 800184c:	bd70      	pop	{r4, r5, r6, pc}
 800184e:	1cc4      	adds	r4, r0, #3
 8001850:	f024 0403 	bic.w	r4, r4, #3
 8001854:	42a0      	cmp	r0, r4
 8001856:	d0f8      	beq.n	800184a <sbrk_aligned+0x22>
 8001858:	1a21      	subs	r1, r4, r0
 800185a:	4628      	mov	r0, r5
 800185c:	f000 fc38 	bl	80020d0 <_sbrk_r>
 8001860:	3001      	adds	r0, #1
 8001862:	d1f2      	bne.n	800184a <sbrk_aligned+0x22>
 8001864:	e7ef      	b.n	8001846 <sbrk_aligned+0x1e>
 8001866:	bf00      	nop
 8001868:	200003d8 	.word	0x200003d8

0800186c <_malloc_r>:
 800186c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001870:	1ccd      	adds	r5, r1, #3
 8001872:	f025 0503 	bic.w	r5, r5, #3
 8001876:	3508      	adds	r5, #8
 8001878:	2d0c      	cmp	r5, #12
 800187a:	bf38      	it	cc
 800187c:	250c      	movcc	r5, #12
 800187e:	2d00      	cmp	r5, #0
 8001880:	4606      	mov	r6, r0
 8001882:	db01      	blt.n	8001888 <_malloc_r+0x1c>
 8001884:	42a9      	cmp	r1, r5
 8001886:	d904      	bls.n	8001892 <_malloc_r+0x26>
 8001888:	230c      	movs	r3, #12
 800188a:	6033      	str	r3, [r6, #0]
 800188c:	2000      	movs	r0, #0
 800188e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001892:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001968 <_malloc_r+0xfc>
 8001896:	f000 faa1 	bl	8001ddc <__malloc_lock>
 800189a:	f8d8 3000 	ldr.w	r3, [r8]
 800189e:	461c      	mov	r4, r3
 80018a0:	bb44      	cbnz	r4, 80018f4 <_malloc_r+0x88>
 80018a2:	4629      	mov	r1, r5
 80018a4:	4630      	mov	r0, r6
 80018a6:	f7ff ffbf 	bl	8001828 <sbrk_aligned>
 80018aa:	1c43      	adds	r3, r0, #1
 80018ac:	4604      	mov	r4, r0
 80018ae:	d158      	bne.n	8001962 <_malloc_r+0xf6>
 80018b0:	f8d8 4000 	ldr.w	r4, [r8]
 80018b4:	4627      	mov	r7, r4
 80018b6:	2f00      	cmp	r7, #0
 80018b8:	d143      	bne.n	8001942 <_malloc_r+0xd6>
 80018ba:	2c00      	cmp	r4, #0
 80018bc:	d04b      	beq.n	8001956 <_malloc_r+0xea>
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	4639      	mov	r1, r7
 80018c2:	4630      	mov	r0, r6
 80018c4:	eb04 0903 	add.w	r9, r4, r3
 80018c8:	f000 fc02 	bl	80020d0 <_sbrk_r>
 80018cc:	4581      	cmp	r9, r0
 80018ce:	d142      	bne.n	8001956 <_malloc_r+0xea>
 80018d0:	6821      	ldr	r1, [r4, #0]
 80018d2:	1a6d      	subs	r5, r5, r1
 80018d4:	4629      	mov	r1, r5
 80018d6:	4630      	mov	r0, r6
 80018d8:	f7ff ffa6 	bl	8001828 <sbrk_aligned>
 80018dc:	3001      	adds	r0, #1
 80018de:	d03a      	beq.n	8001956 <_malloc_r+0xea>
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	442b      	add	r3, r5
 80018e4:	6023      	str	r3, [r4, #0]
 80018e6:	f8d8 3000 	ldr.w	r3, [r8]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	bb62      	cbnz	r2, 8001948 <_malloc_r+0xdc>
 80018ee:	f8c8 7000 	str.w	r7, [r8]
 80018f2:	e00f      	b.n	8001914 <_malloc_r+0xa8>
 80018f4:	6822      	ldr	r2, [r4, #0]
 80018f6:	1b52      	subs	r2, r2, r5
 80018f8:	d420      	bmi.n	800193c <_malloc_r+0xd0>
 80018fa:	2a0b      	cmp	r2, #11
 80018fc:	d917      	bls.n	800192e <_malloc_r+0xc2>
 80018fe:	1961      	adds	r1, r4, r5
 8001900:	42a3      	cmp	r3, r4
 8001902:	6025      	str	r5, [r4, #0]
 8001904:	bf18      	it	ne
 8001906:	6059      	strne	r1, [r3, #4]
 8001908:	6863      	ldr	r3, [r4, #4]
 800190a:	bf08      	it	eq
 800190c:	f8c8 1000 	streq.w	r1, [r8]
 8001910:	5162      	str	r2, [r4, r5]
 8001912:	604b      	str	r3, [r1, #4]
 8001914:	4630      	mov	r0, r6
 8001916:	f000 fa67 	bl	8001de8 <__malloc_unlock>
 800191a:	f104 000b 	add.w	r0, r4, #11
 800191e:	1d23      	adds	r3, r4, #4
 8001920:	f020 0007 	bic.w	r0, r0, #7
 8001924:	1ac2      	subs	r2, r0, r3
 8001926:	bf1c      	itt	ne
 8001928:	1a1b      	subne	r3, r3, r0
 800192a:	50a3      	strne	r3, [r4, r2]
 800192c:	e7af      	b.n	800188e <_malloc_r+0x22>
 800192e:	6862      	ldr	r2, [r4, #4]
 8001930:	42a3      	cmp	r3, r4
 8001932:	bf0c      	ite	eq
 8001934:	f8c8 2000 	streq.w	r2, [r8]
 8001938:	605a      	strne	r2, [r3, #4]
 800193a:	e7eb      	b.n	8001914 <_malloc_r+0xa8>
 800193c:	4623      	mov	r3, r4
 800193e:	6864      	ldr	r4, [r4, #4]
 8001940:	e7ae      	b.n	80018a0 <_malloc_r+0x34>
 8001942:	463c      	mov	r4, r7
 8001944:	687f      	ldr	r7, [r7, #4]
 8001946:	e7b6      	b.n	80018b6 <_malloc_r+0x4a>
 8001948:	461a      	mov	r2, r3
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	42a3      	cmp	r3, r4
 800194e:	d1fb      	bne.n	8001948 <_malloc_r+0xdc>
 8001950:	2300      	movs	r3, #0
 8001952:	6053      	str	r3, [r2, #4]
 8001954:	e7de      	b.n	8001914 <_malloc_r+0xa8>
 8001956:	230c      	movs	r3, #12
 8001958:	6033      	str	r3, [r6, #0]
 800195a:	4630      	mov	r0, r6
 800195c:	f000 fa44 	bl	8001de8 <__malloc_unlock>
 8001960:	e794      	b.n	800188c <_malloc_r+0x20>
 8001962:	6005      	str	r5, [r0, #0]
 8001964:	e7d6      	b.n	8001914 <_malloc_r+0xa8>
 8001966:	bf00      	nop
 8001968:	200003dc 	.word	0x200003dc

0800196c <_printf_common>:
 800196c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001970:	4616      	mov	r6, r2
 8001972:	4698      	mov	r8, r3
 8001974:	688a      	ldr	r2, [r1, #8]
 8001976:	690b      	ldr	r3, [r1, #16]
 8001978:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800197c:	4293      	cmp	r3, r2
 800197e:	bfb8      	it	lt
 8001980:	4613      	movlt	r3, r2
 8001982:	6033      	str	r3, [r6, #0]
 8001984:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001988:	4607      	mov	r7, r0
 800198a:	460c      	mov	r4, r1
 800198c:	b10a      	cbz	r2, 8001992 <_printf_common+0x26>
 800198e:	3301      	adds	r3, #1
 8001990:	6033      	str	r3, [r6, #0]
 8001992:	6823      	ldr	r3, [r4, #0]
 8001994:	0699      	lsls	r1, r3, #26
 8001996:	bf42      	ittt	mi
 8001998:	6833      	ldrmi	r3, [r6, #0]
 800199a:	3302      	addmi	r3, #2
 800199c:	6033      	strmi	r3, [r6, #0]
 800199e:	6825      	ldr	r5, [r4, #0]
 80019a0:	f015 0506 	ands.w	r5, r5, #6
 80019a4:	d106      	bne.n	80019b4 <_printf_common+0x48>
 80019a6:	f104 0a19 	add.w	sl, r4, #25
 80019aa:	68e3      	ldr	r3, [r4, #12]
 80019ac:	6832      	ldr	r2, [r6, #0]
 80019ae:	1a9b      	subs	r3, r3, r2
 80019b0:	42ab      	cmp	r3, r5
 80019b2:	dc26      	bgt.n	8001a02 <_printf_common+0x96>
 80019b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80019b8:	6822      	ldr	r2, [r4, #0]
 80019ba:	3b00      	subs	r3, #0
 80019bc:	bf18      	it	ne
 80019be:	2301      	movne	r3, #1
 80019c0:	0692      	lsls	r2, r2, #26
 80019c2:	d42b      	bmi.n	8001a1c <_printf_common+0xb0>
 80019c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80019c8:	4641      	mov	r1, r8
 80019ca:	4638      	mov	r0, r7
 80019cc:	47c8      	blx	r9
 80019ce:	3001      	adds	r0, #1
 80019d0:	d01e      	beq.n	8001a10 <_printf_common+0xa4>
 80019d2:	6823      	ldr	r3, [r4, #0]
 80019d4:	6922      	ldr	r2, [r4, #16]
 80019d6:	f003 0306 	and.w	r3, r3, #6
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf02      	ittt	eq
 80019de:	68e5      	ldreq	r5, [r4, #12]
 80019e0:	6833      	ldreq	r3, [r6, #0]
 80019e2:	1aed      	subeq	r5, r5, r3
 80019e4:	68a3      	ldr	r3, [r4, #8]
 80019e6:	bf0c      	ite	eq
 80019e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019ec:	2500      	movne	r5, #0
 80019ee:	4293      	cmp	r3, r2
 80019f0:	bfc4      	itt	gt
 80019f2:	1a9b      	subgt	r3, r3, r2
 80019f4:	18ed      	addgt	r5, r5, r3
 80019f6:	2600      	movs	r6, #0
 80019f8:	341a      	adds	r4, #26
 80019fa:	42b5      	cmp	r5, r6
 80019fc:	d11a      	bne.n	8001a34 <_printf_common+0xc8>
 80019fe:	2000      	movs	r0, #0
 8001a00:	e008      	b.n	8001a14 <_printf_common+0xa8>
 8001a02:	2301      	movs	r3, #1
 8001a04:	4652      	mov	r2, sl
 8001a06:	4641      	mov	r1, r8
 8001a08:	4638      	mov	r0, r7
 8001a0a:	47c8      	blx	r9
 8001a0c:	3001      	adds	r0, #1
 8001a0e:	d103      	bne.n	8001a18 <_printf_common+0xac>
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a18:	3501      	adds	r5, #1
 8001a1a:	e7c6      	b.n	80019aa <_printf_common+0x3e>
 8001a1c:	18e1      	adds	r1, r4, r3
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	2030      	movs	r0, #48	@ 0x30
 8001a22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001a26:	4422      	add	r2, r4
 8001a28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001a2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001a30:	3302      	adds	r3, #2
 8001a32:	e7c7      	b.n	80019c4 <_printf_common+0x58>
 8001a34:	2301      	movs	r3, #1
 8001a36:	4622      	mov	r2, r4
 8001a38:	4641      	mov	r1, r8
 8001a3a:	4638      	mov	r0, r7
 8001a3c:	47c8      	blx	r9
 8001a3e:	3001      	adds	r0, #1
 8001a40:	d0e6      	beq.n	8001a10 <_printf_common+0xa4>
 8001a42:	3601      	adds	r6, #1
 8001a44:	e7d9      	b.n	80019fa <_printf_common+0x8e>
	...

08001a48 <_printf_i>:
 8001a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a4c:	7e0f      	ldrb	r7, [r1, #24]
 8001a4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001a50:	2f78      	cmp	r7, #120	@ 0x78
 8001a52:	4691      	mov	r9, r2
 8001a54:	4680      	mov	r8, r0
 8001a56:	460c      	mov	r4, r1
 8001a58:	469a      	mov	sl, r3
 8001a5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001a5e:	d807      	bhi.n	8001a70 <_printf_i+0x28>
 8001a60:	2f62      	cmp	r7, #98	@ 0x62
 8001a62:	d80a      	bhi.n	8001a7a <_printf_i+0x32>
 8001a64:	2f00      	cmp	r7, #0
 8001a66:	f000 80d1 	beq.w	8001c0c <_printf_i+0x1c4>
 8001a6a:	2f58      	cmp	r7, #88	@ 0x58
 8001a6c:	f000 80b8 	beq.w	8001be0 <_printf_i+0x198>
 8001a70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001a74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001a78:	e03a      	b.n	8001af0 <_printf_i+0xa8>
 8001a7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001a7e:	2b15      	cmp	r3, #21
 8001a80:	d8f6      	bhi.n	8001a70 <_printf_i+0x28>
 8001a82:	a101      	add	r1, pc, #4	@ (adr r1, 8001a88 <_printf_i+0x40>)
 8001a84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a88:	08001ae1 	.word	0x08001ae1
 8001a8c:	08001af5 	.word	0x08001af5
 8001a90:	08001a71 	.word	0x08001a71
 8001a94:	08001a71 	.word	0x08001a71
 8001a98:	08001a71 	.word	0x08001a71
 8001a9c:	08001a71 	.word	0x08001a71
 8001aa0:	08001af5 	.word	0x08001af5
 8001aa4:	08001a71 	.word	0x08001a71
 8001aa8:	08001a71 	.word	0x08001a71
 8001aac:	08001a71 	.word	0x08001a71
 8001ab0:	08001a71 	.word	0x08001a71
 8001ab4:	08001bf3 	.word	0x08001bf3
 8001ab8:	08001b1f 	.word	0x08001b1f
 8001abc:	08001bad 	.word	0x08001bad
 8001ac0:	08001a71 	.word	0x08001a71
 8001ac4:	08001a71 	.word	0x08001a71
 8001ac8:	08001c15 	.word	0x08001c15
 8001acc:	08001a71 	.word	0x08001a71
 8001ad0:	08001b1f 	.word	0x08001b1f
 8001ad4:	08001a71 	.word	0x08001a71
 8001ad8:	08001a71 	.word	0x08001a71
 8001adc:	08001bb5 	.word	0x08001bb5
 8001ae0:	6833      	ldr	r3, [r6, #0]
 8001ae2:	1d1a      	adds	r2, r3, #4
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6032      	str	r2, [r6, #0]
 8001ae8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001aec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001af0:	2301      	movs	r3, #1
 8001af2:	e09c      	b.n	8001c2e <_printf_i+0x1e6>
 8001af4:	6833      	ldr	r3, [r6, #0]
 8001af6:	6820      	ldr	r0, [r4, #0]
 8001af8:	1d19      	adds	r1, r3, #4
 8001afa:	6031      	str	r1, [r6, #0]
 8001afc:	0606      	lsls	r6, r0, #24
 8001afe:	d501      	bpl.n	8001b04 <_printf_i+0xbc>
 8001b00:	681d      	ldr	r5, [r3, #0]
 8001b02:	e003      	b.n	8001b0c <_printf_i+0xc4>
 8001b04:	0645      	lsls	r5, r0, #25
 8001b06:	d5fb      	bpl.n	8001b00 <_printf_i+0xb8>
 8001b08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001b0c:	2d00      	cmp	r5, #0
 8001b0e:	da03      	bge.n	8001b18 <_printf_i+0xd0>
 8001b10:	232d      	movs	r3, #45	@ 0x2d
 8001b12:	426d      	negs	r5, r5
 8001b14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001b18:	4858      	ldr	r0, [pc, #352]	@ (8001c7c <_printf_i+0x234>)
 8001b1a:	230a      	movs	r3, #10
 8001b1c:	e011      	b.n	8001b42 <_printf_i+0xfa>
 8001b1e:	6821      	ldr	r1, [r4, #0]
 8001b20:	6833      	ldr	r3, [r6, #0]
 8001b22:	0608      	lsls	r0, r1, #24
 8001b24:	f853 5b04 	ldr.w	r5, [r3], #4
 8001b28:	d402      	bmi.n	8001b30 <_printf_i+0xe8>
 8001b2a:	0649      	lsls	r1, r1, #25
 8001b2c:	bf48      	it	mi
 8001b2e:	b2ad      	uxthmi	r5, r5
 8001b30:	2f6f      	cmp	r7, #111	@ 0x6f
 8001b32:	4852      	ldr	r0, [pc, #328]	@ (8001c7c <_printf_i+0x234>)
 8001b34:	6033      	str	r3, [r6, #0]
 8001b36:	bf14      	ite	ne
 8001b38:	230a      	movne	r3, #10
 8001b3a:	2308      	moveq	r3, #8
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001b42:	6866      	ldr	r6, [r4, #4]
 8001b44:	60a6      	str	r6, [r4, #8]
 8001b46:	2e00      	cmp	r6, #0
 8001b48:	db05      	blt.n	8001b56 <_printf_i+0x10e>
 8001b4a:	6821      	ldr	r1, [r4, #0]
 8001b4c:	432e      	orrs	r6, r5
 8001b4e:	f021 0104 	bic.w	r1, r1, #4
 8001b52:	6021      	str	r1, [r4, #0]
 8001b54:	d04b      	beq.n	8001bee <_printf_i+0x1a6>
 8001b56:	4616      	mov	r6, r2
 8001b58:	fbb5 f1f3 	udiv	r1, r5, r3
 8001b5c:	fb03 5711 	mls	r7, r3, r1, r5
 8001b60:	5dc7      	ldrb	r7, [r0, r7]
 8001b62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001b66:	462f      	mov	r7, r5
 8001b68:	42bb      	cmp	r3, r7
 8001b6a:	460d      	mov	r5, r1
 8001b6c:	d9f4      	bls.n	8001b58 <_printf_i+0x110>
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d10b      	bne.n	8001b8a <_printf_i+0x142>
 8001b72:	6823      	ldr	r3, [r4, #0]
 8001b74:	07df      	lsls	r7, r3, #31
 8001b76:	d508      	bpl.n	8001b8a <_printf_i+0x142>
 8001b78:	6923      	ldr	r3, [r4, #16]
 8001b7a:	6861      	ldr	r1, [r4, #4]
 8001b7c:	4299      	cmp	r1, r3
 8001b7e:	bfde      	ittt	le
 8001b80:	2330      	movle	r3, #48	@ 0x30
 8001b82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001b86:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001b8a:	1b92      	subs	r2, r2, r6
 8001b8c:	6122      	str	r2, [r4, #16]
 8001b8e:	f8cd a000 	str.w	sl, [sp]
 8001b92:	464b      	mov	r3, r9
 8001b94:	aa03      	add	r2, sp, #12
 8001b96:	4621      	mov	r1, r4
 8001b98:	4640      	mov	r0, r8
 8001b9a:	f7ff fee7 	bl	800196c <_printf_common>
 8001b9e:	3001      	adds	r0, #1
 8001ba0:	d14a      	bne.n	8001c38 <_printf_i+0x1f0>
 8001ba2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ba6:	b004      	add	sp, #16
 8001ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bac:	6823      	ldr	r3, [r4, #0]
 8001bae:	f043 0320 	orr.w	r3, r3, #32
 8001bb2:	6023      	str	r3, [r4, #0]
 8001bb4:	4832      	ldr	r0, [pc, #200]	@ (8001c80 <_printf_i+0x238>)
 8001bb6:	2778      	movs	r7, #120	@ 0x78
 8001bb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001bbc:	6823      	ldr	r3, [r4, #0]
 8001bbe:	6831      	ldr	r1, [r6, #0]
 8001bc0:	061f      	lsls	r7, r3, #24
 8001bc2:	f851 5b04 	ldr.w	r5, [r1], #4
 8001bc6:	d402      	bmi.n	8001bce <_printf_i+0x186>
 8001bc8:	065f      	lsls	r7, r3, #25
 8001bca:	bf48      	it	mi
 8001bcc:	b2ad      	uxthmi	r5, r5
 8001bce:	6031      	str	r1, [r6, #0]
 8001bd0:	07d9      	lsls	r1, r3, #31
 8001bd2:	bf44      	itt	mi
 8001bd4:	f043 0320 	orrmi.w	r3, r3, #32
 8001bd8:	6023      	strmi	r3, [r4, #0]
 8001bda:	b11d      	cbz	r5, 8001be4 <_printf_i+0x19c>
 8001bdc:	2310      	movs	r3, #16
 8001bde:	e7ad      	b.n	8001b3c <_printf_i+0xf4>
 8001be0:	4826      	ldr	r0, [pc, #152]	@ (8001c7c <_printf_i+0x234>)
 8001be2:	e7e9      	b.n	8001bb8 <_printf_i+0x170>
 8001be4:	6823      	ldr	r3, [r4, #0]
 8001be6:	f023 0320 	bic.w	r3, r3, #32
 8001bea:	6023      	str	r3, [r4, #0]
 8001bec:	e7f6      	b.n	8001bdc <_printf_i+0x194>
 8001bee:	4616      	mov	r6, r2
 8001bf0:	e7bd      	b.n	8001b6e <_printf_i+0x126>
 8001bf2:	6833      	ldr	r3, [r6, #0]
 8001bf4:	6825      	ldr	r5, [r4, #0]
 8001bf6:	6961      	ldr	r1, [r4, #20]
 8001bf8:	1d18      	adds	r0, r3, #4
 8001bfa:	6030      	str	r0, [r6, #0]
 8001bfc:	062e      	lsls	r6, r5, #24
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	d501      	bpl.n	8001c06 <_printf_i+0x1be>
 8001c02:	6019      	str	r1, [r3, #0]
 8001c04:	e002      	b.n	8001c0c <_printf_i+0x1c4>
 8001c06:	0668      	lsls	r0, r5, #25
 8001c08:	d5fb      	bpl.n	8001c02 <_printf_i+0x1ba>
 8001c0a:	8019      	strh	r1, [r3, #0]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	6123      	str	r3, [r4, #16]
 8001c10:	4616      	mov	r6, r2
 8001c12:	e7bc      	b.n	8001b8e <_printf_i+0x146>
 8001c14:	6833      	ldr	r3, [r6, #0]
 8001c16:	1d1a      	adds	r2, r3, #4
 8001c18:	6032      	str	r2, [r6, #0]
 8001c1a:	681e      	ldr	r6, [r3, #0]
 8001c1c:	6862      	ldr	r2, [r4, #4]
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4630      	mov	r0, r6
 8001c22:	f7fe fad5 	bl	80001d0 <memchr>
 8001c26:	b108      	cbz	r0, 8001c2c <_printf_i+0x1e4>
 8001c28:	1b80      	subs	r0, r0, r6
 8001c2a:	6060      	str	r0, [r4, #4]
 8001c2c:	6863      	ldr	r3, [r4, #4]
 8001c2e:	6123      	str	r3, [r4, #16]
 8001c30:	2300      	movs	r3, #0
 8001c32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c36:	e7aa      	b.n	8001b8e <_printf_i+0x146>
 8001c38:	6923      	ldr	r3, [r4, #16]
 8001c3a:	4632      	mov	r2, r6
 8001c3c:	4649      	mov	r1, r9
 8001c3e:	4640      	mov	r0, r8
 8001c40:	47d0      	blx	sl
 8001c42:	3001      	adds	r0, #1
 8001c44:	d0ad      	beq.n	8001ba2 <_printf_i+0x15a>
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	079b      	lsls	r3, r3, #30
 8001c4a:	d413      	bmi.n	8001c74 <_printf_i+0x22c>
 8001c4c:	68e0      	ldr	r0, [r4, #12]
 8001c4e:	9b03      	ldr	r3, [sp, #12]
 8001c50:	4298      	cmp	r0, r3
 8001c52:	bfb8      	it	lt
 8001c54:	4618      	movlt	r0, r3
 8001c56:	e7a6      	b.n	8001ba6 <_printf_i+0x15e>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	4632      	mov	r2, r6
 8001c5c:	4649      	mov	r1, r9
 8001c5e:	4640      	mov	r0, r8
 8001c60:	47d0      	blx	sl
 8001c62:	3001      	adds	r0, #1
 8001c64:	d09d      	beq.n	8001ba2 <_printf_i+0x15a>
 8001c66:	3501      	adds	r5, #1
 8001c68:	68e3      	ldr	r3, [r4, #12]
 8001c6a:	9903      	ldr	r1, [sp, #12]
 8001c6c:	1a5b      	subs	r3, r3, r1
 8001c6e:	42ab      	cmp	r3, r5
 8001c70:	dcf2      	bgt.n	8001c58 <_printf_i+0x210>
 8001c72:	e7eb      	b.n	8001c4c <_printf_i+0x204>
 8001c74:	2500      	movs	r5, #0
 8001c76:	f104 0619 	add.w	r6, r4, #25
 8001c7a:	e7f5      	b.n	8001c68 <_printf_i+0x220>
 8001c7c:	08002225 	.word	0x08002225
 8001c80:	08002236 	.word	0x08002236

08001c84 <__sflush_r>:
 8001c84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c8c:	0716      	lsls	r6, r2, #28
 8001c8e:	4605      	mov	r5, r0
 8001c90:	460c      	mov	r4, r1
 8001c92:	d454      	bmi.n	8001d3e <__sflush_r+0xba>
 8001c94:	684b      	ldr	r3, [r1, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	dc02      	bgt.n	8001ca0 <__sflush_r+0x1c>
 8001c9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	dd48      	ble.n	8001d32 <__sflush_r+0xae>
 8001ca0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001ca2:	2e00      	cmp	r6, #0
 8001ca4:	d045      	beq.n	8001d32 <__sflush_r+0xae>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001cac:	682f      	ldr	r7, [r5, #0]
 8001cae:	6a21      	ldr	r1, [r4, #32]
 8001cb0:	602b      	str	r3, [r5, #0]
 8001cb2:	d030      	beq.n	8001d16 <__sflush_r+0x92>
 8001cb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001cb6:	89a3      	ldrh	r3, [r4, #12]
 8001cb8:	0759      	lsls	r1, r3, #29
 8001cba:	d505      	bpl.n	8001cc8 <__sflush_r+0x44>
 8001cbc:	6863      	ldr	r3, [r4, #4]
 8001cbe:	1ad2      	subs	r2, r2, r3
 8001cc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001cc2:	b10b      	cbz	r3, 8001cc8 <__sflush_r+0x44>
 8001cc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001cc6:	1ad2      	subs	r2, r2, r3
 8001cc8:	2300      	movs	r3, #0
 8001cca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001ccc:	6a21      	ldr	r1, [r4, #32]
 8001cce:	4628      	mov	r0, r5
 8001cd0:	47b0      	blx	r6
 8001cd2:	1c43      	adds	r3, r0, #1
 8001cd4:	89a3      	ldrh	r3, [r4, #12]
 8001cd6:	d106      	bne.n	8001ce6 <__sflush_r+0x62>
 8001cd8:	6829      	ldr	r1, [r5, #0]
 8001cda:	291d      	cmp	r1, #29
 8001cdc:	d82b      	bhi.n	8001d36 <__sflush_r+0xb2>
 8001cde:	4a2a      	ldr	r2, [pc, #168]	@ (8001d88 <__sflush_r+0x104>)
 8001ce0:	40ca      	lsrs	r2, r1
 8001ce2:	07d6      	lsls	r6, r2, #31
 8001ce4:	d527      	bpl.n	8001d36 <__sflush_r+0xb2>
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	6062      	str	r2, [r4, #4]
 8001cea:	04d9      	lsls	r1, r3, #19
 8001cec:	6922      	ldr	r2, [r4, #16]
 8001cee:	6022      	str	r2, [r4, #0]
 8001cf0:	d504      	bpl.n	8001cfc <__sflush_r+0x78>
 8001cf2:	1c42      	adds	r2, r0, #1
 8001cf4:	d101      	bne.n	8001cfa <__sflush_r+0x76>
 8001cf6:	682b      	ldr	r3, [r5, #0]
 8001cf8:	b903      	cbnz	r3, 8001cfc <__sflush_r+0x78>
 8001cfa:	6560      	str	r0, [r4, #84]	@ 0x54
 8001cfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001cfe:	602f      	str	r7, [r5, #0]
 8001d00:	b1b9      	cbz	r1, 8001d32 <__sflush_r+0xae>
 8001d02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001d06:	4299      	cmp	r1, r3
 8001d08:	d002      	beq.n	8001d10 <__sflush_r+0x8c>
 8001d0a:	4628      	mov	r0, r5
 8001d0c:	f000 fa24 	bl	8002158 <_free_r>
 8001d10:	2300      	movs	r3, #0
 8001d12:	6363      	str	r3, [r4, #52]	@ 0x34
 8001d14:	e00d      	b.n	8001d32 <__sflush_r+0xae>
 8001d16:	2301      	movs	r3, #1
 8001d18:	4628      	mov	r0, r5
 8001d1a:	47b0      	blx	r6
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	1c50      	adds	r0, r2, #1
 8001d20:	d1c9      	bne.n	8001cb6 <__sflush_r+0x32>
 8001d22:	682b      	ldr	r3, [r5, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0c6      	beq.n	8001cb6 <__sflush_r+0x32>
 8001d28:	2b1d      	cmp	r3, #29
 8001d2a:	d001      	beq.n	8001d30 <__sflush_r+0xac>
 8001d2c:	2b16      	cmp	r3, #22
 8001d2e:	d11e      	bne.n	8001d6e <__sflush_r+0xea>
 8001d30:	602f      	str	r7, [r5, #0]
 8001d32:	2000      	movs	r0, #0
 8001d34:	e022      	b.n	8001d7c <__sflush_r+0xf8>
 8001d36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d3a:	b21b      	sxth	r3, r3
 8001d3c:	e01b      	b.n	8001d76 <__sflush_r+0xf2>
 8001d3e:	690f      	ldr	r7, [r1, #16]
 8001d40:	2f00      	cmp	r7, #0
 8001d42:	d0f6      	beq.n	8001d32 <__sflush_r+0xae>
 8001d44:	0793      	lsls	r3, r2, #30
 8001d46:	680e      	ldr	r6, [r1, #0]
 8001d48:	bf08      	it	eq
 8001d4a:	694b      	ldreq	r3, [r1, #20]
 8001d4c:	600f      	str	r7, [r1, #0]
 8001d4e:	bf18      	it	ne
 8001d50:	2300      	movne	r3, #0
 8001d52:	eba6 0807 	sub.w	r8, r6, r7
 8001d56:	608b      	str	r3, [r1, #8]
 8001d58:	f1b8 0f00 	cmp.w	r8, #0
 8001d5c:	dde9      	ble.n	8001d32 <__sflush_r+0xae>
 8001d5e:	6a21      	ldr	r1, [r4, #32]
 8001d60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001d62:	4643      	mov	r3, r8
 8001d64:	463a      	mov	r2, r7
 8001d66:	4628      	mov	r0, r5
 8001d68:	47b0      	blx	r6
 8001d6a:	2800      	cmp	r0, #0
 8001d6c:	dc08      	bgt.n	8001d80 <__sflush_r+0xfc>
 8001d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d76:	81a3      	strh	r3, [r4, #12]
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d80:	4407      	add	r7, r0
 8001d82:	eba8 0800 	sub.w	r8, r8, r0
 8001d86:	e7e7      	b.n	8001d58 <__sflush_r+0xd4>
 8001d88:	20400001 	.word	0x20400001

08001d8c <_fflush_r>:
 8001d8c:	b538      	push	{r3, r4, r5, lr}
 8001d8e:	690b      	ldr	r3, [r1, #16]
 8001d90:	4605      	mov	r5, r0
 8001d92:	460c      	mov	r4, r1
 8001d94:	b913      	cbnz	r3, 8001d9c <_fflush_r+0x10>
 8001d96:	2500      	movs	r5, #0
 8001d98:	4628      	mov	r0, r5
 8001d9a:	bd38      	pop	{r3, r4, r5, pc}
 8001d9c:	b118      	cbz	r0, 8001da6 <_fflush_r+0x1a>
 8001d9e:	6a03      	ldr	r3, [r0, #32]
 8001da0:	b90b      	cbnz	r3, 8001da6 <_fflush_r+0x1a>
 8001da2:	f7ff fb83 	bl	80014ac <__sinit>
 8001da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f3      	beq.n	8001d96 <_fflush_r+0xa>
 8001dae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001db0:	07d0      	lsls	r0, r2, #31
 8001db2:	d404      	bmi.n	8001dbe <_fflush_r+0x32>
 8001db4:	0599      	lsls	r1, r3, #22
 8001db6:	d402      	bmi.n	8001dbe <_fflush_r+0x32>
 8001db8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001dba:	f7ff fbf2 	bl	80015a2 <__retarget_lock_acquire_recursive>
 8001dbe:	4628      	mov	r0, r5
 8001dc0:	4621      	mov	r1, r4
 8001dc2:	f7ff ff5f 	bl	8001c84 <__sflush_r>
 8001dc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001dc8:	07da      	lsls	r2, r3, #31
 8001dca:	4605      	mov	r5, r0
 8001dcc:	d4e4      	bmi.n	8001d98 <_fflush_r+0xc>
 8001dce:	89a3      	ldrh	r3, [r4, #12]
 8001dd0:	059b      	lsls	r3, r3, #22
 8001dd2:	d4e1      	bmi.n	8001d98 <_fflush_r+0xc>
 8001dd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001dd6:	f7ff fbe5 	bl	80015a4 <__retarget_lock_release_recursive>
 8001dda:	e7dd      	b.n	8001d98 <_fflush_r+0xc>

08001ddc <__malloc_lock>:
 8001ddc:	4801      	ldr	r0, [pc, #4]	@ (8001de4 <__malloc_lock+0x8>)
 8001dde:	f7ff bbe0 	b.w	80015a2 <__retarget_lock_acquire_recursive>
 8001de2:	bf00      	nop
 8001de4:	200003d4 	.word	0x200003d4

08001de8 <__malloc_unlock>:
 8001de8:	4801      	ldr	r0, [pc, #4]	@ (8001df0 <__malloc_unlock+0x8>)
 8001dea:	f7ff bbdb 	b.w	80015a4 <__retarget_lock_release_recursive>
 8001dee:	bf00      	nop
 8001df0:	200003d4 	.word	0x200003d4

08001df4 <__sread>:
 8001df4:	b510      	push	{r4, lr}
 8001df6:	460c      	mov	r4, r1
 8001df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dfc:	f000 f956 	bl	80020ac <_read_r>
 8001e00:	2800      	cmp	r0, #0
 8001e02:	bfab      	itete	ge
 8001e04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001e06:	89a3      	ldrhlt	r3, [r4, #12]
 8001e08:	181b      	addge	r3, r3, r0
 8001e0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001e0e:	bfac      	ite	ge
 8001e10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001e12:	81a3      	strhlt	r3, [r4, #12]
 8001e14:	bd10      	pop	{r4, pc}

08001e16 <__swrite>:
 8001e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e1a:	461f      	mov	r7, r3
 8001e1c:	898b      	ldrh	r3, [r1, #12]
 8001e1e:	05db      	lsls	r3, r3, #23
 8001e20:	4605      	mov	r5, r0
 8001e22:	460c      	mov	r4, r1
 8001e24:	4616      	mov	r6, r2
 8001e26:	d505      	bpl.n	8001e34 <__swrite+0x1e>
 8001e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f000 f92a 	bl	8002088 <_lseek_r>
 8001e34:	89a3      	ldrh	r3, [r4, #12]
 8001e36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e3e:	81a3      	strh	r3, [r4, #12]
 8001e40:	4632      	mov	r2, r6
 8001e42:	463b      	mov	r3, r7
 8001e44:	4628      	mov	r0, r5
 8001e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e4a:	f000 b951 	b.w	80020f0 <_write_r>

08001e4e <__sseek>:
 8001e4e:	b510      	push	{r4, lr}
 8001e50:	460c      	mov	r4, r1
 8001e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e56:	f000 f917 	bl	8002088 <_lseek_r>
 8001e5a:	1c43      	adds	r3, r0, #1
 8001e5c:	89a3      	ldrh	r3, [r4, #12]
 8001e5e:	bf15      	itete	ne
 8001e60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001e62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001e66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001e6a:	81a3      	strheq	r3, [r4, #12]
 8001e6c:	bf18      	it	ne
 8001e6e:	81a3      	strhne	r3, [r4, #12]
 8001e70:	bd10      	pop	{r4, pc}

08001e72 <__sclose>:
 8001e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e76:	f000 b94d 	b.w	8002114 <_close_r>

08001e7a <__swbuf_r>:
 8001e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e7c:	460e      	mov	r6, r1
 8001e7e:	4614      	mov	r4, r2
 8001e80:	4605      	mov	r5, r0
 8001e82:	b118      	cbz	r0, 8001e8c <__swbuf_r+0x12>
 8001e84:	6a03      	ldr	r3, [r0, #32]
 8001e86:	b90b      	cbnz	r3, 8001e8c <__swbuf_r+0x12>
 8001e88:	f7ff fb10 	bl	80014ac <__sinit>
 8001e8c:	69a3      	ldr	r3, [r4, #24]
 8001e8e:	60a3      	str	r3, [r4, #8]
 8001e90:	89a3      	ldrh	r3, [r4, #12]
 8001e92:	071a      	lsls	r2, r3, #28
 8001e94:	d501      	bpl.n	8001e9a <__swbuf_r+0x20>
 8001e96:	6923      	ldr	r3, [r4, #16]
 8001e98:	b943      	cbnz	r3, 8001eac <__swbuf_r+0x32>
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	4628      	mov	r0, r5
 8001e9e:	f000 f82b 	bl	8001ef8 <__swsetup_r>
 8001ea2:	b118      	cbz	r0, 8001eac <__swbuf_r+0x32>
 8001ea4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001ea8:	4638      	mov	r0, r7
 8001eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001eac:	6823      	ldr	r3, [r4, #0]
 8001eae:	6922      	ldr	r2, [r4, #16]
 8001eb0:	1a98      	subs	r0, r3, r2
 8001eb2:	6963      	ldr	r3, [r4, #20]
 8001eb4:	b2f6      	uxtb	r6, r6
 8001eb6:	4283      	cmp	r3, r0
 8001eb8:	4637      	mov	r7, r6
 8001eba:	dc05      	bgt.n	8001ec8 <__swbuf_r+0x4e>
 8001ebc:	4621      	mov	r1, r4
 8001ebe:	4628      	mov	r0, r5
 8001ec0:	f7ff ff64 	bl	8001d8c <_fflush_r>
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	d1ed      	bne.n	8001ea4 <__swbuf_r+0x2a>
 8001ec8:	68a3      	ldr	r3, [r4, #8]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	60a3      	str	r3, [r4, #8]
 8001ece:	6823      	ldr	r3, [r4, #0]
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	6022      	str	r2, [r4, #0]
 8001ed4:	701e      	strb	r6, [r3, #0]
 8001ed6:	6962      	ldr	r2, [r4, #20]
 8001ed8:	1c43      	adds	r3, r0, #1
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d004      	beq.n	8001ee8 <__swbuf_r+0x6e>
 8001ede:	89a3      	ldrh	r3, [r4, #12]
 8001ee0:	07db      	lsls	r3, r3, #31
 8001ee2:	d5e1      	bpl.n	8001ea8 <__swbuf_r+0x2e>
 8001ee4:	2e0a      	cmp	r6, #10
 8001ee6:	d1df      	bne.n	8001ea8 <__swbuf_r+0x2e>
 8001ee8:	4621      	mov	r1, r4
 8001eea:	4628      	mov	r0, r5
 8001eec:	f7ff ff4e 	bl	8001d8c <_fflush_r>
 8001ef0:	2800      	cmp	r0, #0
 8001ef2:	d0d9      	beq.n	8001ea8 <__swbuf_r+0x2e>
 8001ef4:	e7d6      	b.n	8001ea4 <__swbuf_r+0x2a>
	...

08001ef8 <__swsetup_r>:
 8001ef8:	b538      	push	{r3, r4, r5, lr}
 8001efa:	4b29      	ldr	r3, [pc, #164]	@ (8001fa0 <__swsetup_r+0xa8>)
 8001efc:	4605      	mov	r5, r0
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	460c      	mov	r4, r1
 8001f02:	b118      	cbz	r0, 8001f0c <__swsetup_r+0x14>
 8001f04:	6a03      	ldr	r3, [r0, #32]
 8001f06:	b90b      	cbnz	r3, 8001f0c <__swsetup_r+0x14>
 8001f08:	f7ff fad0 	bl	80014ac <__sinit>
 8001f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f10:	0719      	lsls	r1, r3, #28
 8001f12:	d422      	bmi.n	8001f5a <__swsetup_r+0x62>
 8001f14:	06da      	lsls	r2, r3, #27
 8001f16:	d407      	bmi.n	8001f28 <__swsetup_r+0x30>
 8001f18:	2209      	movs	r2, #9
 8001f1a:	602a      	str	r2, [r5, #0]
 8001f1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f20:	81a3      	strh	r3, [r4, #12]
 8001f22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f26:	e033      	b.n	8001f90 <__swsetup_r+0x98>
 8001f28:	0758      	lsls	r0, r3, #29
 8001f2a:	d512      	bpl.n	8001f52 <__swsetup_r+0x5a>
 8001f2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001f2e:	b141      	cbz	r1, 8001f42 <__swsetup_r+0x4a>
 8001f30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001f34:	4299      	cmp	r1, r3
 8001f36:	d002      	beq.n	8001f3e <__swsetup_r+0x46>
 8001f38:	4628      	mov	r0, r5
 8001f3a:	f000 f90d 	bl	8002158 <_free_r>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	6363      	str	r3, [r4, #52]	@ 0x34
 8001f42:	89a3      	ldrh	r3, [r4, #12]
 8001f44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001f48:	81a3      	strh	r3, [r4, #12]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	6063      	str	r3, [r4, #4]
 8001f4e:	6923      	ldr	r3, [r4, #16]
 8001f50:	6023      	str	r3, [r4, #0]
 8001f52:	89a3      	ldrh	r3, [r4, #12]
 8001f54:	f043 0308 	orr.w	r3, r3, #8
 8001f58:	81a3      	strh	r3, [r4, #12]
 8001f5a:	6923      	ldr	r3, [r4, #16]
 8001f5c:	b94b      	cbnz	r3, 8001f72 <__swsetup_r+0x7a>
 8001f5e:	89a3      	ldrh	r3, [r4, #12]
 8001f60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f68:	d003      	beq.n	8001f72 <__swsetup_r+0x7a>
 8001f6a:	4621      	mov	r1, r4
 8001f6c:	4628      	mov	r0, r5
 8001f6e:	f000 f83f 	bl	8001ff0 <__smakebuf_r>
 8001f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f76:	f013 0201 	ands.w	r2, r3, #1
 8001f7a:	d00a      	beq.n	8001f92 <__swsetup_r+0x9a>
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	60a2      	str	r2, [r4, #8]
 8001f80:	6962      	ldr	r2, [r4, #20]
 8001f82:	4252      	negs	r2, r2
 8001f84:	61a2      	str	r2, [r4, #24]
 8001f86:	6922      	ldr	r2, [r4, #16]
 8001f88:	b942      	cbnz	r2, 8001f9c <__swsetup_r+0xa4>
 8001f8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001f8e:	d1c5      	bne.n	8001f1c <__swsetup_r+0x24>
 8001f90:	bd38      	pop	{r3, r4, r5, pc}
 8001f92:	0799      	lsls	r1, r3, #30
 8001f94:	bf58      	it	pl
 8001f96:	6962      	ldrpl	r2, [r4, #20]
 8001f98:	60a2      	str	r2, [r4, #8]
 8001f9a:	e7f4      	b.n	8001f86 <__swsetup_r+0x8e>
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	e7f7      	b.n	8001f90 <__swsetup_r+0x98>
 8001fa0:	2000000c 	.word	0x2000000c

08001fa4 <__swhatbuf_r>:
 8001fa4:	b570      	push	{r4, r5, r6, lr}
 8001fa6:	460c      	mov	r4, r1
 8001fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fac:	2900      	cmp	r1, #0
 8001fae:	b096      	sub	sp, #88	@ 0x58
 8001fb0:	4615      	mov	r5, r2
 8001fb2:	461e      	mov	r6, r3
 8001fb4:	da0d      	bge.n	8001fd2 <__swhatbuf_r+0x2e>
 8001fb6:	89a3      	ldrh	r3, [r4, #12]
 8001fb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001fbc:	f04f 0100 	mov.w	r1, #0
 8001fc0:	bf14      	ite	ne
 8001fc2:	2340      	movne	r3, #64	@ 0x40
 8001fc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001fc8:	2000      	movs	r0, #0
 8001fca:	6031      	str	r1, [r6, #0]
 8001fcc:	602b      	str	r3, [r5, #0]
 8001fce:	b016      	add	sp, #88	@ 0x58
 8001fd0:	bd70      	pop	{r4, r5, r6, pc}
 8001fd2:	466a      	mov	r2, sp
 8001fd4:	f000 f8ae 	bl	8002134 <_fstat_r>
 8001fd8:	2800      	cmp	r0, #0
 8001fda:	dbec      	blt.n	8001fb6 <__swhatbuf_r+0x12>
 8001fdc:	9901      	ldr	r1, [sp, #4]
 8001fde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001fe2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001fe6:	4259      	negs	r1, r3
 8001fe8:	4159      	adcs	r1, r3
 8001fea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fee:	e7eb      	b.n	8001fc8 <__swhatbuf_r+0x24>

08001ff0 <__smakebuf_r>:
 8001ff0:	898b      	ldrh	r3, [r1, #12]
 8001ff2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ff4:	079d      	lsls	r5, r3, #30
 8001ff6:	4606      	mov	r6, r0
 8001ff8:	460c      	mov	r4, r1
 8001ffa:	d507      	bpl.n	800200c <__smakebuf_r+0x1c>
 8001ffc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002000:	6023      	str	r3, [r4, #0]
 8002002:	6123      	str	r3, [r4, #16]
 8002004:	2301      	movs	r3, #1
 8002006:	6163      	str	r3, [r4, #20]
 8002008:	b003      	add	sp, #12
 800200a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800200c:	ab01      	add	r3, sp, #4
 800200e:	466a      	mov	r2, sp
 8002010:	f7ff ffc8 	bl	8001fa4 <__swhatbuf_r>
 8002014:	9f00      	ldr	r7, [sp, #0]
 8002016:	4605      	mov	r5, r0
 8002018:	4639      	mov	r1, r7
 800201a:	4630      	mov	r0, r6
 800201c:	f7ff fc26 	bl	800186c <_malloc_r>
 8002020:	b948      	cbnz	r0, 8002036 <__smakebuf_r+0x46>
 8002022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002026:	059a      	lsls	r2, r3, #22
 8002028:	d4ee      	bmi.n	8002008 <__smakebuf_r+0x18>
 800202a:	f023 0303 	bic.w	r3, r3, #3
 800202e:	f043 0302 	orr.w	r3, r3, #2
 8002032:	81a3      	strh	r3, [r4, #12]
 8002034:	e7e2      	b.n	8001ffc <__smakebuf_r+0xc>
 8002036:	89a3      	ldrh	r3, [r4, #12]
 8002038:	6020      	str	r0, [r4, #0]
 800203a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800203e:	81a3      	strh	r3, [r4, #12]
 8002040:	9b01      	ldr	r3, [sp, #4]
 8002042:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002046:	b15b      	cbz	r3, 8002060 <__smakebuf_r+0x70>
 8002048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800204c:	4630      	mov	r0, r6
 800204e:	f000 f80b 	bl	8002068 <_isatty_r>
 8002052:	b128      	cbz	r0, 8002060 <__smakebuf_r+0x70>
 8002054:	89a3      	ldrh	r3, [r4, #12]
 8002056:	f023 0303 	bic.w	r3, r3, #3
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	81a3      	strh	r3, [r4, #12]
 8002060:	89a3      	ldrh	r3, [r4, #12]
 8002062:	431d      	orrs	r5, r3
 8002064:	81a5      	strh	r5, [r4, #12]
 8002066:	e7cf      	b.n	8002008 <__smakebuf_r+0x18>

08002068 <_isatty_r>:
 8002068:	b538      	push	{r3, r4, r5, lr}
 800206a:	4d06      	ldr	r5, [pc, #24]	@ (8002084 <_isatty_r+0x1c>)
 800206c:	2300      	movs	r3, #0
 800206e:	4604      	mov	r4, r0
 8002070:	4608      	mov	r0, r1
 8002072:	602b      	str	r3, [r5, #0]
 8002074:	f7fe faa3 	bl	80005be <_isatty>
 8002078:	1c43      	adds	r3, r0, #1
 800207a:	d102      	bne.n	8002082 <_isatty_r+0x1a>
 800207c:	682b      	ldr	r3, [r5, #0]
 800207e:	b103      	cbz	r3, 8002082 <_isatty_r+0x1a>
 8002080:	6023      	str	r3, [r4, #0]
 8002082:	bd38      	pop	{r3, r4, r5, pc}
 8002084:	200003e0 	.word	0x200003e0

08002088 <_lseek_r>:
 8002088:	b538      	push	{r3, r4, r5, lr}
 800208a:	4d07      	ldr	r5, [pc, #28]	@ (80020a8 <_lseek_r+0x20>)
 800208c:	4604      	mov	r4, r0
 800208e:	4608      	mov	r0, r1
 8002090:	4611      	mov	r1, r2
 8002092:	2200      	movs	r2, #0
 8002094:	602a      	str	r2, [r5, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	f7fe fa9c 	bl	80005d4 <_lseek>
 800209c:	1c43      	adds	r3, r0, #1
 800209e:	d102      	bne.n	80020a6 <_lseek_r+0x1e>
 80020a0:	682b      	ldr	r3, [r5, #0]
 80020a2:	b103      	cbz	r3, 80020a6 <_lseek_r+0x1e>
 80020a4:	6023      	str	r3, [r4, #0]
 80020a6:	bd38      	pop	{r3, r4, r5, pc}
 80020a8:	200003e0 	.word	0x200003e0

080020ac <_read_r>:
 80020ac:	b538      	push	{r3, r4, r5, lr}
 80020ae:	4d07      	ldr	r5, [pc, #28]	@ (80020cc <_read_r+0x20>)
 80020b0:	4604      	mov	r4, r0
 80020b2:	4608      	mov	r0, r1
 80020b4:	4611      	mov	r1, r2
 80020b6:	2200      	movs	r2, #0
 80020b8:	602a      	str	r2, [r5, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	f7fe fa2a 	bl	8000514 <_read>
 80020c0:	1c43      	adds	r3, r0, #1
 80020c2:	d102      	bne.n	80020ca <_read_r+0x1e>
 80020c4:	682b      	ldr	r3, [r5, #0]
 80020c6:	b103      	cbz	r3, 80020ca <_read_r+0x1e>
 80020c8:	6023      	str	r3, [r4, #0]
 80020ca:	bd38      	pop	{r3, r4, r5, pc}
 80020cc:	200003e0 	.word	0x200003e0

080020d0 <_sbrk_r>:
 80020d0:	b538      	push	{r3, r4, r5, lr}
 80020d2:	4d06      	ldr	r5, [pc, #24]	@ (80020ec <_sbrk_r+0x1c>)
 80020d4:	2300      	movs	r3, #0
 80020d6:	4604      	mov	r4, r0
 80020d8:	4608      	mov	r0, r1
 80020da:	602b      	str	r3, [r5, #0]
 80020dc:	f7fe fa88 	bl	80005f0 <_sbrk>
 80020e0:	1c43      	adds	r3, r0, #1
 80020e2:	d102      	bne.n	80020ea <_sbrk_r+0x1a>
 80020e4:	682b      	ldr	r3, [r5, #0]
 80020e6:	b103      	cbz	r3, 80020ea <_sbrk_r+0x1a>
 80020e8:	6023      	str	r3, [r4, #0]
 80020ea:	bd38      	pop	{r3, r4, r5, pc}
 80020ec:	200003e0 	.word	0x200003e0

080020f0 <_write_r>:
 80020f0:	b538      	push	{r3, r4, r5, lr}
 80020f2:	4d07      	ldr	r5, [pc, #28]	@ (8002110 <_write_r+0x20>)
 80020f4:	4604      	mov	r4, r0
 80020f6:	4608      	mov	r0, r1
 80020f8:	4611      	mov	r1, r2
 80020fa:	2200      	movs	r2, #0
 80020fc:	602a      	str	r2, [r5, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	f7fe fa25 	bl	800054e <_write>
 8002104:	1c43      	adds	r3, r0, #1
 8002106:	d102      	bne.n	800210e <_write_r+0x1e>
 8002108:	682b      	ldr	r3, [r5, #0]
 800210a:	b103      	cbz	r3, 800210e <_write_r+0x1e>
 800210c:	6023      	str	r3, [r4, #0]
 800210e:	bd38      	pop	{r3, r4, r5, pc}
 8002110:	200003e0 	.word	0x200003e0

08002114 <_close_r>:
 8002114:	b538      	push	{r3, r4, r5, lr}
 8002116:	4d06      	ldr	r5, [pc, #24]	@ (8002130 <_close_r+0x1c>)
 8002118:	2300      	movs	r3, #0
 800211a:	4604      	mov	r4, r0
 800211c:	4608      	mov	r0, r1
 800211e:	602b      	str	r3, [r5, #0]
 8002120:	f7fe fa31 	bl	8000586 <_close>
 8002124:	1c43      	adds	r3, r0, #1
 8002126:	d102      	bne.n	800212e <_close_r+0x1a>
 8002128:	682b      	ldr	r3, [r5, #0]
 800212a:	b103      	cbz	r3, 800212e <_close_r+0x1a>
 800212c:	6023      	str	r3, [r4, #0]
 800212e:	bd38      	pop	{r3, r4, r5, pc}
 8002130:	200003e0 	.word	0x200003e0

08002134 <_fstat_r>:
 8002134:	b538      	push	{r3, r4, r5, lr}
 8002136:	4d07      	ldr	r5, [pc, #28]	@ (8002154 <_fstat_r+0x20>)
 8002138:	2300      	movs	r3, #0
 800213a:	4604      	mov	r4, r0
 800213c:	4608      	mov	r0, r1
 800213e:	4611      	mov	r1, r2
 8002140:	602b      	str	r3, [r5, #0]
 8002142:	f7fe fa2c 	bl	800059e <_fstat>
 8002146:	1c43      	adds	r3, r0, #1
 8002148:	d102      	bne.n	8002150 <_fstat_r+0x1c>
 800214a:	682b      	ldr	r3, [r5, #0]
 800214c:	b103      	cbz	r3, 8002150 <_fstat_r+0x1c>
 800214e:	6023      	str	r3, [r4, #0]
 8002150:	bd38      	pop	{r3, r4, r5, pc}
 8002152:	bf00      	nop
 8002154:	200003e0 	.word	0x200003e0

08002158 <_free_r>:
 8002158:	b538      	push	{r3, r4, r5, lr}
 800215a:	4605      	mov	r5, r0
 800215c:	2900      	cmp	r1, #0
 800215e:	d041      	beq.n	80021e4 <_free_r+0x8c>
 8002160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002164:	1f0c      	subs	r4, r1, #4
 8002166:	2b00      	cmp	r3, #0
 8002168:	bfb8      	it	lt
 800216a:	18e4      	addlt	r4, r4, r3
 800216c:	f7ff fe36 	bl	8001ddc <__malloc_lock>
 8002170:	4a1d      	ldr	r2, [pc, #116]	@ (80021e8 <_free_r+0x90>)
 8002172:	6813      	ldr	r3, [r2, #0]
 8002174:	b933      	cbnz	r3, 8002184 <_free_r+0x2c>
 8002176:	6063      	str	r3, [r4, #4]
 8002178:	6014      	str	r4, [r2, #0]
 800217a:	4628      	mov	r0, r5
 800217c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002180:	f7ff be32 	b.w	8001de8 <__malloc_unlock>
 8002184:	42a3      	cmp	r3, r4
 8002186:	d908      	bls.n	800219a <_free_r+0x42>
 8002188:	6820      	ldr	r0, [r4, #0]
 800218a:	1821      	adds	r1, r4, r0
 800218c:	428b      	cmp	r3, r1
 800218e:	bf01      	itttt	eq
 8002190:	6819      	ldreq	r1, [r3, #0]
 8002192:	685b      	ldreq	r3, [r3, #4]
 8002194:	1809      	addeq	r1, r1, r0
 8002196:	6021      	streq	r1, [r4, #0]
 8002198:	e7ed      	b.n	8002176 <_free_r+0x1e>
 800219a:	461a      	mov	r2, r3
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	b10b      	cbz	r3, 80021a4 <_free_r+0x4c>
 80021a0:	42a3      	cmp	r3, r4
 80021a2:	d9fa      	bls.n	800219a <_free_r+0x42>
 80021a4:	6811      	ldr	r1, [r2, #0]
 80021a6:	1850      	adds	r0, r2, r1
 80021a8:	42a0      	cmp	r0, r4
 80021aa:	d10b      	bne.n	80021c4 <_free_r+0x6c>
 80021ac:	6820      	ldr	r0, [r4, #0]
 80021ae:	4401      	add	r1, r0
 80021b0:	1850      	adds	r0, r2, r1
 80021b2:	4283      	cmp	r3, r0
 80021b4:	6011      	str	r1, [r2, #0]
 80021b6:	d1e0      	bne.n	800217a <_free_r+0x22>
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	6053      	str	r3, [r2, #4]
 80021be:	4408      	add	r0, r1
 80021c0:	6010      	str	r0, [r2, #0]
 80021c2:	e7da      	b.n	800217a <_free_r+0x22>
 80021c4:	d902      	bls.n	80021cc <_free_r+0x74>
 80021c6:	230c      	movs	r3, #12
 80021c8:	602b      	str	r3, [r5, #0]
 80021ca:	e7d6      	b.n	800217a <_free_r+0x22>
 80021cc:	6820      	ldr	r0, [r4, #0]
 80021ce:	1821      	adds	r1, r4, r0
 80021d0:	428b      	cmp	r3, r1
 80021d2:	bf04      	itt	eq
 80021d4:	6819      	ldreq	r1, [r3, #0]
 80021d6:	685b      	ldreq	r3, [r3, #4]
 80021d8:	6063      	str	r3, [r4, #4]
 80021da:	bf04      	itt	eq
 80021dc:	1809      	addeq	r1, r1, r0
 80021de:	6021      	streq	r1, [r4, #0]
 80021e0:	6054      	str	r4, [r2, #4]
 80021e2:	e7ca      	b.n	800217a <_free_r+0x22>
 80021e4:	bd38      	pop	{r3, r4, r5, pc}
 80021e6:	bf00      	nop
 80021e8:	200003dc 	.word	0x200003dc

080021ec <_init>:
 80021ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ee:	bf00      	nop
 80021f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021f2:	bc08      	pop	{r3}
 80021f4:	469e      	mov	lr, r3
 80021f6:	4770      	bx	lr

080021f8 <_fini>:
 80021f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021fa:	bf00      	nop
 80021fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021fe:	bc08      	pop	{r3}
 8002200:	469e      	mov	lr, r3
 8002202:	4770      	bx	lr
