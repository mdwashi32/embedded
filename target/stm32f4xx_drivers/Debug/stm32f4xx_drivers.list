
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011e0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001368  08001368  00003040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001368  08001368  00003040  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001368  08001368  00002368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001370  08001370  00003040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001370  08001370  00002370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001374  08001374  00002374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000040  20000000  08001378  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003040  2**0
                  CONTENTS
 10 .bss          00000048  20000040  20000040  00003040  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000088  20000088  00003040  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000017fc  00000000  00000000  00003070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005dd  00000000  00000000  0000486c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  00004e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000016b  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000027ac  00000000  00000000  000051a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000201b  00000000  00000000  0000794f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a721  00000000  00000000  0000996a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001408b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000744  00000000  00000000  000140d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  00014814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000040 	.word	0x20000040
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001350 	.word	0x08001350

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000044 	.word	0x20000044
 80001c4:	08001350 	.word	0x08001350

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <I2C1_GPIOInits>:
{
	for(uint32_t i = 0; i < 500000/2; i++);
}

void I2C1_GPIOInits()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 80001de:	4b0e      	ldr	r3, [pc, #56]	@ (8000218 <I2C1_GPIOInits+0x40>)
 80001e0:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001e2:	2302      	movs	r3, #2
 80001e4:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80001e6:	2301      	movs	r3, #1
 80001e8:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80001ea:	2301      	movs	r3, #1
 80001ec:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80001ee:	2304      	movs	r3, #4
 80001f0:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001f2:	2302      	movs	r3, #2
 80001f4:	72bb      	strb	r3, [r7, #10]

	// SCL PB6
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80001f6:	2306      	movs	r3, #6
 80001f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f9d1 	bl	80005a4 <GPIO_Init>

	// SDA PB9
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000202:	2307      	movs	r3, #7
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f9cb 	bl	80005a4 <GPIO_Init>
}
 800020e:	bf00      	nop
 8000210:	3710      	adds	r7, #16
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40020400 	.word	0x40020400

0800021c <I2C1_Inits>:

void I2C1_Inits(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000220:	4b09      	ldr	r3, [pc, #36]	@ (8000248 <I2C1_Inits+0x2c>)
 8000222:	4a0a      	ldr	r2, [pc, #40]	@ (800024c <I2C1_Inits+0x30>)
 8000224:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_EN;
 8000226:	4b08      	ldr	r3, [pc, #32]	@ (8000248 <I2C1_Inits+0x2c>)
 8000228:	2201      	movs	r2, #1
 800022a:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 800022c:	4b06      	ldr	r3, [pc, #24]	@ (8000248 <I2C1_Inits+0x2c>)
 800022e:	2268      	movs	r2, #104	@ 0x68
 8000230:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000232:	4b05      	ldr	r3, [pc, #20]	@ (8000248 <I2C1_Inits+0x2c>)
 8000234:	2200      	movs	r2, #0
 8000236:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000238:	4b03      	ldr	r3, [pc, #12]	@ (8000248 <I2C1_Inits+0x2c>)
 800023a:	4a05      	ldr	r2, [pc, #20]	@ (8000250 <I2C1_Inits+0x34>)
 800023c:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800023e:	4802      	ldr	r0, [pc, #8]	@ (8000248 <I2C1_Inits+0x2c>)
 8000240:	f000 fcd8 	bl	8000bf4 <I2C_Init>
}
 8000244:	bf00      	nop
 8000246:	bd80      	pop	{r7, pc}
 8000248:	2000005c 	.word	0x2000005c
 800024c:	40005400 	.word	0x40005400
 8000250:	000186a0 	.word	0x000186a0

08000254 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;
	//button
	GpioBtn.pGPIOx = GPIOA;
 800025a:	4b09      	ldr	r3, [pc, #36]	@ (8000280 <GPIO_ButtonInit+0x2c>)
 800025c:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800025e:	2300      	movs	r3, #0
 8000260:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000262:	2300      	movs	r3, #0
 8000264:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000266:	2302      	movs	r3, #2
 8000268:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800026a:	2300      	movs	r3, #0
 800026c:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioBtn);
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f997 	bl	80005a4 <GPIO_Init>

}
 8000276:	bf00      	nop
 8000278:	3710      	adds	r7, #16
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40020000 	.word	0x40020000

08000284 <main>:


int main(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	// Initialize GPIO button
	GPIO_ButtonInit();
 8000288:	f7ff ffe4 	bl	8000254 <GPIO_ButtonInit>

	// Initialize GPIO pins as I2C1 peripheral pins
	I2C1_GPIOInits();
 800028c:	f7ff ffa4 	bl	80001d8 <I2C1_GPIOInits>

	// Initialize I2C1 peripheral configuration
	I2C1_Inits();
 8000290:	f7ff ffc4 	bl	800021c <I2C1_Inits>

	// I2C IRQ configurations
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 8000294:	2101      	movs	r1, #1
 8000296:	201f      	movs	r0, #31
 8000298:	f000 fd5c 	bl	8000d54 <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ERR, ENABLE);
 800029c:	2101      	movs	r1, #1
 800029e:	2020      	movs	r0, #32
 80002a0:	f000 fd58 	bl	8000d54 <I2C_IRQInterruptConfig>

	I2C_SlaveEnableDisableCallbackEvents(I2C1, ENABLE);
 80002a4:	2101      	movs	r1, #1
 80002a6:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <main+0x34>)
 80002a8:	f000 fb99 	bl	80009de <I2C_SlaveEnableDisableCallbackEvents>

	// Enable I2C1 peripheral
	I2C_PeripheralControl(I2C1, ENABLE); // ACK is enabled in peripheral control API
 80002ac:	2101      	movs	r1, #1
 80002ae:	4802      	ldr	r0, [pc, #8]	@ (80002b8 <main+0x34>)
 80002b0:	f000 fdd6 	bl	8000e60 <I2C_PeripheralControl>

	while(1);
 80002b4:	bf00      	nop
 80002b6:	e7fd      	b.n	80002b4 <main+0x30>
 80002b8:	40005400 	.word	0x40005400

080002bc <I2C1_EV_IRQHandler>:

}

void I2C1_EV_IRQHandler(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 80002c0:	4802      	ldr	r0, [pc, #8]	@ (80002cc <I2C1_EV_IRQHandler+0x10>)
 80002c2:	f000 febf 	bl	8001044 <I2C_EV_IRQHandling>
}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	2000005c 	.word	0x2000005c

080002d0 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	I2C_ERR_IRQHandling(&I2C1Handle);
 80002d4:	4802      	ldr	r0, [pc, #8]	@ (80002e0 <I2C1_ER_IRQHandler+0x10>)
 80002d6:	f000 ff91 	bl	80011fc <I2C_ERR_IRQHandling>
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	2000005c 	.word	0x2000005c

080002e4 <I2C_ApplicationEventCallback>:

void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle,uint8_t AppEvent)
{
 80002e4:	b590      	push	{r4, r7, lr}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	70fb      	strb	r3, [r7, #3]
	static uint8_t count = 0;

	if(AppEvent == I2C_EV_DATA_REQ)
 80002f0:	78fb      	ldrb	r3, [r7, #3]
 80002f2:	2b08      	cmp	r3, #8
 80002f4:	d123      	bne.n	800033e <I2C_ApplicationEventCallback+0x5a>
	{
		// Master is requesting data. Slave must send.
		if (opcode == 0x51)
 80002f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000374 <I2C_ApplicationEventCallback+0x90>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b51      	cmp	r3, #81	@ 0x51
 80002fc:	d10b      	bne.n	8000316 <I2C_ApplicationEventCallback+0x32>
		{
			// send length of data to master
			I2C_SlaveSendData(pI2CHandle->pI2Cx, strlen((char*)txBuffer));
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	681c      	ldr	r4, [r3, #0]
 8000302:	481d      	ldr	r0, [pc, #116]	@ (8000378 <I2C_ApplicationEventCallback+0x94>)
 8000304:	f7ff ff60 	bl	80001c8 <strlen>
 8000308:	4603      	mov	r3, r0
 800030a:	b2db      	uxtb	r3, r3
 800030c:	4619      	mov	r1, r3
 800030e:	4620      	mov	r0, r4
 8000310:	f000 fe7c 	bl	800100c <I2C_SlaveSendData>
	}
	else if (AppEvent == I2C_EV_STOP)
	{
		//Master has ended I2C communication, no more reception by slave
	}
}
 8000314:	e029      	b.n	800036a <I2C_ApplicationEventCallback+0x86>
		else if(opcode == 0x52)
 8000316:	4b17      	ldr	r3, [pc, #92]	@ (8000374 <I2C_ApplicationEventCallback+0x90>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	2b52      	cmp	r3, #82	@ 0x52
 800031c:	d125      	bne.n	800036a <I2C_ApplicationEventCallback+0x86>
			I2C_SlaveSendData(pI2CHandle->pI2Cx, txBuffer[count++]);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	4b16      	ldr	r3, [pc, #88]	@ (800037c <I2C_ApplicationEventCallback+0x98>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	1c59      	adds	r1, r3, #1
 8000328:	b2c8      	uxtb	r0, r1
 800032a:	4914      	ldr	r1, [pc, #80]	@ (800037c <I2C_ApplicationEventCallback+0x98>)
 800032c:	7008      	strb	r0, [r1, #0]
 800032e:	4619      	mov	r1, r3
 8000330:	4b11      	ldr	r3, [pc, #68]	@ (8000378 <I2C_ApplicationEventCallback+0x94>)
 8000332:	5c5b      	ldrb	r3, [r3, r1]
 8000334:	4619      	mov	r1, r3
 8000336:	4610      	mov	r0, r2
 8000338:	f000 fe68 	bl	800100c <I2C_SlaveSendData>
}
 800033c:	e015      	b.n	800036a <I2C_ApplicationEventCallback+0x86>
	else if( AppEvent == I2C_EV_DATA_RCV)
 800033e:	78fb      	ldrb	r3, [r7, #3]
 8000340:	2b09      	cmp	r3, #9
 8000342:	d109      	bne.n	8000358 <I2C_ApplicationEventCallback+0x74>
		opcode = I2C_SlaveReceiveData(pI2CHandle->pI2Cx);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4618      	mov	r0, r3
 800034a:	f000 fe6e 	bl	800102a <I2C_SlaveReceiveData>
 800034e:	4603      	mov	r3, r0
 8000350:	461a      	mov	r2, r3
 8000352:	4b08      	ldr	r3, [pc, #32]	@ (8000374 <I2C_ApplicationEventCallback+0x90>)
 8000354:	701a      	strb	r2, [r3, #0]
}
 8000356:	e008      	b.n	800036a <I2C_ApplicationEventCallback+0x86>
	else if(AppEvent == I2C_ERROR_AF)
 8000358:	78fb      	ldrb	r3, [r7, #3]
 800035a:	2b05      	cmp	r3, #5
 800035c:	d105      	bne.n	800036a <I2C_ApplicationEventCallback+0x86>
		opcode = 0xFF;
 800035e:	4b05      	ldr	r3, [pc, #20]	@ (8000374 <I2C_ApplicationEventCallback+0x90>)
 8000360:	22ff      	movs	r2, #255	@ 0xff
 8000362:	701a      	strb	r2, [r3, #0]
		count = 0;
 8000364:	4b05      	ldr	r3, [pc, #20]	@ (800037c <I2C_ApplicationEventCallback+0x98>)
 8000366:	2200      	movs	r2, #0
 8000368:	701a      	strb	r2, [r3, #0]
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	bd90      	pop	{r4, r7, pc}
 8000372:	bf00      	nop
 8000374:	20000084 	.word	0x20000084
 8000378:	20000000 	.word	0x20000000
 800037c:	20000085 	.word	0x20000085

08000380 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000380:	480d      	ldr	r0, [pc, #52]	@ (80003b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000382:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000384:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000388:	480c      	ldr	r0, [pc, #48]	@ (80003bc <LoopForever+0x6>)
  ldr r1, =_edata
 800038a:	490d      	ldr	r1, [pc, #52]	@ (80003c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800038c:	4a0d      	ldr	r2, [pc, #52]	@ (80003c4 <LoopForever+0xe>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000390:	e002      	b.n	8000398 <LoopCopyDataInit>

08000392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000396:	3304      	adds	r3, #4

08000398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800039a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800039c:	d3f9      	bcc.n	8000392 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039e:	4a0a      	ldr	r2, [pc, #40]	@ (80003c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a0:	4c0a      	ldr	r4, [pc, #40]	@ (80003cc <LoopForever+0x16>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a4:	e001      	b.n	80003aa <LoopFillZerobss>

080003a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a8:	3204      	adds	r2, #4

080003aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ac:	d3fb      	bcc.n	80003a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ae:	f000 ffab 	bl	8001308 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003b2:	f7ff ff67 	bl	8000284 <main>

080003b6 <LoopForever>:

LoopForever:
  b LoopForever
 80003b6:	e7fe      	b.n	80003b6 <LoopForever>
  ldr   r0, =_estack
 80003b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c0:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80003c4:	08001378 	.word	0x08001378
  ldr r2, =_sbss
 80003c8:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80003cc:	20000088 	.word	0x20000088

080003d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d0:	e7fe      	b.n	80003d0 <ADC_IRQHandler>
	...

080003d4 <GPIO_PeriClockControl>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	460b      	mov	r3, r1
 80003de:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 80003e0:	78fb      	ldrb	r3, [r7, #3]
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d162      	bne.n	80004ac <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a64      	ldr	r2, [pc, #400]	@ (800057c <GPIO_PeriClockControl+0x1a8>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003ee:	4b64      	ldr	r3, [pc, #400]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f2:	4a63      	ldr	r2, [pc, #396]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 80003fa:	e0b9      	b.n	8000570 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a61      	ldr	r2, [pc, #388]	@ (8000584 <GPIO_PeriClockControl+0x1b0>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d106      	bne.n	8000412 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000404:	4b5e      	ldr	r3, [pc, #376]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000408:	4a5d      	ldr	r2, [pc, #372]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 800040a:	f043 0302 	orr.w	r3, r3, #2
 800040e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000410:	e0ae      	b.n	8000570 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a5c      	ldr	r2, [pc, #368]	@ (8000588 <GPIO_PeriClockControl+0x1b4>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800041a:	4b59      	ldr	r3, [pc, #356]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041e:	4a58      	ldr	r2, [pc, #352]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 8000420:	f043 0304 	orr.w	r3, r3, #4
 8000424:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000426:	e0a3      	b.n	8000570 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a58      	ldr	r2, [pc, #352]	@ (800058c <GPIO_PeriClockControl+0x1b8>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d106      	bne.n	800043e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000430:	4b53      	ldr	r3, [pc, #332]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000434:	4a52      	ldr	r2, [pc, #328]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 8000436:	f043 0308 	orr.w	r3, r3, #8
 800043a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800043c:	e098      	b.n	8000570 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a53      	ldr	r2, [pc, #332]	@ (8000590 <GPIO_PeriClockControl+0x1bc>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d106      	bne.n	8000454 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000446:	4b4e      	ldr	r3, [pc, #312]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 8000448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800044a:	4a4d      	ldr	r2, [pc, #308]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 800044c:	f043 0310 	orr.w	r3, r3, #16
 8000450:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000452:	e08d      	b.n	8000570 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a4f      	ldr	r2, [pc, #316]	@ (8000594 <GPIO_PeriClockControl+0x1c0>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d106      	bne.n	800046a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800045c:	4b48      	ldr	r3, [pc, #288]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000460:	4a47      	ldr	r2, [pc, #284]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 8000462:	f043 0320 	orr.w	r3, r3, #32
 8000466:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000468:	e082      	b.n	8000570 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a4a      	ldr	r2, [pc, #296]	@ (8000598 <GPIO_PeriClockControl+0x1c4>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d106      	bne.n	8000480 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000472:	4b43      	ldr	r3, [pc, #268]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 8000474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000476:	4a42      	ldr	r2, [pc, #264]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 8000478:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800047c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800047e:	e077      	b.n	8000570 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a46      	ldr	r2, [pc, #280]	@ (800059c <GPIO_PeriClockControl+0x1c8>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d106      	bne.n	8000496 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000488:	4b3d      	ldr	r3, [pc, #244]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048c:	4a3c      	ldr	r2, [pc, #240]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 800048e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000492:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000494:	e06c      	b.n	8000570 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a41      	ldr	r2, [pc, #260]	@ (80005a0 <GPIO_PeriClockControl+0x1cc>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d168      	bne.n	8000570 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800049e:	4b38      	ldr	r3, [pc, #224]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 80004a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a2:	4a37      	ldr	r2, [pc, #220]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 80004a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004a8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004aa:	e061      	b.n	8000570 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4a33      	ldr	r2, [pc, #204]	@ (800057c <GPIO_PeriClockControl+0x1a8>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d106      	bne.n	80004c2 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80004b4:	4b32      	ldr	r3, [pc, #200]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 80004b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b8:	4a31      	ldr	r2, [pc, #196]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 80004ba:	f023 0301 	bic.w	r3, r3, #1
 80004be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004c0:	e056      	b.n	8000570 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4a2f      	ldr	r2, [pc, #188]	@ (8000584 <GPIO_PeriClockControl+0x1b0>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d106      	bne.n	80004d8 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80004ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 80004cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ce:	4a2c      	ldr	r2, [pc, #176]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 80004d0:	f023 0302 	bic.w	r3, r3, #2
 80004d4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004d6:	e04b      	b.n	8000570 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a2b      	ldr	r2, [pc, #172]	@ (8000588 <GPIO_PeriClockControl+0x1b4>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d106      	bne.n	80004ee <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80004e0:	4b27      	ldr	r3, [pc, #156]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 80004e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e4:	4a26      	ldr	r2, [pc, #152]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 80004e6:	f023 0304 	bic.w	r3, r3, #4
 80004ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ec:	e040      	b.n	8000570 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4a26      	ldr	r2, [pc, #152]	@ (800058c <GPIO_PeriClockControl+0x1b8>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d106      	bne.n	8000504 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80004f6:	4b22      	ldr	r3, [pc, #136]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fa:	4a21      	ldr	r2, [pc, #132]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 80004fc:	f023 0308 	bic.w	r3, r3, #8
 8000500:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000502:	e035      	b.n	8000570 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a22      	ldr	r2, [pc, #136]	@ (8000590 <GPIO_PeriClockControl+0x1bc>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d106      	bne.n	800051a <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 800050c:	4b1c      	ldr	r3, [pc, #112]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 800050e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000510:	4a1b      	ldr	r2, [pc, #108]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 8000512:	f023 0310 	bic.w	r3, r3, #16
 8000516:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000518:	e02a      	b.n	8000570 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4a1d      	ldr	r2, [pc, #116]	@ (8000594 <GPIO_PeriClockControl+0x1c0>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d106      	bne.n	8000530 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000522:	4b17      	ldr	r3, [pc, #92]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000526:	4a16      	ldr	r2, [pc, #88]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 8000528:	f023 0320 	bic.w	r3, r3, #32
 800052c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800052e:	e01f      	b.n	8000570 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a19      	ldr	r2, [pc, #100]	@ (8000598 <GPIO_PeriClockControl+0x1c4>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d106      	bne.n	8000546 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000538:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 800053a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053c:	4a10      	ldr	r2, [pc, #64]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 800053e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000542:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000544:	e014      	b.n	8000570 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4a14      	ldr	r2, [pc, #80]	@ (800059c <GPIO_PeriClockControl+0x1c8>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d106      	bne.n	800055c <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800054e:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000552:	4a0b      	ldr	r2, [pc, #44]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 8000554:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000558:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800055a:	e009      	b.n	8000570 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4a10      	ldr	r2, [pc, #64]	@ (80005a0 <GPIO_PeriClockControl+0x1cc>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d105      	bne.n	8000570 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 8000566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000568:	4a05      	ldr	r2, [pc, #20]	@ (8000580 <GPIO_PeriClockControl+0x1ac>)
 800056a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800056e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40020000 	.word	0x40020000
 8000580:	40023800 	.word	0x40023800
 8000584:	40020400 	.word	0x40020400
 8000588:	40020800 	.word	0x40020800
 800058c:	40020c00 	.word	0x40020c00
 8000590:	40021000 	.word	0x40021000
 8000594:	40021400 	.word	0x40021400
 8000598:	40021800 	.word	0x40021800
 800059c:	40021c00 	.word	0x40021c00
 80005a0:	40022000 	.word	0x40022000

080005a4 <GPIO_Init>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0; // temporary register
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2101      	movs	r1, #1
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff ff0c 	bl	80003d4 <GPIO_PeriClockControl>


	// 1. Configure mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	795b      	ldrb	r3, [r3, #5]
 80005c0:	2b03      	cmp	r3, #3
 80005c2:	d820      	bhi.n	8000606 <GPIO_Init+0x62>
	{
		//Non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	795b      	ldrb	r3, [r3, #5]
 80005c8:	461a      	mov	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	791b      	ldrb	r3, [r3, #4]
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	fa02 f303 	lsl.w	r3, r2, r3
 80005d4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clear
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	791b      	ldrb	r3, [r3, #4]
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	2103      	movs	r1, #3
 80005e4:	fa01 f303 	lsl.w	r3, r1, r3
 80005e8:	43db      	mvns	r3, r3
 80005ea:	4619      	mov	r1, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	400a      	ands	r2, r1
 80005f2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //set
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	6819      	ldr	r1, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	697a      	ldr	r2, [r7, #20]
 8000600:	430a      	orrs	r2, r1
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	e0d2      	b.n	80007ac <GPIO_Init+0x208>
	}
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	795b      	ldrb	r3, [r3, #5]
 800060a:	2b04      	cmp	r3, #4
 800060c:	d117      	bne.n	800063e <GPIO_Init+0x9a>
		{
			//1. Configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800060e:	4b4b      	ldr	r3, [pc, #300]	@ (800073c <GPIO_Init+0x198>)
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	7912      	ldrb	r2, [r2, #4]
 8000616:	4611      	mov	r1, r2
 8000618:	2201      	movs	r2, #1
 800061a:	408a      	lsls	r2, r1
 800061c:	4611      	mov	r1, r2
 800061e:	4a47      	ldr	r2, [pc, #284]	@ (800073c <GPIO_Init+0x198>)
 8000620:	430b      	orrs	r3, r1
 8000622:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000624:	4b45      	ldr	r3, [pc, #276]	@ (800073c <GPIO_Init+0x198>)
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	7912      	ldrb	r2, [r2, #4]
 800062c:	4611      	mov	r1, r2
 800062e:	2201      	movs	r2, #1
 8000630:	408a      	lsls	r2, r1
 8000632:	43d2      	mvns	r2, r2
 8000634:	4611      	mov	r1, r2
 8000636:	4a41      	ldr	r2, [pc, #260]	@ (800073c <GPIO_Init+0x198>)
 8000638:	400b      	ands	r3, r1
 800063a:	6093      	str	r3, [r2, #8]
 800063c:	e035      	b.n	80006aa <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	795b      	ldrb	r3, [r3, #5]
 8000642:	2b05      	cmp	r3, #5
 8000644:	d117      	bne.n	8000676 <GPIO_Init+0xd2>
		{
			//1. Configure RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000646:	4b3d      	ldr	r3, [pc, #244]	@ (800073c <GPIO_Init+0x198>)
 8000648:	68db      	ldr	r3, [r3, #12]
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	7912      	ldrb	r2, [r2, #4]
 800064e:	4611      	mov	r1, r2
 8000650:	2201      	movs	r2, #1
 8000652:	408a      	lsls	r2, r1
 8000654:	4611      	mov	r1, r2
 8000656:	4a39      	ldr	r2, [pc, #228]	@ (800073c <GPIO_Init+0x198>)
 8000658:	430b      	orrs	r3, r1
 800065a:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800065c:	4b37      	ldr	r3, [pc, #220]	@ (800073c <GPIO_Init+0x198>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	7912      	ldrb	r2, [r2, #4]
 8000664:	4611      	mov	r1, r2
 8000666:	2201      	movs	r2, #1
 8000668:	408a      	lsls	r2, r1
 800066a:	43d2      	mvns	r2, r2
 800066c:	4611      	mov	r1, r2
 800066e:	4a33      	ldr	r2, [pc, #204]	@ (800073c <GPIO_Init+0x198>)
 8000670:	400b      	ands	r3, r1
 8000672:	60d3      	str	r3, [r2, #12]
 8000674:	e019      	b.n	80006aa <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	795b      	ldrb	r3, [r3, #5]
 800067a:	2b06      	cmp	r3, #6
 800067c:	d115      	bne.n	80006aa <GPIO_Init+0x106>
		{
			//1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800067e:	4b2f      	ldr	r3, [pc, #188]	@ (800073c <GPIO_Init+0x198>)
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	7912      	ldrb	r2, [r2, #4]
 8000686:	4611      	mov	r1, r2
 8000688:	2201      	movs	r2, #1
 800068a:	408a      	lsls	r2, r1
 800068c:	4611      	mov	r1, r2
 800068e:	4a2b      	ldr	r2, [pc, #172]	@ (800073c <GPIO_Init+0x198>)
 8000690:	430b      	orrs	r3, r1
 8000692:	60d3      	str	r3, [r2, #12]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000694:	4b29      	ldr	r3, [pc, #164]	@ (800073c <GPIO_Init+0x198>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	7912      	ldrb	r2, [r2, #4]
 800069c:	4611      	mov	r1, r2
 800069e:	2201      	movs	r2, #1
 80006a0:	408a      	lsls	r2, r1
 80006a2:	4611      	mov	r1, r2
 80006a4:	4a25      	ldr	r2, [pc, #148]	@ (800073c <GPIO_Init+0x198>)
 80006a6:	430b      	orrs	r3, r1
 80006a8:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	791b      	ldrb	r3, [r3, #4]
 80006ae:	089b      	lsrs	r3, r3, #2
 80006b0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	f003 0303 	and.w	r3, r3, #3
 80006ba:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1f      	ldr	r2, [pc, #124]	@ (8000740 <GPIO_Init+0x19c>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d04e      	beq.n	8000764 <GPIO_Init+0x1c0>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000744 <GPIO_Init+0x1a0>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d032      	beq.n	8000736 <GPIO_Init+0x192>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a1c      	ldr	r2, [pc, #112]	@ (8000748 <GPIO_Init+0x1a4>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d02b      	beq.n	8000732 <GPIO_Init+0x18e>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a1b      	ldr	r2, [pc, #108]	@ (800074c <GPIO_Init+0x1a8>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d024      	beq.n	800072e <GPIO_Init+0x18a>
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a19      	ldr	r2, [pc, #100]	@ (8000750 <GPIO_Init+0x1ac>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d01d      	beq.n	800072a <GPIO_Init+0x186>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a18      	ldr	r2, [pc, #96]	@ (8000754 <GPIO_Init+0x1b0>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d016      	beq.n	8000726 <GPIO_Init+0x182>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a16      	ldr	r2, [pc, #88]	@ (8000758 <GPIO_Init+0x1b4>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d00f      	beq.n	8000722 <GPIO_Init+0x17e>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a15      	ldr	r2, [pc, #84]	@ (800075c <GPIO_Init+0x1b8>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d008      	beq.n	800071e <GPIO_Init+0x17a>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a13      	ldr	r2, [pc, #76]	@ (8000760 <GPIO_Init+0x1bc>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d101      	bne.n	800071a <GPIO_Init+0x176>
 8000716:	2308      	movs	r3, #8
 8000718:	e025      	b.n	8000766 <GPIO_Init+0x1c2>
 800071a:	2300      	movs	r3, #0
 800071c:	e023      	b.n	8000766 <GPIO_Init+0x1c2>
 800071e:	2307      	movs	r3, #7
 8000720:	e021      	b.n	8000766 <GPIO_Init+0x1c2>
 8000722:	2306      	movs	r3, #6
 8000724:	e01f      	b.n	8000766 <GPIO_Init+0x1c2>
 8000726:	2305      	movs	r3, #5
 8000728:	e01d      	b.n	8000766 <GPIO_Init+0x1c2>
 800072a:	2304      	movs	r3, #4
 800072c:	e01b      	b.n	8000766 <GPIO_Init+0x1c2>
 800072e:	2303      	movs	r3, #3
 8000730:	e019      	b.n	8000766 <GPIO_Init+0x1c2>
 8000732:	2302      	movs	r3, #2
 8000734:	e017      	b.n	8000766 <GPIO_Init+0x1c2>
 8000736:	2301      	movs	r3, #1
 8000738:	e015      	b.n	8000766 <GPIO_Init+0x1c2>
 800073a:	bf00      	nop
 800073c:	40013c00 	.word	0x40013c00
 8000740:	40020000 	.word	0x40020000
 8000744:	40020400 	.word	0x40020400
 8000748:	40020800 	.word	0x40020800
 800074c:	40020c00 	.word	0x40020c00
 8000750:	40021000 	.word	0x40021000
 8000754:	40021400 	.word	0x40021400
 8000758:	40021800 	.word	0x40021800
 800075c:	40021c00 	.word	0x40021c00
 8000760:	40022000 	.word	0x40022000
 8000764:	2300      	movs	r3, #0
 8000766:	747b      	strb	r3, [r7, #17]

		SYSCFG_PCLK_EN();
 8000768:	4b60      	ldr	r3, [pc, #384]	@ (80008ec <GPIO_Init+0x348>)
 800076a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076c:	4a5f      	ldr	r2, [pc, #380]	@ (80008ec <GPIO_Init+0x348>)
 800076e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000772:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] |= portCode << (temp2 * 4);
 8000774:	4a5e      	ldr	r2, [pc, #376]	@ (80008f0 <GPIO_Init+0x34c>)
 8000776:	7cfb      	ldrb	r3, [r7, #19]
 8000778:	3302      	adds	r3, #2
 800077a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800077e:	7c79      	ldrb	r1, [r7, #17]
 8000780:	7cbb      	ldrb	r3, [r7, #18]
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	fa01 f303 	lsl.w	r3, r1, r3
 8000788:	4618      	mov	r0, r3
 800078a:	4959      	ldr	r1, [pc, #356]	@ (80008f0 <GPIO_Init+0x34c>)
 800078c:	7cfb      	ldrb	r3, [r7, #19]
 800078e:	4302      	orrs	r2, r0
 8000790:	3302      	adds	r3, #2
 8000792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3. Enable the EXTI delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000796:	4b57      	ldr	r3, [pc, #348]	@ (80008f4 <GPIO_Init+0x350>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	7912      	ldrb	r2, [r2, #4]
 800079e:	4611      	mov	r1, r2
 80007a0:	2201      	movs	r2, #1
 80007a2:	408a      	lsls	r2, r1
 80007a4:	4611      	mov	r1, r2
 80007a6:	4a53      	ldr	r2, [pc, #332]	@ (80008f4 <GPIO_Init+0x350>)
 80007a8:	430b      	orrs	r3, r1
 80007aa:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	799b      	ldrb	r3, [r3, #6]
 80007b4:	461a      	mov	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	791b      	ldrb	r3, [r3, #4]
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	fa02 f303 	lsl.w	r3, r2, r3
 80007c0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	689a      	ldr	r2, [r3, #8]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	791b      	ldrb	r3, [r3, #4]
 80007cc:	4619      	mov	r1, r3
 80007ce:	2303      	movs	r3, #3
 80007d0:	408b      	lsls	r3, r1
 80007d2:	43db      	mvns	r3, r3
 80007d4:	4619      	mov	r1, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	400a      	ands	r2, r1
 80007dc:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	6899      	ldr	r1, [r3, #8]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	430a      	orrs	r2, r1
 80007ec:	609a      	str	r2, [r3, #8]

	temp = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]

	// 3. Configure the pull-up/pull-down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	79db      	ldrb	r3, [r3, #7]
 80007f6:	461a      	mov	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	791b      	ldrb	r3, [r3, #4]
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	68da      	ldr	r2, [r3, #12]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	791b      	ldrb	r3, [r3, #4]
 800080e:	4619      	mov	r1, r3
 8000810:	2303      	movs	r3, #3
 8000812:	408b      	lsls	r3, r1
 8000814:	43db      	mvns	r3, r3
 8000816:	4619      	mov	r1, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	400a      	ands	r2, r1
 800081e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	68d9      	ldr	r1, [r3, #12]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	430a      	orrs	r2, r1
 800082e:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]

	// 4. Configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	7a1b      	ldrb	r3, [r3, #8]
 8000838:	461a      	mov	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	791b      	ldrb	r3, [r3, #4]
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	685a      	ldr	r2, [r3, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	791b      	ldrb	r3, [r3, #4]
 800084e:	4619      	mov	r1, r3
 8000850:	2301      	movs	r3, #1
 8000852:	408b      	lsls	r3, r1
 8000854:	43db      	mvns	r3, r3
 8000856:	4619      	mov	r1, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	400a      	ands	r2, r1
 800085e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	6859      	ldr	r1, [r3, #4]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	697a      	ldr	r2, [r7, #20]
 800086c:	430a      	orrs	r2, r1
 800086e:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]

	// 5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	795b      	ldrb	r3, [r3, #5]
 8000878:	2b02      	cmp	r3, #2
 800087a:	d131      	bne.n	80008e0 <GPIO_Init+0x33c>
	{
		// configure the alternate function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	791b      	ldrb	r3, [r3, #4]
 8000880:	08db      	lsrs	r3, r3, #3
 8000882:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	791b      	ldrb	r3, [r3, #4]
 8000888:	f003 0307 	and.w	r3, r3, #7
 800088c:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	7c3a      	ldrb	r2, [r7, #16]
 8000894:	3208      	adds	r2, #8
 8000896:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	220f      	movs	r2, #15
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	43db      	mvns	r3, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	7c3a      	ldrb	r2, [r7, #16]
 80008ae:	4001      	ands	r1, r0
 80008b0:	3208      	adds	r2, #8
 80008b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	7c3a      	ldrb	r2, [r7, #16]
 80008bc:	3208      	adds	r2, #8
 80008be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	7a5b      	ldrb	r3, [r3, #9]
 80008c6:	461a      	mov	r2, r3
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	4618      	mov	r0, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	7c3a      	ldrb	r2, [r7, #16]
 80008d8:	4301      	orrs	r1, r0
 80008da:	3208      	adds	r2, #8
 80008dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

	temp = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
}
 80008e4:	bf00      	nop
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40013800 	.word	0x40013800
 80008f4:	40013c00 	.word	0x40013c00

080008f8 <I2C_Write_ExecuteAddressPhase>:
{
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
}

static void I2C_Write_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	460b      	mov	r3, r1
 8000902:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1; //makes space for R/WR bit
 8000904:	78fb      	ldrb	r3, [r7, #3]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1 << 0); //clear 0th bit so SlaveAddr is Slave address + r/nw bit (write = 0)
 800090a:	78fb      	ldrb	r3, [r7, #3]
 800090c:	f023 0301 	bic.w	r3, r3, #1
 8000910:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000912:	78fa      	ldrb	r2, [r7, #3]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	611a      	str	r2, [r3, #16]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <I2C_Read_ExecuteAddressPhase>:

static void I2C_Read_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1; //makes space for R/WR bit
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= (1 << 0); //set 0th bit so SlaveAddr is Slave address + r/nw bit (read = 1)
 8000936:	78fb      	ldrb	r3, [r7, #3]
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800093e:	78fa      	ldrb	r2, [r7, #3]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	611a      	str	r2, [r3, #16]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	// Check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	2b00      	cmp	r3, #0
 8000964:	d01f      	beq.n	80009a6 <I2C_ClearADDRFlag+0x56>
	{
		// Device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7f1b      	ldrb	r3, [r3, #28]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d112      	bne.n	8000994 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize == 1)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6a1b      	ldr	r3, [r3, #32]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d11f      	bne.n	80009b6 <I2C_ClearADDRFlag+0x66>
			{
				// First disable ACKing
				I2C_ACK_EN_DI(pI2CHandle->pI2Cx, DISABLE);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f000 f862 	bl	8000a46 <I2C_ACK_EN_DI>

				// Clear ADDR flag by reading SR1 and then reading SR2

				dummyRead = pI2CHandle->pI2Cx->SR1;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR1;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	695b      	ldr	r3, [r3, #20]
 8000990:	60fb      	str	r3, [r7, #12]

		dummyRead = pI2CHandle->pI2Cx->SR1;
		dummyRead = pI2CHandle->pI2Cx->SR1;
		(void)dummyRead; //suppress unused variable warning
	}
}
 8000992:	e010      	b.n	80009b6 <I2C_ClearADDRFlag+0x66>
			dummyRead = pI2CHandle->pI2Cx->SR1;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR1;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	60fb      	str	r3, [r7, #12]
}
 80009a4:	e007      	b.n	80009b6 <I2C_ClearADDRFlag+0x66>
		dummyRead = pI2CHandle->pI2Cx->SR1;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR1;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	695b      	ldr	r3, [r3, #20]
 80009b4:	60fb      	str	r3, [r7, #12]
}
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	601a      	str	r2, [r3, #0]
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <I2C_SlaveEnableDisableCallbackEvents>:

void I2C_SlaveEnableDisableCallbackEvents(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
 80009e6:	460b      	mov	r3, r1
 80009e8:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80009ea:	78fb      	ldrb	r3, [r7, #3]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d112      	bne.n	8000a16 <I2C_SlaveEnableDisableCallbackEvents+0x38>
	{
		pI2Cx->CR2 |= (1 << I2C_CR2_ITEVTEN);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= (1 << I2C_CR2_ITBUFEN);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= (1 << I2C_CR2_ITERREN);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	605a      	str	r2, [r3, #4]
	{
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
	}
}
 8000a14:	e011      	b.n	8000a3a <I2C_SlaveEnableDisableCallbackEvents+0x5c>
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	605a      	str	r2, [r3, #4]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <I2C_ACK_EN_DI>:

static void I2C_ACK_EN_DI(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
 8000a4e:	460b      	mov	r3, r1
 8000a50:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a52:	78fb      	ldrb	r3, [r7, #3]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d106      	bne.n	8000a66 <I2C_ACK_EN_DI+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8000a64:	e005      	b.n	8000a72 <I2C_ACK_EN_DI+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	601a      	str	r2, [r3, #0]
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <I2C_PeriClockControl>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d120      	bne.n	8000ad4 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a22      	ldr	r2, [pc, #136]	@ (8000b20 <I2C_PeriClockControl+0xa0>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d106      	bne.n	8000aa8 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000a9a:	4b22      	ldr	r3, [pc, #136]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	4a21      	ldr	r2, [pc, #132]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000aa0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000aa4:	6413      	str	r3, [r2, #64]	@ 0x40
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 8000aa6:	e035      	b.n	8000b14 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8000b28 <I2C_PeriClockControl+0xa8>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d106      	bne.n	8000abe <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000ab6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000aba:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000abc:	e02a      	b.n	8000b14 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8000b2c <I2C_PeriClockControl+0xac>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d126      	bne.n	8000b14 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000ac6:	4b17      	ldr	r3, [pc, #92]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	4a16      	ldr	r2, [pc, #88]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000acc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ad0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ad2:	e01f      	b.n	8000b14 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <I2C_PeriClockControl+0xa0>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d106      	bne.n	8000aea <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 8000adc:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae0:	4a10      	ldr	r2, [pc, #64]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000ae2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000ae6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ae8:	e014      	b.n	8000b14 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a0e      	ldr	r2, [pc, #56]	@ (8000b28 <I2C_PeriClockControl+0xa8>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d106      	bne.n	8000b00 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8000af2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af6:	4a0b      	ldr	r2, [pc, #44]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000af8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000afc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000afe:	e009      	b.n	8000b14 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <I2C_PeriClockControl+0xac>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d105      	bne.n	8000b14 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0c:	4a05      	ldr	r2, [pc, #20]	@ (8000b24 <I2C_PeriClockControl+0xa4>)
 8000b0e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000b12:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	40005400 	.word	0x40005400
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40005800 	.word	0x40005800
 8000b2c:	40005c00 	.word	0x40005c00

08000b30 <RCC_GetPLLOutputClock>:

/*
 * Init and De-init (reset)
 */
uint32_t RCC_GetPLLOutputClock(void) /**** Not implemented ***/
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

	return 0;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <RCC_GetPCLK1Value>:

uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};

uint32_t RCC_GetPCLK1Value(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahb1p,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3); // only want bit positions 0 and 1
 8000b46:	4b26      	ldr	r3, [pc, #152]	@ (8000be0 <RCC_GetPCLK1Value+0xa0>)
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	089b      	lsrs	r3, r3, #2
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	f003 0303 	and.w	r3, r3, #3
 8000b52:	727b      	strb	r3, [r7, #9]

	if (clksrc == 0)
 8000b54:	7a7b      	ldrb	r3, [r7, #9]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d102      	bne.n	8000b60 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000b5a:	4b22      	ldr	r3, [pc, #136]	@ (8000be4 <RCC_GetPCLK1Value+0xa4>)
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	e00b      	b.n	8000b78 <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 1)
 8000b60:	7a7b      	ldrb	r3, [r7, #9]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d102      	bne.n	8000b6c <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000b66:	4b20      	ldr	r3, [pc, #128]	@ (8000be8 <RCC_GetPCLK1Value+0xa8>)
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	e005      	b.n	8000b78 <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 2)
 8000b6c:	7a7b      	ldrb	r3, [r7, #9]
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d102      	bne.n	8000b78 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock(); // not implemented
 8000b72:	f7ff ffdd 	bl	8000b30 <RCC_GetPLLOutputClock>
 8000b76:	60f8      	str	r0, [r7, #12]
	}

	//ahb1 pre-scaler
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000b78:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <RCC_GetPCLK1Value+0xa0>)
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	091b      	lsrs	r3, r3, #4
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	f003 030f 	and.w	r3, r3, #15
 8000b84:	723b      	strb	r3, [r7, #8]

	if (temp < 8)
 8000b86:	7a3b      	ldrb	r3, [r7, #8]
 8000b88:	2b07      	cmp	r3, #7
 8000b8a:	d802      	bhi.n	8000b92 <RCC_GetPCLK1Value+0x52>
	{
		ahb1p = 1;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	72fb      	strb	r3, [r7, #11]
 8000b90:	e005      	b.n	8000b9e <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahb1p = AHB1_PreScaler[temp - 8]; // if ahb1 prescaler greater than 8, fetch first value of array
 8000b92:	7a3b      	ldrb	r3, [r7, #8]
 8000b94:	3b08      	subs	r3, #8
 8000b96:	4a15      	ldr	r2, [pc, #84]	@ (8000bec <RCC_GetPCLK1Value+0xac>)
 8000b98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b9c:	72fb      	strb	r3, [r7, #11]
	}

	//apb1 pre-scaler
	temp = ((RCC->CFGR >> 10) & 0x7);
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <RCC_GetPCLK1Value+0xa0>)
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	0a9b      	lsrs	r3, r3, #10
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	723b      	strb	r3, [r7, #8]

	if (temp < 4)
 8000bac:	7a3b      	ldrb	r3, [r7, #8]
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	d802      	bhi.n	8000bb8 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	72bb      	strb	r3, [r7, #10]
 8000bb6:	e005      	b.n	8000bc4 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		apb1p = APB1_PreScaler[temp - 4]; // if apb1 prescaler greater than 4, fetch first value of array
 8000bb8:	7a3b      	ldrb	r3, [r7, #8]
 8000bba:	3b04      	subs	r3, #4
 8000bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf0 <RCC_GetPCLK1Value+0xb0>)
 8000bbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bc2:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahb1p) / apb1p;
 8000bc4:	7afb      	ldrb	r3, [r7, #11]
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bcc:	7abb      	ldrb	r3, [r7, #10]
 8000bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd2:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000bd4:	687b      	ldr	r3, [r7, #4]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800
 8000be4:	00f42400 	.word	0x00f42400
 8000be8:	007a1200 	.word	0x007a1200
 8000bec:	20000020 	.word	0x20000020
 8000bf0:	20000030 	.word	0x20000030

08000bf4 <I2C_Init>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]

	// Enable clock for I2Cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2101      	movs	r1, #1
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff3a 	bl	8000a80 <I2C_PeriClockControl>
//	// ACK control bit < -- broken, Cannot set ACK when PE = 0, moved to I2C_Peripheral Control
//	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
//	pI2CHandle->pI2Cx->CR1 = tempreg;

	// FREQ Configuration
	tempreg = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 8000c10:	f7ff ff96 	bl	8000b40 <RCC_GetPCLK1Value>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4a4c      	ldr	r2, [pc, #304]	@ (8000d48 <I2C_Init+0x154>)
 8000c18:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1c:	0c9b      	lsrs	r3, r3, #18
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F); // mask all except first 5 bits
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	68fa      	ldr	r2, [r7, #12]
 8000c2a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000c2e:	605a      	str	r2, [r3, #4]

	// Device Own Address Configuration (OAR1)
	tempreg = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	7a1b      	ldrb	r3, [r3, #8]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c46:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	609a      	str	r2, [r3, #8]

	// CCR Configuration
	tempreg = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
	uint16_t ccr_value = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	817b      	strh	r3, [r7, #10]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	4a3b      	ldr	r2, [pc, #236]	@ (8000d4c <I2C_Init+0x158>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d80f      	bhi.n	8000c82 <I2C_Init+0x8e>
	{
		// standard mode
		ccr_value =(RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000c62:	f7ff ff6d 	bl	8000b40 <RCC_GetPCLK1Value>
 8000c66:	4602      	mov	r2, r0
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000c74:	897b      	ldrh	r3, [r7, #10]
 8000c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	e02c      	b.n	8000cdc <I2C_Init+0xe8>
	}
	else
	{
		// fast mode
		tempreg |= (1 << 15); //set fast mode
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c88:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	895b      	ldrh	r3, [r3, #10]
 8000c8e:	039b      	lsls	r3, r3, #14
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	895b      	ldrh	r3, [r3, #10]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d10b      	bne.n	8000cb6 <I2C_Init+0xc2>
		{
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000c9e:	f7ff ff4f 	bl	8000b40 <RCC_GetPCLK1Value>
 8000ca2:	4601      	mov	r1, r0
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	4413      	add	r3, r2
 8000cae:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cb2:	817b      	strh	r3, [r7, #10]
 8000cb4:	e00c      	b.n	8000cd0 <I2C_Init+0xdc>
		}
		else
		{
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000cb6:	f7ff ff43 	bl	8000b40 <RCC_GetPCLK1Value>
 8000cba:	4601      	mov	r1, r0
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685a      	ldr	r2, [r3, #4]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	009a      	lsls	r2, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cce:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000cd0:	897b      	ldrh	r3, [r7, #10]
 8000cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	tempreg = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	4a17      	ldr	r2, [pc, #92]	@ (8000d4c <I2C_Init+0x158>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d809      	bhi.n	8000d06 <I2C_Init+0x112>
	{
		// standard mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000cf2:	f7ff ff25 	bl	8000b40 <RCC_GetPCLK1Value>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4a13      	ldr	r2, [pc, #76]	@ (8000d48 <I2C_Init+0x154>)
 8000cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfe:	0c9b      	lsrs	r3, r3, #18
 8000d00:	3301      	adds	r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	e00d      	b.n	8000d22 <I2C_Init+0x12e>
	}
	else
	{
		// fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300U) / 1000000000U) + 1;
 8000d06:	f7ff ff1b 	bl	8000b40 <RCC_GetPCLK1Value>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000d10:	fb02 f303 	mul.w	r3, r2, r3
 8000d14:	0a5b      	lsrs	r3, r3, #9
 8000d16:	4a0e      	ldr	r2, [pc, #56]	@ (8000d50 <I2C_Init+0x15c>)
 8000d18:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1c:	09db      	lsrs	r3, r3, #7
 8000d1e:	3301      	adds	r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE = 0;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2200      	movs	r2, #0
 8000d28:	621a      	str	r2, [r3, #32]
	pI2CHandle->pI2Cx->TRISE |= (tempreg & 0x3F);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6a19      	ldr	r1, [r3, #32]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	621a      	str	r2, [r3, #32]
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	431bde83 	.word	0x431bde83
 8000d4c:	000186a0 	.word	0x000186a0
 8000d50:	00044b83 	.word	0x00044b83

08000d54 <I2C_IRQInterruptConfig>:
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	460a      	mov	r2, r1
 8000d5e:	71fb      	strb	r3, [r7, #7]
 8000d60:	4613      	mov	r3, r2
 8000d62:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE)
 8000d64:	79bb      	ldrb	r3, [r7, #6]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d133      	bne.n	8000dd2 <I2C_IRQInterruptConfig+0x7e>
		{
			if(IRQNumber <= 31)
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	2b1f      	cmp	r3, #31
 8000d6e:	d80a      	bhi.n	8000d86 <I2C_IRQInterruptConfig+0x32>
			{
				//program ISER0
				*NVIC_ISER0 |= (1 << IRQNumber);
 8000d70:	4b35      	ldr	r3, [pc, #212]	@ (8000e48 <I2C_IRQInterruptConfig+0xf4>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	79fa      	ldrb	r2, [r7, #7]
 8000d76:	2101      	movs	r1, #1
 8000d78:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4a32      	ldr	r2, [pc, #200]	@ (8000e48 <I2C_IRQInterruptConfig+0xf4>)
 8000d80:	430b      	orrs	r3, r1
 8000d82:	6013      	str	r3, [r2, #0]
			{
				//ICER2
				*NVIC_ICER2 |= (1 << IRQNumber % 64);
			}
		}
}
 8000d84:	e059      	b.n	8000e3a <I2C_IRQInterruptConfig+0xe6>
			else if (IRQNumber > 32 && IRQNumber < 64)
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b20      	cmp	r3, #32
 8000d8a:	d90f      	bls.n	8000dac <I2C_IRQInterruptConfig+0x58>
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d90:	d80c      	bhi.n	8000dac <I2C_IRQInterruptConfig+0x58>
				*NVIC_ISER1 |= (1 << IRQNumber % 32);
 8000d92:	4b2e      	ldr	r3, [pc, #184]	@ (8000e4c <I2C_IRQInterruptConfig+0xf8>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	79fa      	ldrb	r2, [r7, #7]
 8000d98:	f002 021f 	and.w	r2, r2, #31
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000da2:	4611      	mov	r1, r2
 8000da4:	4a29      	ldr	r2, [pc, #164]	@ (8000e4c <I2C_IRQInterruptConfig+0xf8>)
 8000da6:	430b      	orrs	r3, r1
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	e046      	b.n	8000e3a <I2C_IRQInterruptConfig+0xe6>
			else if (IRQNumber > 64 && IRQNumber < 96)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	2b40      	cmp	r3, #64	@ 0x40
 8000db0:	d943      	bls.n	8000e3a <I2C_IRQInterruptConfig+0xe6>
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b5f      	cmp	r3, #95	@ 0x5f
 8000db6:	d840      	bhi.n	8000e3a <I2C_IRQInterruptConfig+0xe6>
				*NVIC_ISER2 |= (1 << IRQNumber % 64);
 8000db8:	4b25      	ldr	r3, [pc, #148]	@ (8000e50 <I2C_IRQInterruptConfig+0xfc>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	79fa      	ldrb	r2, [r7, #7]
 8000dbe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4a21      	ldr	r2, [pc, #132]	@ (8000e50 <I2C_IRQInterruptConfig+0xfc>)
 8000dcc:	430b      	orrs	r3, r1
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	e033      	b.n	8000e3a <I2C_IRQInterruptConfig+0xe6>
			if(IRQNumber <= 31)
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2b1f      	cmp	r3, #31
 8000dd6:	d80a      	bhi.n	8000dee <I2C_IRQInterruptConfig+0x9a>
				*NVIC_ICER0 |= (1 << IRQNumber);
 8000dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e54 <I2C_IRQInterruptConfig+0x100>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	79fa      	ldrb	r2, [r7, #7]
 8000dde:	2101      	movs	r1, #1
 8000de0:	fa01 f202 	lsl.w	r2, r1, r2
 8000de4:	4611      	mov	r1, r2
 8000de6:	4a1b      	ldr	r2, [pc, #108]	@ (8000e54 <I2C_IRQInterruptConfig+0x100>)
 8000de8:	430b      	orrs	r3, r1
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	e025      	b.n	8000e3a <I2C_IRQInterruptConfig+0xe6>
			else if (IRQNumber > 32 && IRQNumber < 64)
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2b20      	cmp	r3, #32
 8000df2:	d90f      	bls.n	8000e14 <I2C_IRQInterruptConfig+0xc0>
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000df8:	d80c      	bhi.n	8000e14 <I2C_IRQInterruptConfig+0xc0>
				*NVIC_ICER1 |= (1 << IRQNumber % 32);
 8000dfa:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <I2C_IRQInterruptConfig+0x104>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	79fa      	ldrb	r2, [r7, #7]
 8000e00:	f002 021f 	and.w	r2, r2, #31
 8000e04:	2101      	movs	r1, #1
 8000e06:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4a12      	ldr	r2, [pc, #72]	@ (8000e58 <I2C_IRQInterruptConfig+0x104>)
 8000e0e:	430b      	orrs	r3, r1
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	e012      	b.n	8000e3a <I2C_IRQInterruptConfig+0xe6>
			else if (IRQNumber > 64 && IRQNumber < 96)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	2b40      	cmp	r3, #64	@ 0x40
 8000e18:	d90f      	bls.n	8000e3a <I2C_IRQInterruptConfig+0xe6>
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b5f      	cmp	r3, #95	@ 0x5f
 8000e1e:	d80c      	bhi.n	8000e3a <I2C_IRQInterruptConfig+0xe6>
				*NVIC_ICER2 |= (1 << IRQNumber % 64);
 8000e20:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <I2C_IRQInterruptConfig+0x108>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	79fa      	ldrb	r2, [r7, #7]
 8000e26:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e30:	4611      	mov	r1, r2
 8000e32:	4a0a      	ldr	r2, [pc, #40]	@ (8000e5c <I2C_IRQInterruptConfig+0x108>)
 8000e34:	430b      	orrs	r3, r1
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	e7ff      	b.n	8000e3a <I2C_IRQInterruptConfig+0xe6>
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000e104 	.word	0xe000e104
 8000e50:	e000e108 	.word	0xe000e108
 8000e54:	e000e180 	.word	0xe000e180
 8000e58:	e000e184 	.word	0xe000e184
 8000e5c:	e000e188 	.word	0xe000e188

08000e60 <I2C_PeripheralControl>:
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d10a      	bne.n	8000e88 <I2C_PeripheralControl+0x28>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f043 0201 	orr.w	r2, r3, #1
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	601a      	str	r2, [r3, #0]

		// Can enable ACK now that PE = 1, moved from I2C_Init
		I2C_ACK_EN_DI(pI2Cx,ENABLE);
 8000e7e:	2101      	movs	r1, #1
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff fde0 	bl	8000a46 <I2C_ACK_EN_DI>
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8000e86:	e005      	b.n	8000e94 <I2C_PeripheralControl+0x34>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f023 0201 	bic.w	r2, r3, #1
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	601a      	str	r2, [r3, #0]
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <I2C_CloseReceiveData>:

void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	// Disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000eb2:	605a      	str	r2, [r3, #4]

	// Disable ITEVTEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000ec2:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_EN)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7a5b      	ldrb	r3, [r3, #9]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d105      	bne.n	8000ef0 <I2C_CloseReceiveData+0x54>
	{
		I2C_ACK_EN_DI(pI2CHandle->pI2Cx, ENABLE);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2101      	movs	r1, #1
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fdab 	bl	8000a46 <I2C_ACK_EN_DI>
	}
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <I2C_CloseSendData>:

void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	// Disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000f0e:	605a      	str	r2, [r3, #4]

	// Disable ITEVTEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000f1e:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <I2C_MasterHandleTXEInterrupt>:

static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->TxLen > 0)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d00f      	beq.n	8000f68 <I2C_MasterHandleTXEInterrupt+0x30>
	{
		//1. Load the data into DR

		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	781a      	ldrb	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	611a      	str	r2, [r3, #16]

		//2. Decrement TxLen

		pI2CHandle->TxLen--;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	1e5a      	subs	r2, r3, #1
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	615a      	str	r2, [r3, #20]

		//3. Increment Buffer Address

		pI2CHandle->pTxBuffer++;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	60da      	str	r2, [r3, #12]
	}
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <I2C_MasterHandleRXNEInterrupt>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	// Perform data reception

	if(pI2CHandle->RxSize == 1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a1b      	ldr	r3, [r3, #32]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d10b      	bne.n	8000f9c <I2C_MasterHandleRXNEInterrupt+0x28>
	{
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	691a      	ldr	r2, [r3, #16]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	701a      	strb	r2, [r3, #0]

		pI2CHandle->RxLen--;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	1e5a      	subs	r2, r3, #1
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxSize > 1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d91a      	bls.n	8000fda <I2C_MasterHandleRXNEInterrupt+0x66>
	{
		if(pI2CHandle->RxLen == 2)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d105      	bne.n	8000fb8 <I2C_MasterHandleRXNEInterrupt+0x44>
		{
			//clear ACk but
			I2C_ACK_EN_DI(pI2CHandle->pI2Cx, DISABLE);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fd47 	bl	8000a46 <I2C_ACK_EN_DI>
		}

		// Read DR
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	691a      	ldr	r2, [r3, #16]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	701a      	strb	r2, [r3, #0]
		pI2CHandle->pRxBuffer++;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen--;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	1e5a      	subs	r2, r3, #1
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	619a      	str	r2, [r3, #24]
	}

	if(pI2CHandle->RxLen == 0)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d110      	bne.n	8001004 <I2C_MasterHandleRXNEInterrupt+0x90>
	{
		// Close I2C data reception and notify application


		//1. Generate STOP condition
		if(pI2CHandle->StartRepeated == I2C_NO_SR)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d104      	bne.n	8000ff6 <I2C_MasterHandleRXNEInterrupt+0x82>
		{
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fce4 	bl	80009be <I2C_GenerateStopCondition>
		}

		//2. Close I2C Rx
		I2C_CloseReceiveData(pI2CHandle);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ff50 	bl	8000e9c <I2C_CloseReceiveData>

		//3. Notify application
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff f970 	bl	80002e4 <I2C_ApplicationEventCallback>

	}
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <I2C_SlaveSendData>:

void I2C_SlaveSendData(I2C_RegDef_t *pI2Cx,uint8_t data)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = data;
 8001018:	78fa      	ldrb	r2, [r7, #3]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	611a      	str	r2, [r3, #16]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <I2C_SlaveReceiveData>:

uint8_t I2C_SlaveReceiveData(I2C_RegDef_t *pI2Cx)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
	return (uint8_t)pI2Cx->DR;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	b2db      	uxtb	r3, r3
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <I2C_EV_IRQHandling>:

void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]


	//1. Handle interrupt generated by SB (Start Bit) event, Start condition generated
	//	 Note: SB flag only applicable to Master mode, SB always 0 in slave mode

	temp1 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001056:	617b      	str	r3, [r7, #20]
	temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001062:	613b      	str	r3, [r7, #16]
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60fb      	str	r3, [r7, #12]

	if(temp1 && temp3)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d01b      	beq.n	80010ae <I2C_EV_IRQHandling+0x6a>
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d018      	beq.n	80010ae <I2C_EV_IRQHandling+0x6a>
	{
		// SB flag is set
		// Execute Address phase
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7f1b      	ldrb	r3, [r3, #28]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d108      	bne.n	8001096 <I2C_EV_IRQHandling+0x52>
		{
			I2C_Write_ExecuteAddressPhase(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	7f5b      	ldrb	r3, [r3, #29]
 800108c:	4619      	mov	r1, r3
 800108e:	4610      	mov	r0, r2
 8001090:	f7ff fc32 	bl	80008f8 <I2C_Write_ExecuteAddressPhase>
 8001094:	e00b      	b.n	80010ae <I2C_EV_IRQHandling+0x6a>
		}
		else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7f1b      	ldrb	r3, [r3, #28]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d107      	bne.n	80010ae <I2C_EV_IRQHandling+0x6a>
		{
			I2C_Read_ExecuteAddressPhase(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	7f5b      	ldrb	r3, [r3, #29]
 80010a6:	4619      	mov	r1, r3
 80010a8:	4610      	mov	r0, r2
 80010aa:	f7ff fc3b 	bl	8000924 <I2C_Read_ExecuteAddressPhase>

	//2. Handle interrupt generated by ADDR event
	//	 Note: When master mode, Address is sent
	//		   When slave mode, Address matched with own address

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	60fb      	str	r3, [r7, #12]

	if(temp1 && temp3)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <I2C_EV_IRQHandling+0x88>
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <I2C_EV_IRQHandling+0x88>
	{
		// ADDR flag is set
		// Clear flag
		I2C_ClearADDRFlag(pI2CHandle);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff fc42 	bl	8000950 <I2C_ClearADDRFlag>
	}

	//3. Handle interrupt generated by BTF (Byte Transfer Finished) event

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	60fb      	str	r3, [r7, #12]

	if(temp1 && temp3)
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d022      	beq.n	8001124 <I2C_EV_IRQHandling+0xe0>
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d01f      	beq.n	8001124 <I2C_EV_IRQHandling+0xe0>
	{
		// BTF flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	7f1b      	ldrb	r3, [r3, #28]
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d11b      	bne.n	8001124 <I2C_EV_IRQHandling+0xe0>
		{
			// Check if TXE is set
			if(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d014      	beq.n	8001124 <I2C_EV_IRQHandling+0xe0>
			{
				// BTF, TXE = 1
				if(pI2CHandle->TxLen == 0)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d110      	bne.n	8001124 <I2C_EV_IRQHandling+0xe0>
				{
					// Close Transmission

					//1. Generate STOP condition
					if(pI2CHandle->StartRepeated)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001108:	2b00      	cmp	r3, #0
 800110a:	d004      	beq.n	8001116 <I2C_EV_IRQHandling+0xd2>
					{
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fc54 	bl	80009be <I2C_GenerateStopCondition>
					}

					//2. Reset all member elements of handle structure
					I2C_CloseSendData(pI2CHandle);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff feee 	bl	8000ef8 <I2C_CloseSendData>

					//3. Notify the application that transmission is complete
					I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
 800111c:	2100      	movs	r1, #0
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff f8e0 	bl	80002e4 <I2C_ApplicationEventCallback>

	//4. Handle for interrupt generated by STOPF event
	//	 Note: Stop detection flag is only applicable to Slave mode
	//		   Never set in Master mode; below code will not be executed by master.

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	60fb      	str	r3, [r7, #12]

	if(temp1 && temp3)
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00c      	beq.n	8001150 <I2C_EV_IRQHandling+0x10c>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d009      	beq.n	8001150 <I2C_EV_IRQHandling+0x10c>
	{
		// STOPF flag is set
		//1. Clear STOPF: First read SR1 (done above in temp3..). Second write to CR1.

		pI2CHandle->pI2Cx->CR1 |= 0x0000; // won't affect CR1 but counts as a write to clear STOPF
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6812      	ldr	r2, [r2, #0]
 8001146:	601a      	str	r2, [r3, #0]

		//2. Notify the application that STOP is detected

		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);
 8001148:	2102      	movs	r1, #2
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff f8ca 	bl	80002e4 <I2C_ApplicationEventCallback>

	}

	//5. Handle interrupt generated by TXE event

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800115a:	60fb      	str	r3, [r7, #12]

	if(temp1 && temp2 && temp3)
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d01f      	beq.n	80011a2 <I2C_EV_IRQHandling+0x15e>
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d01c      	beq.n	80011a2 <I2C_EV_IRQHandling+0x15e>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d019      	beq.n	80011a2 <I2C_EV_IRQHandling+0x15e>
	{
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)) //check device mode
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	2b00      	cmp	r3, #0
 800117a:	d007      	beq.n	800118c <I2C_EV_IRQHandling+0x148>
		{
			// TXE flag is set
			// Perform Data Transmission

			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7f1b      	ldrb	r3, [r3, #28]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d10e      	bne.n	80011a2 <I2C_EV_IRQHandling+0x15e>
			{
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff fed7 	bl	8000f38 <I2C_MasterHandleTXEInterrupt>
 800118a:	e00a      	b.n	80011a2 <I2C_EV_IRQHandling+0x15e>
			}
		}
		else //slave mode
		{
			// slave in transmitter mode?
			if(pI2CHandle->pI2Cx->SR2 &( 1 << I2C_SR2_TRA))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <I2C_EV_IRQHandling+0x15e>
			{
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_REQ);
 800119a:	2108      	movs	r1, #8
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff f8a1 	bl	80002e4 <I2C_ApplicationEventCallback>
		}
	}

	//6. Handle interrupt generated by RXNE event

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RXNE);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011ac:	60fb      	str	r3, [r7, #12]

	if(temp1 && temp2 && temp3)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d01f      	beq.n	80011f4 <I2C_EV_IRQHandling+0x1b0>
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d01c      	beq.n	80011f4 <I2C_EV_IRQHandling+0x1b0>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d019      	beq.n	80011f4 <I2C_EV_IRQHandling+0x1b0>
	{
		if(pI2CHandle->pI2Cx->SR2 & (1 >> I2C_SR2_MSL)) // check device mode
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d007      	beq.n	80011de <I2C_EV_IRQHandling+0x19a>
		{
			// Device is master
			// RXNE flag is set
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7f1b      	ldrb	r3, [r3, #28]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d10e      	bne.n	80011f4 <I2C_EV_IRQHandling+0x1b0>
			{
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff fecc 	bl	8000f74 <I2C_MasterHandleRXNEInterrupt>
			{
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
			}
		}
	}
}
 80011dc:	e00a      	b.n	80011f4 <I2C_EV_IRQHandling+0x1b0>
			if(!(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA)))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d103      	bne.n	80011f4 <I2C_EV_IRQHandling+0x1b0>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
 80011ec:	2109      	movs	r1, #9
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff f878 	bl	80002e4 <I2C_ApplicationEventCallback>
}
 80011f4:	bf00      	nop
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <I2C_ERR_IRQHandling>:
 *
 * @Note              - none
 *************************************************************************************************************/

void I2C_ERR_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800120e:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & (I2C_BERR_FLAG);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800121a:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00e      	beq.n	8001240 <I2C_ERR_IRQHandling+0x44>
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00b      	beq.n	8001240 <I2C_ERR_IRQHandling+0x44>
	{
		//This is Bus error

		//clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~(I2C_BERR_FLAG);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	695a      	ldr	r2, [r3, #20]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001236:	615a      	str	r2, [r3, #20]

		//notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 8001238:	2103      	movs	r1, #3
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff f852 	bl	80002e4 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800124a:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00e      	beq.n	8001270 <I2C_ERR_IRQHandling+0x74>
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00b      	beq.n	8001270 <I2C_ERR_IRQHandling+0x74>
	{
		//This is arbitration lost error

		//clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~(I2C_ARLO_FLAG);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	695a      	ldr	r2, [r3, #20]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001266:	615a      	str	r2, [r3, #20]

		//notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_ARLO);
 8001268:	2104      	movs	r1, #4
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff f83a 	bl	80002e4 <I2C_ApplicationEventCallback>

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800127a:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00e      	beq.n	80012a0 <I2C_ERR_IRQHandling+0xa4>
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00b      	beq.n	80012a0 <I2C_ERR_IRQHandling+0xa4>
	{
		//This is ACK failure error

	    //clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~(I2C_AF_FLAG);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	695a      	ldr	r2, [r3, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001296:	615a      	str	r2, [r3, #20]

		//notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_AF);
 8001298:	2105      	movs	r1, #5
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff f822 	bl	80002e4 <I2C_ApplicationEventCallback>
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012aa:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00e      	beq.n	80012d0 <I2C_ERR_IRQHandling+0xd4>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00b      	beq.n	80012d0 <I2C_ERR_IRQHandling+0xd4>
	{
		//This is Overrun/underrun

	    //clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~(I2C_OVR_FLAG);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	695a      	ldr	r2, [r3, #20]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012c6:	615a      	str	r2, [r3, #20]

		//notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_OVR);
 80012c8:	2106      	movs	r1, #6
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff f80a 	bl	80002e4 <I2C_ApplicationEventCallback>
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012da:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00e      	beq.n	8001300 <I2C_ERR_IRQHandling+0x104>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00b      	beq.n	8001300 <I2C_ERR_IRQHandling+0x104>
	{
		//This is Time out error

	    //clear the Timeout error flag
		pI2CHandle->pI2Cx->SR1 &= ~(I2C_TIMEOUT_FLAG);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	695a      	ldr	r2, [r3, #20]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80012f6:	615a      	str	r2, [r3, #20]

		//notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_TIMEOUT);
 80012f8:	2107      	movs	r1, #7
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7fe fff2 	bl	80002e4 <I2C_ApplicationEventCallback>
	}

}
 8001300:	bf00      	nop
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <__libc_init_array>:
 8001308:	b570      	push	{r4, r5, r6, lr}
 800130a:	4d0d      	ldr	r5, [pc, #52]	@ (8001340 <__libc_init_array+0x38>)
 800130c:	4c0d      	ldr	r4, [pc, #52]	@ (8001344 <__libc_init_array+0x3c>)
 800130e:	1b64      	subs	r4, r4, r5
 8001310:	10a4      	asrs	r4, r4, #2
 8001312:	2600      	movs	r6, #0
 8001314:	42a6      	cmp	r6, r4
 8001316:	d109      	bne.n	800132c <__libc_init_array+0x24>
 8001318:	4d0b      	ldr	r5, [pc, #44]	@ (8001348 <__libc_init_array+0x40>)
 800131a:	4c0c      	ldr	r4, [pc, #48]	@ (800134c <__libc_init_array+0x44>)
 800131c:	f000 f818 	bl	8001350 <_init>
 8001320:	1b64      	subs	r4, r4, r5
 8001322:	10a4      	asrs	r4, r4, #2
 8001324:	2600      	movs	r6, #0
 8001326:	42a6      	cmp	r6, r4
 8001328:	d105      	bne.n	8001336 <__libc_init_array+0x2e>
 800132a:	bd70      	pop	{r4, r5, r6, pc}
 800132c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001330:	4798      	blx	r3
 8001332:	3601      	adds	r6, #1
 8001334:	e7ee      	b.n	8001314 <__libc_init_array+0xc>
 8001336:	f855 3b04 	ldr.w	r3, [r5], #4
 800133a:	4798      	blx	r3
 800133c:	3601      	adds	r6, #1
 800133e:	e7f2      	b.n	8001326 <__libc_init_array+0x1e>
 8001340:	08001370 	.word	0x08001370
 8001344:	08001370 	.word	0x08001370
 8001348:	08001370 	.word	0x08001370
 800134c:	08001374 	.word	0x08001374

08001350 <_init>:
 8001350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001352:	bf00      	nop
 8001354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001356:	bc08      	pop	{r3}
 8001358:	469e      	mov	lr, r3
 800135a:	4770      	bx	lr

0800135c <_fini>:
 800135c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800135e:	bf00      	nop
 8001360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001362:	bc08      	pop	{r3}
 8001364:	469e      	mov	lr, r3
 8001366:	4770      	bx	lr
