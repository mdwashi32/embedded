
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bf8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d80  08000d80  00002030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d80  08000d80  00002030  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000d80  08000d80  00001d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000d88  08000d88  00002030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d88  08000d88  00001d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d8c  08000d8c  00001d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  08000d90  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002030  2**0
                  CONTENTS
 10 .bss          00000028  20000030  20000030  00002030  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000058  20000058  00002030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002030  2**0
                  CONTENTS, READONLY
 13 .debug_info   000012d5  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000524  00000000  00000000  00003335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000160  00000000  00000000  00003860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fe  00000000  00000000  000039c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000026ce  00000000  00000000  00003abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a2c  00000000  00000000  0000618c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a3c8  00000000  00000000  00007bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00011f80  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004d8  00000000  00000000  00011fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  0001249c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000d68 	.word	0x08000d68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	08000d68 	.word	0x08000d68

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <delay>:

// data to be sent
uint8_t data[] = "Hello world!"; // Arduino sketch, Arduino Wire library has transfer limit of
								 // 32 bytes per transaction
void delay(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e002      	b.n	80001ea <delay+0x12>
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a04      	ldr	r2, [pc, #16]	@ (8000200 <delay+0x28>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d9f8      	bls.n	80001e4 <delay+0xc>
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr
 8000200:	0003d08f 	.word	0x0003d08f

08000204 <I2C1_GPIOInits>:

void I2C1_GPIOInits()
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 800020a:	4b0e      	ldr	r3, [pc, #56]	@ (8000244 <I2C1_GPIOInits+0x40>)
 800020c:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800020e:	2302      	movs	r3, #2
 8000210:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000212:	2301      	movs	r3, #1
 8000214:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000216:	2301      	movs	r3, #1
 8000218:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800021a:	2304      	movs	r3, #4
 800021c:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800021e:	2302      	movs	r3, #2
 8000220:	72bb      	strb	r3, [r7, #10]

	// SCL PB6
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000222:	2306      	movs	r3, #6
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f97b 	bl	8000524 <GPIO_Init>

	// SDA PB9
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 800022e:	2309      	movs	r3, #9
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f975 	bl	8000524 <GPIO_Init>
}
 800023a:	bf00      	nop
 800023c:	3710      	adds	r7, #16
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40020400 	.word	0x40020400

08000248 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 800024c:	4b09      	ldr	r3, [pc, #36]	@ (8000274 <I2C1_Inits+0x2c>)
 800024e:	4a0a      	ldr	r2, [pc, #40]	@ (8000278 <I2C1_Inits+0x30>)
 8000250:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_EN;
 8000252:	4b08      	ldr	r3, [pc, #32]	@ (8000274 <I2C1_Inits+0x2c>)
 8000254:	2201      	movs	r2, #1
 8000256:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 8000258:	4b06      	ldr	r3, [pc, #24]	@ (8000274 <I2C1_Inits+0x2c>)
 800025a:	2261      	movs	r2, #97	@ 0x61
 800025c:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800025e:	4b05      	ldr	r3, [pc, #20]	@ (8000274 <I2C1_Inits+0x2c>)
 8000260:	2200      	movs	r2, #0
 8000262:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000264:	4b03      	ldr	r3, [pc, #12]	@ (8000274 <I2C1_Inits+0x2c>)
 8000266:	4a05      	ldr	r2, [pc, #20]	@ (800027c <I2C1_Inits+0x34>)
 8000268:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800026a:	4802      	ldr	r0, [pc, #8]	@ (8000274 <I2C1_Inits+0x2c>)
 800026c:	f000 fc1a 	bl	8000aa4 <I2C_Init>
}
 8000270:	bf00      	nop
 8000272:	bd80      	pop	{r7, pc}
 8000274:	2000004c 	.word	0x2000004c
 8000278:	40005400 	.word	0x40005400
 800027c:	000186a0 	.word	0x000186a0

08000280 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;
	//button
	GpioBtn.pGPIOx = GPIOA;
 8000286:	4b09      	ldr	r3, [pc, #36]	@ (80002ac <GPIO_ButtonInit+0x2c>)
 8000288:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800028a:	2300      	movs	r3, #0
 800028c:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800028e:	2300      	movs	r3, #0
 8000290:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000292:	2302      	movs	r3, #2
 8000294:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000296:	2300      	movs	r3, #0
 8000298:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioBtn);
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f941 	bl	8000524 <GPIO_Init>

}
 80002a2:	bf00      	nop
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40020000 	.word	0x40020000

080002b0 <main>:


int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	// Initialize GPIO button
	GPIO_ButtonInit();
 80002b4:	f7ff ffe4 	bl	8000280 <GPIO_ButtonInit>

	// Initialize GPIO pins as I2C1 peripheral pins
	I2C1_GPIOInits();
 80002b8:	f7ff ffa4 	bl	8000204 <I2C1_GPIOInits>

	// Initialize I2C1 peripheral configuration
	I2C1_Inits();
 80002bc:	f7ff ffc4 	bl	8000248 <I2C1_Inits>

	// Enable I2C1 peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80002c0:	2101      	movs	r1, #1
 80002c2:	480b      	ldr	r0, [pc, #44]	@ (80002f0 <main+0x40>)
 80002c4:	f000 fd0a 	bl	8000cdc <I2C_PeripheralControl>

	// Wait for button press
	while(1)
	{	// Wait for button press
		while(! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80002c8:	bf00      	nop
 80002ca:	2100      	movs	r1, #0
 80002cc:	4809      	ldr	r0, [pc, #36]	@ (80002f4 <main+0x44>)
 80002ce:	f000 fad3 	bl	8000878 <GPIO_ReadFromInputPin>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d0f8      	beq.n	80002ca <main+0x1a>

		// ~200 ms delay to avoid button de-bouncing
		delay();
 80002d8:	f7ff ff7e 	bl	80001d8 <delay>

		// Send Data to Slave
 		I2C_MasterSendData(&I2C1Handle, data, strlen((char*)data), SLAVE_ADDR);
 80002dc:	4806      	ldr	r0, [pc, #24]	@ (80002f8 <main+0x48>)
 80002de:	f7ff ff73 	bl	80001c8 <strlen>
 80002e2:	4602      	mov	r2, r0
 80002e4:	2368      	movs	r3, #104	@ 0x68
 80002e6:	4904      	ldr	r1, [pc, #16]	@ (80002f8 <main+0x48>)
 80002e8:	4804      	ldr	r0, [pc, #16]	@ (80002fc <main+0x4c>)
 80002ea:	f000 fc9f 	bl	8000c2c <I2C_MasterSendData>
		while(! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80002ee:	e7eb      	b.n	80002c8 <main+0x18>
 80002f0:	40005400 	.word	0x40005400
 80002f4:	40020000 	.word	0x40020000
 80002f8:	20000000 	.word	0x20000000
 80002fc:	2000004c 	.word	0x2000004c

08000300 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000300:	480d      	ldr	r0, [pc, #52]	@ (8000338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000302:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000304:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000308:	480c      	ldr	r0, [pc, #48]	@ (800033c <LoopForever+0x6>)
  ldr r1, =_edata
 800030a:	490d      	ldr	r1, [pc, #52]	@ (8000340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800030c:	4a0d      	ldr	r2, [pc, #52]	@ (8000344 <LoopForever+0xe>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000310:	e002      	b.n	8000318 <LoopCopyDataInit>

08000312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000316:	3304      	adds	r3, #4

08000318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800031c:	d3f9      	bcc.n	8000312 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031e:	4a0a      	ldr	r2, [pc, #40]	@ (8000348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000320:	4c0a      	ldr	r4, [pc, #40]	@ (800034c <LoopForever+0x16>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000324:	e001      	b.n	800032a <LoopFillZerobss>

08000326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000328:	3204      	adds	r2, #4

0800032a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800032c:	d3fb      	bcc.n	8000326 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032e:	f000 fcf7 	bl	8000d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000332:	f7ff ffbd 	bl	80002b0 <main>

08000336 <LoopForever>:

LoopForever:
  b LoopForever
 8000336:	e7fe      	b.n	8000336 <LoopForever>
  ldr   r0, =_estack
 8000338:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800033c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000340:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000344:	08000d90 	.word	0x08000d90
  ldr r2, =_sbss
 8000348:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 800034c:	20000058 	.word	0x20000058

08000350 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000350:	e7fe      	b.n	8000350 <ADC_IRQHandler>
	...

08000354 <GPIO_PeriClockControl>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	460b      	mov	r3, r1
 800035e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000360:	78fb      	ldrb	r3, [r7, #3]
 8000362:	2b01      	cmp	r3, #1
 8000364:	d162      	bne.n	800042c <GPIO_PeriClockControl+0xd8>
		if(pGPIOx == GPIOA)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a64      	ldr	r2, [pc, #400]	@ (80004fc <GPIO_PeriClockControl+0x1a8>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d106      	bne.n	800037c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800036e:	4b64      	ldr	r3, [pc, #400]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000372:	4a63      	ldr	r2, [pc, #396]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 800037a:	e0b9      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a61      	ldr	r2, [pc, #388]	@ (8000504 <GPIO_PeriClockControl+0x1b0>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d106      	bne.n	8000392 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000384:	4b5e      	ldr	r3, [pc, #376]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000388:	4a5d      	ldr	r2, [pc, #372]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 800038a:	f043 0302 	orr.w	r3, r3, #2
 800038e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000390:	e0ae      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a5c      	ldr	r2, [pc, #368]	@ (8000508 <GPIO_PeriClockControl+0x1b4>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d106      	bne.n	80003a8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800039a:	4b59      	ldr	r3, [pc, #356]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039e:	4a58      	ldr	r2, [pc, #352]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003a0:	f043 0304 	orr.w	r3, r3, #4
 80003a4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a6:	e0a3      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a58      	ldr	r2, [pc, #352]	@ (800050c <GPIO_PeriClockControl+0x1b8>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d106      	bne.n	80003be <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003b0:	4b53      	ldr	r3, [pc, #332]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b4:	4a52      	ldr	r2, [pc, #328]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003b6:	f043 0308 	orr.w	r3, r3, #8
 80003ba:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003bc:	e098      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a53      	ldr	r2, [pc, #332]	@ (8000510 <GPIO_PeriClockControl+0x1bc>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d106      	bne.n	80003d4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003c6:	4b4e      	ldr	r3, [pc, #312]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ca:	4a4d      	ldr	r2, [pc, #308]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003cc:	f043 0310 	orr.w	r3, r3, #16
 80003d0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d2:	e08d      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a4f      	ldr	r2, [pc, #316]	@ (8000514 <GPIO_PeriClockControl+0x1c0>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003dc:	4b48      	ldr	r3, [pc, #288]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e0:	4a47      	ldr	r2, [pc, #284]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003e2:	f043 0320 	orr.w	r3, r3, #32
 80003e6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e8:	e082      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a4a      	ldr	r2, [pc, #296]	@ (8000518 <GPIO_PeriClockControl+0x1c4>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003f2:	4b43      	ldr	r3, [pc, #268]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f6:	4a42      	ldr	r2, [pc, #264]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 80003f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003fc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003fe:	e077      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a46      	ldr	r2, [pc, #280]	@ (800051c <GPIO_PeriClockControl+0x1c8>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d106      	bne.n	8000416 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000408:	4b3d      	ldr	r3, [pc, #244]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800040c:	4a3c      	ldr	r2, [pc, #240]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 800040e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000412:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000414:	e06c      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a41      	ldr	r2, [pc, #260]	@ (8000520 <GPIO_PeriClockControl+0x1cc>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d168      	bne.n	80004f0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800041e:	4b38      	ldr	r3, [pc, #224]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000422:	4a37      	ldr	r2, [pc, #220]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000428:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800042a:	e061      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a33      	ldr	r2, [pc, #204]	@ (80004fc <GPIO_PeriClockControl+0x1a8>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d106      	bne.n	8000442 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000434:	4b32      	ldr	r3, [pc, #200]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000438:	4a31      	ldr	r2, [pc, #196]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 800043a:	f023 0301 	bic.w	r3, r3, #1
 800043e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000440:	e056      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a2f      	ldr	r2, [pc, #188]	@ (8000504 <GPIO_PeriClockControl+0x1b0>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d106      	bne.n	8000458 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 800044a:	4b2d      	ldr	r3, [pc, #180]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 800044c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800044e:	4a2c      	ldr	r2, [pc, #176]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000450:	f023 0302 	bic.w	r3, r3, #2
 8000454:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000456:	e04b      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a2b      	ldr	r2, [pc, #172]	@ (8000508 <GPIO_PeriClockControl+0x1b4>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d106      	bne.n	800046e <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000460:	4b27      	ldr	r3, [pc, #156]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000464:	4a26      	ldr	r2, [pc, #152]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000466:	f023 0304 	bic.w	r3, r3, #4
 800046a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800046c:	e040      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a26      	ldr	r2, [pc, #152]	@ (800050c <GPIO_PeriClockControl+0x1b8>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d106      	bne.n	8000484 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000476:	4b22      	ldr	r3, [pc, #136]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047a:	4a21      	ldr	r2, [pc, #132]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 800047c:	f023 0308 	bic.w	r3, r3, #8
 8000480:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000482:	e035      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a22      	ldr	r2, [pc, #136]	@ (8000510 <GPIO_PeriClockControl+0x1bc>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d106      	bne.n	800049a <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 800048c:	4b1c      	ldr	r3, [pc, #112]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 800048e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000490:	4a1b      	ldr	r2, [pc, #108]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 8000492:	f023 0310 	bic.w	r3, r3, #16
 8000496:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000498:	e02a      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a1d      	ldr	r2, [pc, #116]	@ (8000514 <GPIO_PeriClockControl+0x1c0>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d106      	bne.n	80004b0 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80004a2:	4b17      	ldr	r3, [pc, #92]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a6:	4a16      	ldr	r2, [pc, #88]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004a8:	f023 0320 	bic.w	r3, r3, #32
 80004ac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ae:	e01f      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a19      	ldr	r2, [pc, #100]	@ (8000518 <GPIO_PeriClockControl+0x1c4>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d106      	bne.n	80004c6 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 80004b8:	4b11      	ldr	r3, [pc, #68]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004bc:	4a10      	ldr	r2, [pc, #64]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004c4:	e014      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4a14      	ldr	r2, [pc, #80]	@ (800051c <GPIO_PeriClockControl+0x1c8>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d106      	bne.n	80004dc <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 80004ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004d8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004da:	e009      	b.n	80004f0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a10      	ldr	r2, [pc, #64]	@ (8000520 <GPIO_PeriClockControl+0x1cc>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d105      	bne.n	80004f0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e8:	4a05      	ldr	r2, [pc, #20]	@ (8000500 <GPIO_PeriClockControl+0x1ac>)
 80004ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004ee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	40020000 	.word	0x40020000
 8000500:	40023800 	.word	0x40023800
 8000504:	40020400 	.word	0x40020400
 8000508:	40020800 	.word	0x40020800
 800050c:	40020c00 	.word	0x40020c00
 8000510:	40021000 	.word	0x40021000
 8000514:	40021400 	.word	0x40021400
 8000518:	40021800 	.word	0x40021800
 800051c:	40021c00 	.word	0x40021c00
 8000520:	40022000 	.word	0x40022000

08000524 <GPIO_Init>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0; // temporary register
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2101      	movs	r1, #1
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ff0c 	bl	8000354 <GPIO_PeriClockControl>


	// 1. Configure mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	2b03      	cmp	r3, #3
 8000542:	d820      	bhi.n	8000586 <GPIO_Init+0x62>
	{
		//Non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	795b      	ldrb	r3, [r3, #5]
 8000548:	461a      	mov	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	791b      	ldrb	r3, [r3, #4]
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	fa02 f303 	lsl.w	r3, r2, r3
 8000554:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clear
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	791b      	ldrb	r3, [r3, #4]
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	2103      	movs	r1, #3
 8000564:	fa01 f303 	lsl.w	r3, r1, r3
 8000568:	43db      	mvns	r3, r3
 800056a:	4619      	mov	r1, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	400a      	ands	r2, r1
 8000572:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //set
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	6819      	ldr	r1, [r3, #0]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	697a      	ldr	r2, [r7, #20]
 8000580:	430a      	orrs	r2, r1
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	e0d2      	b.n	800072c <GPIO_Init+0x208>
	}
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	795b      	ldrb	r3, [r3, #5]
 800058a:	2b04      	cmp	r3, #4
 800058c:	d117      	bne.n	80005be <GPIO_Init+0x9a>
		{
			//1. Configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058e:	4b4b      	ldr	r3, [pc, #300]	@ (80006bc <GPIO_Init+0x198>)
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	7912      	ldrb	r2, [r2, #4]
 8000596:	4611      	mov	r1, r2
 8000598:	2201      	movs	r2, #1
 800059a:	408a      	lsls	r2, r1
 800059c:	4611      	mov	r1, r2
 800059e:	4a47      	ldr	r2, [pc, #284]	@ (80006bc <GPIO_Init+0x198>)
 80005a0:	430b      	orrs	r3, r1
 80005a2:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a4:	4b45      	ldr	r3, [pc, #276]	@ (80006bc <GPIO_Init+0x198>)
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	7912      	ldrb	r2, [r2, #4]
 80005ac:	4611      	mov	r1, r2
 80005ae:	2201      	movs	r2, #1
 80005b0:	408a      	lsls	r2, r1
 80005b2:	43d2      	mvns	r2, r2
 80005b4:	4611      	mov	r1, r2
 80005b6:	4a41      	ldr	r2, [pc, #260]	@ (80006bc <GPIO_Init+0x198>)
 80005b8:	400b      	ands	r3, r1
 80005ba:	6093      	str	r3, [r2, #8]
 80005bc:	e035      	b.n	800062a <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	795b      	ldrb	r3, [r3, #5]
 80005c2:	2b05      	cmp	r3, #5
 80005c4:	d117      	bne.n	80005f6 <GPIO_Init+0xd2>
		{
			//1. Configure RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c6:	4b3d      	ldr	r3, [pc, #244]	@ (80006bc <GPIO_Init+0x198>)
 80005c8:	68db      	ldr	r3, [r3, #12]
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	7912      	ldrb	r2, [r2, #4]
 80005ce:	4611      	mov	r1, r2
 80005d0:	2201      	movs	r2, #1
 80005d2:	408a      	lsls	r2, r1
 80005d4:	4611      	mov	r1, r2
 80005d6:	4a39      	ldr	r2, [pc, #228]	@ (80006bc <GPIO_Init+0x198>)
 80005d8:	430b      	orrs	r3, r1
 80005da:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005dc:	4b37      	ldr	r3, [pc, #220]	@ (80006bc <GPIO_Init+0x198>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	7912      	ldrb	r2, [r2, #4]
 80005e4:	4611      	mov	r1, r2
 80005e6:	2201      	movs	r2, #1
 80005e8:	408a      	lsls	r2, r1
 80005ea:	43d2      	mvns	r2, r2
 80005ec:	4611      	mov	r1, r2
 80005ee:	4a33      	ldr	r2, [pc, #204]	@ (80006bc <GPIO_Init+0x198>)
 80005f0:	400b      	ands	r3, r1
 80005f2:	60d3      	str	r3, [r2, #12]
 80005f4:	e019      	b.n	800062a <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	795b      	ldrb	r3, [r3, #5]
 80005fa:	2b06      	cmp	r3, #6
 80005fc:	d115      	bne.n	800062a <GPIO_Init+0x106>
		{
			//1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005fe:	4b2f      	ldr	r3, [pc, #188]	@ (80006bc <GPIO_Init+0x198>)
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	7912      	ldrb	r2, [r2, #4]
 8000606:	4611      	mov	r1, r2
 8000608:	2201      	movs	r2, #1
 800060a:	408a      	lsls	r2, r1
 800060c:	4611      	mov	r1, r2
 800060e:	4a2b      	ldr	r2, [pc, #172]	@ (80006bc <GPIO_Init+0x198>)
 8000610:	430b      	orrs	r3, r1
 8000612:	60d3      	str	r3, [r2, #12]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000614:	4b29      	ldr	r3, [pc, #164]	@ (80006bc <GPIO_Init+0x198>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	7912      	ldrb	r2, [r2, #4]
 800061c:	4611      	mov	r1, r2
 800061e:	2201      	movs	r2, #1
 8000620:	408a      	lsls	r2, r1
 8000622:	4611      	mov	r1, r2
 8000624:	4a25      	ldr	r2, [pc, #148]	@ (80006bc <GPIO_Init+0x198>)
 8000626:	430b      	orrs	r3, r1
 8000628:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	089b      	lsrs	r3, r3, #2
 8000630:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	791b      	ldrb	r3, [r3, #4]
 8000636:	f003 0303 	and.w	r3, r3, #3
 800063a:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a1f      	ldr	r2, [pc, #124]	@ (80006c0 <GPIO_Init+0x19c>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d04e      	beq.n	80006e4 <GPIO_Init+0x1c0>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a1e      	ldr	r2, [pc, #120]	@ (80006c4 <GPIO_Init+0x1a0>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d032      	beq.n	80006b6 <GPIO_Init+0x192>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a1c      	ldr	r2, [pc, #112]	@ (80006c8 <GPIO_Init+0x1a4>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d02b      	beq.n	80006b2 <GPIO_Init+0x18e>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a1b      	ldr	r2, [pc, #108]	@ (80006cc <GPIO_Init+0x1a8>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d024      	beq.n	80006ae <GPIO_Init+0x18a>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a19      	ldr	r2, [pc, #100]	@ (80006d0 <GPIO_Init+0x1ac>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d01d      	beq.n	80006aa <GPIO_Init+0x186>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a18      	ldr	r2, [pc, #96]	@ (80006d4 <GPIO_Init+0x1b0>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d016      	beq.n	80006a6 <GPIO_Init+0x182>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a16      	ldr	r2, [pc, #88]	@ (80006d8 <GPIO_Init+0x1b4>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d00f      	beq.n	80006a2 <GPIO_Init+0x17e>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a15      	ldr	r2, [pc, #84]	@ (80006dc <GPIO_Init+0x1b8>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d008      	beq.n	800069e <GPIO_Init+0x17a>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a13      	ldr	r2, [pc, #76]	@ (80006e0 <GPIO_Init+0x1bc>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d101      	bne.n	800069a <GPIO_Init+0x176>
 8000696:	2308      	movs	r3, #8
 8000698:	e025      	b.n	80006e6 <GPIO_Init+0x1c2>
 800069a:	2300      	movs	r3, #0
 800069c:	e023      	b.n	80006e6 <GPIO_Init+0x1c2>
 800069e:	2307      	movs	r3, #7
 80006a0:	e021      	b.n	80006e6 <GPIO_Init+0x1c2>
 80006a2:	2306      	movs	r3, #6
 80006a4:	e01f      	b.n	80006e6 <GPIO_Init+0x1c2>
 80006a6:	2305      	movs	r3, #5
 80006a8:	e01d      	b.n	80006e6 <GPIO_Init+0x1c2>
 80006aa:	2304      	movs	r3, #4
 80006ac:	e01b      	b.n	80006e6 <GPIO_Init+0x1c2>
 80006ae:	2303      	movs	r3, #3
 80006b0:	e019      	b.n	80006e6 <GPIO_Init+0x1c2>
 80006b2:	2302      	movs	r3, #2
 80006b4:	e017      	b.n	80006e6 <GPIO_Init+0x1c2>
 80006b6:	2301      	movs	r3, #1
 80006b8:	e015      	b.n	80006e6 <GPIO_Init+0x1c2>
 80006ba:	bf00      	nop
 80006bc:	40013c00 	.word	0x40013c00
 80006c0:	40020000 	.word	0x40020000
 80006c4:	40020400 	.word	0x40020400
 80006c8:	40020800 	.word	0x40020800
 80006cc:	40020c00 	.word	0x40020c00
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40021400 	.word	0x40021400
 80006d8:	40021800 	.word	0x40021800
 80006dc:	40021c00 	.word	0x40021c00
 80006e0:	40022000 	.word	0x40022000
 80006e4:	2300      	movs	r3, #0
 80006e6:	747b      	strb	r3, [r7, #17]

		SYSCFG_PCLK_EN();
 80006e8:	4b60      	ldr	r3, [pc, #384]	@ (800086c <GPIO_Init+0x348>)
 80006ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ec:	4a5f      	ldr	r2, [pc, #380]	@ (800086c <GPIO_Init+0x348>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006f2:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] |= portCode << (temp2 * 4);
 80006f4:	4a5e      	ldr	r2, [pc, #376]	@ (8000870 <GPIO_Init+0x34c>)
 80006f6:	7cfb      	ldrb	r3, [r7, #19]
 80006f8:	3302      	adds	r3, #2
 80006fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006fe:	7c79      	ldrb	r1, [r7, #17]
 8000700:	7cbb      	ldrb	r3, [r7, #18]
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	fa01 f303 	lsl.w	r3, r1, r3
 8000708:	4618      	mov	r0, r3
 800070a:	4959      	ldr	r1, [pc, #356]	@ (8000870 <GPIO_Init+0x34c>)
 800070c:	7cfb      	ldrb	r3, [r7, #19]
 800070e:	4302      	orrs	r2, r0
 8000710:	3302      	adds	r3, #2
 8000712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3. Enable the EXTI delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000716:	4b57      	ldr	r3, [pc, #348]	@ (8000874 <GPIO_Init+0x350>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	7912      	ldrb	r2, [r2, #4]
 800071e:	4611      	mov	r1, r2
 8000720:	2201      	movs	r2, #1
 8000722:	408a      	lsls	r2, r1
 8000724:	4611      	mov	r1, r2
 8000726:	4a53      	ldr	r2, [pc, #332]	@ (8000874 <GPIO_Init+0x350>)
 8000728:	430b      	orrs	r3, r1
 800072a:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]

	// 2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	799b      	ldrb	r3, [r3, #6]
 8000734:	461a      	mov	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	fa02 f303 	lsl.w	r3, r2, r3
 8000740:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	689a      	ldr	r2, [r3, #8]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	791b      	ldrb	r3, [r3, #4]
 800074c:	4619      	mov	r1, r3
 800074e:	2303      	movs	r3, #3
 8000750:	408b      	lsls	r3, r1
 8000752:	43db      	mvns	r3, r3
 8000754:	4619      	mov	r1, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	400a      	ands	r2, r1
 800075c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	6899      	ldr	r1, [r3, #8]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	697a      	ldr	r2, [r7, #20]
 800076a:	430a      	orrs	r2, r1
 800076c:	609a      	str	r2, [r3, #8]

	temp = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]

	// 3. Configure the pull-up/pull-down settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	79db      	ldrb	r3, [r3, #7]
 8000776:	461a      	mov	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	791b      	ldrb	r3, [r3, #4]
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	fa02 f303 	lsl.w	r3, r2, r3
 8000782:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	68da      	ldr	r2, [r3, #12]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	791b      	ldrb	r3, [r3, #4]
 800078e:	4619      	mov	r1, r3
 8000790:	2303      	movs	r3, #3
 8000792:	408b      	lsls	r3, r1
 8000794:	43db      	mvns	r3, r3
 8000796:	4619      	mov	r1, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	400a      	ands	r2, r1
 800079e:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	68d9      	ldr	r1, [r3, #12]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	697a      	ldr	r2, [r7, #20]
 80007ac:	430a      	orrs	r2, r1
 80007ae:	60da      	str	r2, [r3, #12]

	temp = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]

	// 4. Configure the output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	7a1b      	ldrb	r3, [r3, #8]
 80007b8:	461a      	mov	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	791b      	ldrb	r3, [r3, #4]
 80007be:	fa02 f303 	lsl.w	r3, r2, r3
 80007c2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	685a      	ldr	r2, [r3, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	791b      	ldrb	r3, [r3, #4]
 80007ce:	4619      	mov	r1, r3
 80007d0:	2301      	movs	r3, #1
 80007d2:	408b      	lsls	r3, r1
 80007d4:	43db      	mvns	r3, r3
 80007d6:	4619      	mov	r1, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	400a      	ands	r2, r1
 80007de:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	6859      	ldr	r1, [r3, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	697a      	ldr	r2, [r7, #20]
 80007ec:	430a      	orrs	r2, r1
 80007ee:	605a      	str	r2, [r3, #4]

	temp = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]

	// 5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	795b      	ldrb	r3, [r3, #5]
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	d131      	bne.n	8000860 <GPIO_Init+0x33c>
	{
		// configure the alternate function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	791b      	ldrb	r3, [r3, #4]
 8000800:	08db      	lsrs	r3, r3, #3
 8000802:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	791b      	ldrb	r3, [r3, #4]
 8000808:	f003 0307 	and.w	r3, r3, #7
 800080c:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	7c3a      	ldrb	r2, [r7, #16]
 8000814:	3208      	adds	r2, #8
 8000816:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	220f      	movs	r2, #15
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	43db      	mvns	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	7c3a      	ldrb	r2, [r7, #16]
 800082e:	4001      	ands	r1, r0
 8000830:	3208      	adds	r2, #8
 8000832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	7c3a      	ldrb	r2, [r7, #16]
 800083c:	3208      	adds	r2, #8
 800083e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	7a5b      	ldrb	r3, [r3, #9]
 8000846:	461a      	mov	r2, r3
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	4618      	mov	r0, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	7c3a      	ldrb	r2, [r7, #16]
 8000858:	4301      	orrs	r1, r0
 800085a:	3208      	adds	r2, #8
 800085c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

	temp = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
}
 8000864:	bf00      	nop
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40013800 	.word	0x40013800
 8000874:	40013c00 	.word	0x40013c00

08000878 <GPIO_ReadFromInputPin>:
 * 	@return					-	The value on input pin as an 8 bit unsigned integer
 *
 * 	@Note					-	none
 *************************************************************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001); //shift value at pin to LSB and mask all other values with 0
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	691a      	ldr	r2, [r3, #16]
 8000888:	78fb      	ldrb	r3, [r7, #3]
 800088a:	fa22 f303 	lsr.w	r3, r2, r3
 800088e:	b2db      	uxtb	r3, r3
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	73fb      	strb	r3, [r7, #15]
	return value;
 8000896:	7bfb      	ldrb	r3, [r7, #15]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <I2C_GenerateStartCondition>:
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx);
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);


static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	601a      	str	r2, [r3, #0]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <I2C_ExecuteAddressPhase>:

static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1; //makes space for R/WR bit
 80008d0:	78fb      	ldrb	r3, [r7, #3]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1 << 0); //clear 0th bit so SlaveAddr is Slave address + r/nw bit (write = 0)
 80008d6:	78fb      	ldrb	r3, [r7, #3]
 80008d8:	f023 0301 	bic.w	r3, r3, #1
 80008dc:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80008de:	78fa      	ldrb	r2, [r7, #3]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	611a      	str	r2, [r3, #16]
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx) // read SR1 followed by SR2
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead = pI2Cx->SR1;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx->SR2;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	60fb      	str	r3, [r7, #12]
	(void)dummyRead;
}
 8000904:	bf00      	nop
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	601a      	str	r2, [r3, #0]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <I2C_PeriClockControl>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	460b      	mov	r3, r1
 800093a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d120      	bne.n	8000984 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a22      	ldr	r2, [pc, #136]	@ (80009d0 <I2C_PeriClockControl+0xa0>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d106      	bne.n	8000958 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 800094a:	4b22      	ldr	r3, [pc, #136]	@ (80009d4 <I2C_PeriClockControl+0xa4>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	4a21      	ldr	r2, [pc, #132]	@ (80009d4 <I2C_PeriClockControl+0xa4>)
 8000950:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000954:	6413      	str	r3, [r2, #64]	@ 0x40
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 8000956:	e035      	b.n	80009c4 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a1f      	ldr	r2, [pc, #124]	@ (80009d8 <I2C_PeriClockControl+0xa8>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d106      	bne.n	800096e <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000960:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <I2C_PeriClockControl+0xa4>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000964:	4a1b      	ldr	r2, [pc, #108]	@ (80009d4 <I2C_PeriClockControl+0xa4>)
 8000966:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800096a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800096c:	e02a      	b.n	80009c4 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a1a      	ldr	r2, [pc, #104]	@ (80009dc <I2C_PeriClockControl+0xac>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d126      	bne.n	80009c4 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000976:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <I2C_PeriClockControl+0xa4>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	4a16      	ldr	r2, [pc, #88]	@ (80009d4 <I2C_PeriClockControl+0xa4>)
 800097c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000980:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000982:	e01f      	b.n	80009c4 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a12      	ldr	r2, [pc, #72]	@ (80009d0 <I2C_PeriClockControl+0xa0>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d106      	bne.n	800099a <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 800098c:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <I2C_PeriClockControl+0xa4>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000990:	4a10      	ldr	r2, [pc, #64]	@ (80009d4 <I2C_PeriClockControl+0xa4>)
 8000992:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000996:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000998:	e014      	b.n	80009c4 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C2)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a0e      	ldr	r2, [pc, #56]	@ (80009d8 <I2C_PeriClockControl+0xa8>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d106      	bne.n	80009b0 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 80009a2:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <I2C_PeriClockControl+0xa4>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	4a0b      	ldr	r2, [pc, #44]	@ (80009d4 <I2C_PeriClockControl+0xa4>)
 80009a8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80009ac:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009ae:	e009      	b.n	80009c4 <I2C_PeriClockControl+0x94>
		else if(pI2Cx == I2C3)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a0a      	ldr	r2, [pc, #40]	@ (80009dc <I2C_PeriClockControl+0xac>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d105      	bne.n	80009c4 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <I2C_PeriClockControl+0xa4>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009bc:	4a05      	ldr	r2, [pc, #20]	@ (80009d4 <I2C_PeriClockControl+0xa4>)
 80009be:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80009c2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	40005400 	.word	0x40005400
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40005800 	.word	0x40005800
 80009dc:	40005c00 	.word	0x40005c00

080009e0 <RCC_GetPLLOutputClock>:

/*
 * Init and De-init (reset)
 */
uint32_t RCC_GetPLLOutputClock(void) /**** Not implemented ***/
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

	return 0;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <RCC_GetPCLK1Value>:

uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};

uint32_t RCC_GetPCLK1Value(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahb1p,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3); // only want bit positions 0 and 1
 80009f6:	4b26      	ldr	r3, [pc, #152]	@ (8000a90 <RCC_GetPCLK1Value+0xa0>)
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	089b      	lsrs	r3, r3, #2
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	f003 0303 	and.w	r3, r3, #3
 8000a02:	727b      	strb	r3, [r7, #9]

	if (clksrc == 0)
 8000a04:	7a7b      	ldrb	r3, [r7, #9]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d102      	bne.n	8000a10 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000a0a:	4b22      	ldr	r3, [pc, #136]	@ (8000a94 <RCC_GetPCLK1Value+0xa4>)
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	e00b      	b.n	8000a28 <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 1)
 8000a10:	7a7b      	ldrb	r3, [r7, #9]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d102      	bne.n	8000a1c <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000a16:	4b20      	ldr	r3, [pc, #128]	@ (8000a98 <RCC_GetPCLK1Value+0xa8>)
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	e005      	b.n	8000a28 <RCC_GetPCLK1Value+0x38>
	}
	else if (clksrc == 2)
 8000a1c:	7a7b      	ldrb	r3, [r7, #9]
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d102      	bne.n	8000a28 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock(); // not implemented
 8000a22:	f7ff ffdd 	bl	80009e0 <RCC_GetPLLOutputClock>
 8000a26:	60f8      	str	r0, [r7, #12]
	}

	//ahb1 pre-scaler
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000a28:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <RCC_GetPCLK1Value+0xa0>)
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	091b      	lsrs	r3, r3, #4
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	f003 030f 	and.w	r3, r3, #15
 8000a34:	723b      	strb	r3, [r7, #8]

	if (temp < 8)
 8000a36:	7a3b      	ldrb	r3, [r7, #8]
 8000a38:	2b07      	cmp	r3, #7
 8000a3a:	d802      	bhi.n	8000a42 <RCC_GetPCLK1Value+0x52>
	{
		ahb1p = 1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	72fb      	strb	r3, [r7, #11]
 8000a40:	e005      	b.n	8000a4e <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahb1p = AHB1_PreScaler[temp - 8]; // if ahb1 prescaler greater than 8, fetch first value of array
 8000a42:	7a3b      	ldrb	r3, [r7, #8]
 8000a44:	3b08      	subs	r3, #8
 8000a46:	4a15      	ldr	r2, [pc, #84]	@ (8000a9c <RCC_GetPCLK1Value+0xac>)
 8000a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a4c:	72fb      	strb	r3, [r7, #11]
	}

	//apb1 pre-scaler
	temp = ((RCC->CFGR >> 10) & 0x7);
 8000a4e:	4b10      	ldr	r3, [pc, #64]	@ (8000a90 <RCC_GetPCLK1Value+0xa0>)
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	0a9b      	lsrs	r3, r3, #10
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	723b      	strb	r3, [r7, #8]

	if (temp < 4)
 8000a5c:	7a3b      	ldrb	r3, [r7, #8]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d802      	bhi.n	8000a68 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000a62:	2301      	movs	r3, #1
 8000a64:	72bb      	strb	r3, [r7, #10]
 8000a66:	e005      	b.n	8000a74 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		apb1p = APB1_PreScaler[temp - 4]; // if apb1 prescaler greater than 4, fetch first value of array
 8000a68:	7a3b      	ldrb	r3, [r7, #8]
 8000a6a:	3b04      	subs	r3, #4
 8000a6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa0 <RCC_GetPCLK1Value+0xb0>)
 8000a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a72:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahb1p) / apb1p;
 8000a74:	7afb      	ldrb	r3, [r7, #11]
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a7c:	7abb      	ldrb	r3, [r7, #10]
 8000a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a82:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000a84:	687b      	ldr	r3, [r7, #4]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	00f42400 	.word	0x00f42400
 8000a98:	007a1200 	.word	0x007a1200
 8000a9c:	20000010 	.word	0x20000010
 8000aa0:	20000020 	.word	0x20000020

08000aa4 <I2C_Init>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]

	// Enable clock for I2Cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ff3a 	bl	8000930 <I2C_PeriClockControl>
//	// ACK control bit < -- broken, Cannot set ACK when PE = 0, moved to I2C_Peripheral Control
//	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
//	pI2CHandle->pI2Cx->CR1 = tempreg;

	// FREQ Configuration
	tempreg = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 8000ac0:	f7ff ff96 	bl	80009f0 <RCC_GetPCLK1Value>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	4a4c      	ldr	r2, [pc, #304]	@ (8000bf8 <I2C_Init+0x154>)
 8000ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8000acc:	0c9b      	lsrs	r3, r3, #18
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F); // mask all except first 5 bits
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000ade:	605a      	str	r2, [r3, #4]

	// Device Own Address Configuration (OAR1)
	tempreg = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	7a1b      	ldrb	r3, [r3, #8]
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af6:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	68fa      	ldr	r2, [r7, #12]
 8000afe:	609a      	str	r2, [r3, #8]

	// CCR Configuration
	tempreg = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
	uint16_t ccr_value = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	817b      	strh	r3, [r7, #10]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	4a3b      	ldr	r2, [pc, #236]	@ (8000bfc <I2C_Init+0x158>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d80f      	bhi.n	8000b32 <I2C_Init+0x8e>
	{
		// standard mode
		ccr_value =(RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000b12:	f7ff ff6d 	bl	80009f0 <RCC_GetPCLK1Value>
 8000b16:	4602      	mov	r2, r0
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b22:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000b24:	897b      	ldrh	r3, [r7, #10]
 8000b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	e02c      	b.n	8000b8c <I2C_Init+0xe8>
	}
	else
	{
		// fast mode
		tempreg |= (1 << 15); //set fast mode
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b38:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	895b      	ldrh	r3, [r3, #10]
 8000b3e:	039b      	lsls	r3, r3, #14
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	895b      	ldrh	r3, [r3, #10]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d10b      	bne.n	8000b66 <I2C_Init+0xc2>
		{
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000b4e:	f7ff ff4f 	bl	80009f0 <RCC_GetPCLK1Value>
 8000b52:	4601      	mov	r1, r0
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685a      	ldr	r2, [r3, #4]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	4413      	add	r3, r2
 8000b5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b62:	817b      	strh	r3, [r7, #10]
 8000b64:	e00c      	b.n	8000b80 <I2C_Init+0xdc>
		}
		else
		{
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000b66:	f7ff ff43 	bl	80009f0 <RCC_GetPCLK1Value>
 8000b6a:	4601      	mov	r1, r0
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685a      	ldr	r2, [r3, #4]
 8000b70:	4613      	mov	r3, r2
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4413      	add	r3, r2
 8000b76:	009a      	lsls	r2, r3, #2
 8000b78:	4413      	add	r3, r2
 8000b7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b7e:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8000b80:	897b      	ldrh	r3, [r7, #10]
 8000b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	68fa      	ldr	r2, [r7, #12]
 8000b92:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	tempreg = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	4a17      	ldr	r2, [pc, #92]	@ (8000bfc <I2C_Init+0x158>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d809      	bhi.n	8000bb6 <I2C_Init+0x112>
	{
		// standard mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000ba2:	f7ff ff25 	bl	80009f0 <RCC_GetPCLK1Value>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	4a13      	ldr	r2, [pc, #76]	@ (8000bf8 <I2C_Init+0x154>)
 8000baa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bae:	0c9b      	lsrs	r3, r3, #18
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	e00d      	b.n	8000bd2 <I2C_Init+0x12e>
	}
	else
	{
		// fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300U) / 1000000000U) + 1;
 8000bb6:	f7ff ff1b 	bl	80009f0 <RCC_GetPCLK1Value>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000bc0:	fb02 f303 	mul.w	r3, r2, r3
 8000bc4:	0a5b      	lsrs	r3, r3, #9
 8000bc6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c00 <I2C_Init+0x15c>)
 8000bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bcc:	09db      	lsrs	r3, r3, #7
 8000bce:	3301      	adds	r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE = 0;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
	pI2CHandle->pI2Cx->TRISE |= (tempreg & 0x3F);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	6a19      	ldr	r1, [r3, #32]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	430a      	orrs	r2, r1
 8000bec:	621a      	str	r2, [r3, #32]
}
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	431bde83 	.word	0x431bde83
 8000bfc:	000186a0 	.word	0x000186a0
 8000c00:	00044b83 	.word	0x00044b83

08000c04 <I2C_GetFlagStatus>:
/*
 * Data Send and Receive
 */

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	695a      	ldr	r2, [r3, #20]
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	4013      	ands	r3, r2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e000      	b.n	8000c20 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <I2C_MasterSendData>:
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
 8000c38:	70fb      	strb	r3, [r7, #3]
	//1. Generate START Condition

	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fe30 	bl	80008a4 <I2C_GenerateStartCondition>

	//2. Confirm that start generation is completed by checking the SB flag in SR1
	//	 Note: Until SB is cleared SCL will be stretched (pulled LOW)

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG));
 8000c44:	bf00      	nop
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ffd9 	bl	8000c04 <I2C_GetFlagStatus>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d0f6      	beq.n	8000c46 <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits)

	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	78fa      	ldrb	r2, [r7, #3]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fe2f 	bl	80008c4 <I2C_ExecuteAddressPhase>

	//4. Confirm that the address phase is completed by checking the ADDR flag in the SR1

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG));
 8000c66:	bf00      	nop
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ffc8 	bl	8000c04 <I2C_GetFlagStatus>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0f6      	beq.n	8000c68 <I2C_MasterSendData+0x3c>

	//5. Clear the ADDR flag according to its software sequence
	//	 Note: Until ADDR is cleared SCL will be stretched (pulled LOW)

	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fe36 	bl	80008f0 <I2C_ClearADDRFlag>

	//6. Send the data until Len is 0 (Tx empty)

	while(Len > 0)
 8000c84:	e014      	b.n	8000cb0 <I2C_MasterSendData+0x84>
	{
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TXE_FLAG)); // Wait for TXE to be set
 8000c86:	bf00      	nop
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2180      	movs	r1, #128	@ 0x80
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ffb8 	bl	8000c04 <I2C_GetFlagStatus>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d0f6      	beq.n	8000c88 <I2C_MasterSendData+0x5c>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	781a      	ldrb	r2, [r3, #0]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
		Len--;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3b01      	subs	r3, #1
 8000cae:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d1e7      	bne.n	8000c86 <I2C_MasterSendData+0x5a>
	//	 Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//	 When BTF=1 , SCL will be stretched (pulled LOW)

	//while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TXE_FLAG)); // Wait for TXE to be set

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_BTF_FLAG)); // Wait for TXE to be set
 8000cb6:	bf00      	nop
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2104      	movs	r1, #4
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff ffa0 	bl	8000c04 <I2C_GetFlagStatus>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d0f6      	beq.n	8000cb8 <I2C_MasterSendData+0x8c>


	//8. Generate STOP Condition and master need not wait for the completion of STOP condition
	//	 Note: Generating STOP automatically clears the BTF

	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fe1e 	bl	8000910 <I2C_GenerateStopCondition>
}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <I2C_PeripheralControl>:
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d10c      	bne.n	8000d08 <I2C_PeripheralControl+0x2c>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f043 0201 	orr.w	r2, r3, #1
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	601a      	str	r2, [r3, #0]

		// Can enable ACK now that PE = 1, moved from I2C_Init
		pI2Cx->CR1 |= (1 << 10); // ACK set at position 10 in CR1
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8000d06:	e005      	b.n	8000d14 <I2C_PeripheralControl+0x38>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f023 0201 	bic.w	r2, r3, #1
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	601a      	str	r2, [r3, #0]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <__libc_init_array>:
 8000d20:	b570      	push	{r4, r5, r6, lr}
 8000d22:	4d0d      	ldr	r5, [pc, #52]	@ (8000d58 <__libc_init_array+0x38>)
 8000d24:	4c0d      	ldr	r4, [pc, #52]	@ (8000d5c <__libc_init_array+0x3c>)
 8000d26:	1b64      	subs	r4, r4, r5
 8000d28:	10a4      	asrs	r4, r4, #2
 8000d2a:	2600      	movs	r6, #0
 8000d2c:	42a6      	cmp	r6, r4
 8000d2e:	d109      	bne.n	8000d44 <__libc_init_array+0x24>
 8000d30:	4d0b      	ldr	r5, [pc, #44]	@ (8000d60 <__libc_init_array+0x40>)
 8000d32:	4c0c      	ldr	r4, [pc, #48]	@ (8000d64 <__libc_init_array+0x44>)
 8000d34:	f000 f818 	bl	8000d68 <_init>
 8000d38:	1b64      	subs	r4, r4, r5
 8000d3a:	10a4      	asrs	r4, r4, #2
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	42a6      	cmp	r6, r4
 8000d40:	d105      	bne.n	8000d4e <__libc_init_array+0x2e>
 8000d42:	bd70      	pop	{r4, r5, r6, pc}
 8000d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d48:	4798      	blx	r3
 8000d4a:	3601      	adds	r6, #1
 8000d4c:	e7ee      	b.n	8000d2c <__libc_init_array+0xc>
 8000d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d52:	4798      	blx	r3
 8000d54:	3601      	adds	r6, #1
 8000d56:	e7f2      	b.n	8000d3e <__libc_init_array+0x1e>
 8000d58:	08000d88 	.word	0x08000d88
 8000d5c:	08000d88 	.word	0x08000d88
 8000d60:	08000d88 	.word	0x08000d88
 8000d64:	08000d8c 	.word	0x08000d8c

08000d68 <_init>:
 8000d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6a:	bf00      	nop
 8000d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d6e:	bc08      	pop	{r3}
 8000d70:	469e      	mov	lr, r3
 8000d72:	4770      	bx	lr

08000d74 <_fini>:
 8000d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d76:	bf00      	nop
 8000d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d7a:	bc08      	pop	{r3}
 8000d7c:	469e      	mov	lr, r3
 8000d7e:	4770      	bx	lr
