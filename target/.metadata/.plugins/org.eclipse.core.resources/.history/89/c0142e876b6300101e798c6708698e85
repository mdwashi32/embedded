/*
 * 008spi_cmd_handling.c
 *
 *  Created on: Jul 10, 2025
 *      Author: mauricewashington
 */

// 	PB15-> SPI2_MOSI
// 	PB14-> SPI2_MISO // Unused
//	PB13-> SPI2_SCLK
//	PB12-> SPI2_NSS // Unused
// Alt function Mode 5

#include "stm32f407xx.h"
#include "stm32f407xx_gpio_driver.h"
#include "stm32f407xx_spi_driver.h"
#include <string.h>
#include <stdio.h>

//command codes
#define COMMAND_LED_CTRL		0x50
#define	COMMAND_SENSOR_READ		0x51
#define	COMMAND_LED_READ		0x52
#define	COMMAND_PRINT			0x53
#define	COMMAND_ID_READ			0x54

#define LED_ON			1
#define LED_OFF			0

// arduino analog pins
#define ANALOG_PIN0			0
#define ANALOG_PIN1			1
#define ANALOG_PIN2			2
#define ANALOG_PIN3			3
#define ANALOG_PIN4			4

//arduino led
#define LED_PIN			9

void delay(void)
{
	for(uint32_t i = 0; i < 500000/2; i++);
}

void SPI2_GPIOInits()
{
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
	GPIO_Init(&SPIPins);

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
	GPIO_Init(&SPIPins);

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	GPIO_Init(&SPIPins);

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	GPIO_Init(&SPIPins);


}

void SPI2_Inits(void)
{
	SPI_Handle_t SPI2Handle;
	SPI2Handle.pSPIx = SPI2;
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV256; //generates SCLK of 16MHZ/DIV
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_BITS8;
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Software Slave MAnagement Disabled for NSS (HW Slave Management)

	SPI_Init(&SPI2Handle);
}

void GPIO_ButtonInit(void)
{
	GPIO_Handle_t GpioBtn;
	//button
	GpioBtn.pGPIOx = GPIOA;
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;

	GPIO_Init(&GpioBtn);

}

uint8_t SPI_VerifyResponse(uint8_t ack_byte)
{
	if(ack_byte == 0xF5)
	{
		// ACK
		return 1;
	}
	return 0; // NACK

}

int main(void)
{
	uint8_t dummy_write = 0xFF;
	uint8_t dummy_read;

	GPIO_ButtonInit();

	// Initialize GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();



	// Initialize SPI2 peripheral parameters
	SPI2_Inits();

	/*
	 * Making SSOE 1 enables NSS output
	 * The NSS pin is automatically managed by HW
	 * i.e. when SPE=1, NSS will be pulled to low
	 * and NSS pin will be high when SPE=0
	 * note: SPE = SPI Enable bit in SPI_CR1
	 */
	SPI_SSOE_Config(SPI2, ENABLE);

	while(1)
	{

		// wait for button press
		while(! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );

		delay();

		// Enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);

		for (volatile int i = 0; i < 10000; i++);  // crude delay (~1ms)

		//1. CMD_LED_CTRL <pin no(1)>	<value(1)>
		uint8_t command_code = COMMAND_LED_CTRL;
		uint8_t ack_byte;
		uint8_t args[2];

		// send OP code for command
		SPI_SendData(SPI2, &command_code, 1);

		// Dummy read to clear initial Rx from Op code send to clear RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);

		// send dummy bits (1 byte) to fetch response from slave
		SPI_SendData(SPI2, &dummy_write, 1); //8 bit data transfer as defined in DFF
		SPI_ReceiveData(SPI2, &ack_byte, 1); // need to read ack byte from slave that command sent was valid

		if(SPI_VerifyResponse(ack_byte))
		{
			// send pin number and value
			args[0] = LED_PIN; // Arduino pin 9
			args[1] = LED_ON; // Set value of LED
			SPI_SendData(SPI2, args, 2); // send pin no. and value as separate bytes
		}

		//2. CMD_SENSOR_READ <analog pin number(1)>
		// wait for button press
		while(! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );

		delay();

		//send command
		command_code = COMMAND_SENSOR_READ;

		// send OP code for command
		SPI_SendData(SPI2, &command_code, 1);

		// Dummy read to clear initial Rx from Op code send to clear RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);

		// send dummy bits (1 byte) to fetch response from slave
		SPI_SendData(SPI2, &dummy_write, 1); //8 bit data transfer as defined in DFF
		SPI_ReceiveData(SPI2, &ack_byte, 1); // need to read ack byte from slave that command sent was valid

		if(SPI_VerifyResponse(ack_byte))
		{
			// send pin number and value
			args[0] = ANALOG_PIN0; //arduino analog pin
			SPI_SendData(SPI2, args, 1); // send pin no. w/ one byte
		}

		//dummy read to clear RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);

		//send dummy  byte to fetch response from slave
		SPI_SendData(SPI2, &dummy_write, 1);

		uint8_t analog_read;
		// receive data from slave
		SPI_ReceiveData(SPI2, &analog_read, 1);


		// Confirm SPI not busy
		while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG)); // If SPI busy, loop (while(1))

		// Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
		for (volatile int i = 0; i < 100000; i++); // ~2ms delay
	}

	return 0;

}
