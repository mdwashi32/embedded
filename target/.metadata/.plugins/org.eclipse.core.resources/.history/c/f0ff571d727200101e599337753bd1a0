/*
 * stm32f407xx_i2c_driver.c
 *
 *  Created on: Jul 22, 2025
 *      Author: mauricewashington
 */

#include "stm32f407xx_i2c_driver.h"

uint16_t AHB1_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint16_t APB1_PreScaler[8] = {2,4,8,16};

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx);
static void I2C_Write_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_Read_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);
static void I2C_ACK_EN_DI(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi);
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle);


static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
}

static void I2C_Write_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
	SlaveAddr = SlaveAddr << 1; //makes space for R/WR bit
	SlaveAddr &= ~(1 << 0); //clear 0th bit so SlaveAddr is Slave address + r/nw bit (write = 0)
	pI2Cx->DR = SlaveAddr;
}

static void I2C_Read_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
	SlaveAddr = SlaveAddr << 1; //makes space for R/WR bit
	SlaveAddr |= (1 << 0); //set 0th bit so SlaveAddr is Slave address + r/nw bit (read = 1)
	pI2Cx->DR = SlaveAddr;
}

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
	uint32_t dummyRead;
	// Check for device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
	{
		// Device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
		{
			if(pI2CHandle->RxSize == 1)
			{
				// First disable ACKing
				I2C_ACK_EN_DI(pI2CHandle->pI2Cx, DISABLE);

				// Clear ADDR flag by reading SR1 and then reading SR2

				dummyRead = pI2CHandle->pI2Cx->SR1;
				dummyRead = pI2CHandle->pI2Cx->SR1;
				(void)dummyRead; //suppress unused variable warning
			}
		}
		else
		{
			// Clear ADDR flag by reading SR1 and then reading SR2

			dummyRead = pI2CHandle->pI2Cx->SR1;
			dummyRead = pI2CHandle->pI2Cx->SR1;
			(void)dummyRead; //suppress unused variable warning
		}
	}
	else
	{
		// Device is in slave mode
		// Clear ADDR flag by reading SR1 and then reading SR2

		dummyRead = pI2CHandle->pI2Cx->SR1;
		dummyRead = pI2CHandle->pI2Cx->SR1;
		(void)dummyRead; //suppress unused variable warning
	}
}

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
}

static void I2C_ACK_EN_DI(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
	if(EnOrDi == ENABLE)
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}

/*
 * Peripheral Clock Setup
 */
/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	I2C_PeriClockControl
 *
 * 	@brief					-	This function enables or disables peripheral clock for given I2C peripheral
 *
 * 	@param[in]				-	Base address of I2C peripheral
 * 	@param[in]				-	ENABLE OR DISABLE (macro)
 * 	@param[in]				-
 *
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if(pI2Cx == I2C1)
		{
			I2C1_PCLK_EN();
		}
		else if(pI2Cx == I2C2)
		{
			I2C2_PCLK_EN();
		}
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_EN();
		}
	}

	else
	{
		if(pI2Cx == I2C1)
		{
			I2C1_PCLK_DI();
		}
		else if(pI2Cx == I2C2)
		{
			I2C2_PCLK_DI();
		}
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}

/*
 * Init and De-init (reset)
 */
uint32_t RCC_GetPLLOutputClock(void) /**** Not implemented ***/
{

	return 0;
}

uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};

uint32_t RCC_GetPCLK1Value(void)
{
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahb1p,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3); // only want bit positions 0 and 1

	if (clksrc == 0)
	{
		SystemClk = 16000000;
	}
	else if (clksrc == 1)
	{
		SystemClk = 8000000;
	}
	else if (clksrc == 2)
	{
		SystemClk = RCC_GetPLLOutputClock(); // not implemented
	}

	//ahb1 pre-scaler
	temp = ((RCC->CFGR >> 4) & 0xF);

	if (temp < 8)
	{
		ahb1p = 1;
	}
	else
	{
		ahb1p = AHB1_PreScaler[temp - 8]; // if ahb1 prescaler greater than 8, fetch first value of array
	}

	//apb1 pre-scaler
	temp = ((RCC->CFGR >> 10) & 0x7);

	if (temp < 4)
	{
		apb1p = 1;
	}
	else
	{
		apb1p = APB1_PreScaler[temp - 4]; // if apb1 prescaler greater than 4, fetch first value of array
	}

	pclk1 = (SystemClk / ahb1p) / apb1p;

	return pclk1;
}

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	I2C_Init
 *
 * 	@brief					-	This function resets the I2C peripheral
 *
 * 	@param[in]				-	Base address of I2C peripheral
 * 	@param[in]				-
 * 	@param[in]				-
 *
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
	uint32_t tempreg = 0;

	// Enable clock for I2Cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);

//	// ACK control bit < -- broken, Cannot set ACK when PE = 0, moved to I2C_Peripheral Control
//	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
//	pI2CHandle->pI2Cx->CR1 = tempreg;

	// FREQ Configuration
	tempreg = 0;
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F); // mask all except first 5 bits

	// Device Own Address Configuration (OAR1)
	tempreg = 0;
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
	tempreg |= (1 << 14);
	pI2CHandle->pI2Cx->OAR1 = tempreg;

	// CCR Configuration
	tempreg = 0;
	uint16_t ccr_value = 0;

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
	{
		// standard mode
		ccr_value =(RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
		tempreg |= (ccr_value & 0xFFF);
	}
	else
	{
		// fast mode
		tempreg |= (1 << 15); //set fast mode
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
		{
			ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
		}
		else
		{
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
		}
		tempreg |= (ccr_value & 0xFFF);
	}
	pI2CHandle->pI2Cx->CCR = tempreg;

	//TRISE Configuration
	tempreg = 0;

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
	{
		// standard mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
	}
	else
	{
		// fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300U) / 1000000000U) + 1;
	}

	pI2CHandle->pI2Cx->TRISE = 0;
	pI2CHandle->pI2Cx->TRISE |= (tempreg & 0x3F);
}

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	I2C_DeInit
 *
 * 	@brief					-	This function resets the given I2C peripheral
 *
 * 	@param[in]				-	Base address of I2C peripheral
 * 	@param[in]				-
 * 	@param[in]				-
 *
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void I2C_DeInit(I2C_RegDef_t *pI2Cx)
{
	if(pI2Cx == I2C1)
	{
		I2C1_REG_RESET();
	}
	else if(pI2Cx == I2C2)
	{
		I2C2_REG_RESET();
	}
	else if(pI2Cx == I2C3)
	{
		I2C3_REG_RESET();
	}
}

/*
 * Data Send and Receive
 */

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
	if(pI2Cx->SR1 & FlagName)
	{
		return FLAG_SET;
	}
	return FLAG_RESET;
}

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	I2C_MasterSendData
 *
 * 	@brief					-	This function sends data from Master to Slave
 *
 * 	@param[in]				-	Base address of I2C peripheral
 * 	@param[in]				-	Address of Transfer Buffer
 * 	@param[in]				-	Length of transmitted data (bytes)
 * 	@param[in]				-	Slave Address
 *
 * 	@return					-	none
 *
 * 	@Note					-	blocking/polling api
 *************************************************************************************************************/
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t StartRepeated)
{
	//1. Generate START Condition

	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);

	//2. Confirm that start generation is completed by checking the SB flag in SR1
	//	 Note: Until SB is cleared SCL will be stretched (pulled LOW)

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG));

	//3. Send the address of the slave with r/nw bit set to Write (0) (total 8 bits)

	I2C_Write_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr);

	//4. Confirm that the address phase is completed by checking the ADDR flag in the SR1

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG));

	//5. Clear the ADDR flag according to its software sequence
	//	 Note: Until ADDR is cleared SCL will be stretched (pulled LOW)

	I2C_ClearADDRFlag(pI2CHandle);

	//6. Send the data until Len is 0 (Tx empty)

	while(Len > 0)
	{
		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TXE_FLAG)); // Wait for TXE to be set
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
		pTxBuffer++;
		Len--;
	}

	//7. When Len becomes zero wait for TXE=1 and BTF=1 before generating STOP condition
	//	 Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//	 When BTF=1 , SCL will be stretched (pulled LOW)

	//while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_TXE_FLAG)); // Wait for TXE to be set

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_BTF_FLAG)); // Wait for TXE to be set


	//ORIGINAL: 8. Generate STOP Condition and master need not wait for the completion of STOP condition
	//	 Note: Generating STOP automatically clears the BTF

	//8. Expanded for SR: Generate Repeated Start to hold bus otherwise generate Stop
	if(StartRepeated == I2C_NO_SR)
	{
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
	}
}

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	I2C_MasterReceiveData
 *
 * 	@brief					-	This function receives data from Slave to Master
 *
 * 	@param[in]				-	Base address of I2C peripheral
 * 	@param[in]				-	Address of Receiver Buffer
 * 	@param[in]				-	Length of transmitted data (bytes)
 * 	@param[in]				-	Slave Address
 * 	@param[in]				- 	Repeated Start enabled/disabled
 *
 * 	@return					-	none
 *
 * 	@Note					-	blocking/polling API
 *************************************************************************************************************/

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t StartRepeated)
{
	//1. Generate START condition

	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);

	//2. Confirm START generation is completed by checking SB flag in SR1
	//	 Note: Until SB is cleared SCL will be stretched (pulled LOW)

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_SB_FLAG));

	//3. Send address of Slave with r/nw but set to Read (1) (total 8 bits)

	I2C_Read_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr);

	//4. Wait until address phase is completed by checking ADDR flag in SR1

	while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_ADDR_FLAG));

	// If reading only one byte from slave

	if(Len == 1)
	{
		// Disable ACK in CR1

		I2C_ACK_EN_DI(pI2CHandle->pI2Cx, DISABLE); // Clear ACK bit

		// Clear ADDR flag

		I2C_ClearADDRFlag(pI2CHandle);

		// Wait until RXNE = 1

		while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_RXNE_FLAG));

		// Generate STOP condition if no SR

		if(StartRepeated == I2C_NO_SR)
		{
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
		}

		// Read data into buffer

		*pRxBuffer = pI2CHandle->pI2Cx->DR;
	}

	// If reading more than one byte from Slave
	if(Len > 1)
	{
		// Clear ADDR flag

		I2C_ClearADDRFlag(pI2CHandle);

		// Read data until Len = 0

		for(uint32_t i = Len; i > 0; i--)
		{
			// Wait until RXNE = 1

			while(!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_RXNE_FLAG));

			if(i == 2) // Last 2 bytes
			{
				// Disable ACK (CR1) here to prevent slave from sending more data after last byte read

				I2C_ACK_EN_DI(pI2CHandle->pI2Cx,DISABLE); // Clear ACK bit

				// Generate STOP condition if no SR

				if(StartRepeated == I2C_NO_SR)
				{
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
				}

			}
			// Read data into buffer

			*pRxBuffer = pI2CHandle->pI2Cx->DR;

			// increment RxBuffer address

			pRxBuffer++;
		}
	}

	// Re-Enable ACK in CR1 (if it was enabled before entering current API)

	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_EN)
	{
		I2C_ACK_EN_DI(pI2CHandle->pI2Cx,ENABLE); // Set ACK bit
	}
}
/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	I2C_MasterSendDataIT
 *
 * 	@brief					-	This function sends data to Slave from Master using interrupts
 *
 * 	@param[in]				-	Base address of I2C peripheral
 * 	@param[in]				-	Address of Transfer Buffer
 * 	@param[in]				-	Length of transmitted data (bytes)
 * 	@param[in]				-	Slave Address
 * 	@param[in]				- 	Repeated Start enabled/disabled
 *
 * 	@return					-	state of I2C peripheral
 *
 * 	@Note					-	non-blocking API
 *************************************************************************************************************/

uint8_t I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t StartRepeated)
{
	uint8_t busystate = pI2CHandle->TxRxState;

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
	{
		pI2CHandle->pTxBuffer = pTxBuffer;
		pI2CHandle->TxLen = Len;
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
		pI2CHandle->DevAddr = SlaveAddr;
		pI2CHandle->StartRepeated = StartRepeated;

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);

		//Implement the code to enable ITEVTEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);

	}

	return busystate;
}

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	I2C_MasterReceiveDataIT
 *
 * 	@brief					-	This function receives data from Slave to Master using interrupts
 *
 * 	@param[in]				-	Base address of I2C peripheral
 * 	@param[in]				-	Address of Receiver Buffer
 * 	@param[in]				-	Length of transmitted data (bytes)
 * 	@param[in]				-	Slave Address
 * 	@param[in]				- 	Repeated Start enabled/disabled
 *
 * 	@return					-	state of I2C peripheral
 *
 * 	@Note					-	non-blocking API
 *************************************************************************************************************/

uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t StartRepeated)
{
	uint8_t busystate = pI2CHandle->TxRxState;

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
	{
		pI2CHandle->pRxBuffer = pRxBuffer;
		pI2CHandle->RxLen = Len;
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
		pI2CHandle->RxSize = Len; //Rxsize is used in the ISR code to manage the data reception
		pI2CHandle->DevAddr = SlaveAddr;
		pI2CHandle->StartRepeated = StartRepeated;

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);

		//Implement the code to enable ITEVTEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);

		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);

	}

	return busystate;
}


/*
 * IRQ Configuration and ISR Handling
 */

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	I2C_IRQInterruptConfig
 *
 * 	@brief					-	This function enables/disables interrupts for I2C
 *
 * 	@param[in]				-	Interrupt Request Number
 * 	@param[in]				-	ENABLE or DISABLE (macro)
 *
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
	if (EnorDi == ENABLE)
		{
			if(IRQNumber <= 31)
			{
				//program ISER0
				*NVIC_ISER0 |= (1 << IRQNumber);
			}
			else if (IRQNumber > 32 && IRQNumber < 64)
			{
				//program ISER1
				*NVIC_ISER1 |= (1 << IRQNumber % 32);
			}
			else if (IRQNumber > 64 && IRQNumber < 96)
			{
				//ISER2
				*NVIC_ISER2 |= (1 << IRQNumber % 64);
			}
		}
		else
		{
			if(IRQNumber <= 31)
			{
				//ICER0
				*NVIC_ICER0 |= (1 << IRQNumber);
			}
			else if (IRQNumber > 32 && IRQNumber < 64)
			{
				//ICER1
				*NVIC_ICER1 |= (1 << IRQNumber % 32);
			}
			else if (IRQNumber > 64 && IRQNumber < 96)
			{
				//ICER2
				*NVIC_ICER2 |= (1 << IRQNumber % 64);
			}
		}
}

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	I2C_IRQPriorityConfig
 *
 * 	@brief					-	This function sets interrupt priority
 *
 * 	@param[in]				-	Interrupt Request Number
 * 	@param[in]				-	Interrupt Priority
 * 	@param[in]				-
 *
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void I2C_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
	//1. first determine IPR register
	uint8_t iprx = IRQNumber / 4;
	uint8_t iprx_section = IRQNumber % 4 ;

	//2. set priority
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount); // +iprx because pointer arithmetic leads to +4 address bytes
}

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	I2C_PeripheralControl
 *
 * 	@brief					-	This function enables or disables I2C peripheral
 *
 * 	@param[in]				-	Base address of I2C peripheral
 * 	@param[in]				-	Enable or Disable
 * 	@param[in]				-
 *
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
	if(EnOrDi == ENABLE)
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);

		// Can enable ACK now that PE = 1, moved from I2C_Init
		I2C_ACK_EN_DI(pI2Cx,ENABLE);
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}

void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
	// Disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);

	// Disable ITEVTEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);

	pI2CHandle->TxRxState = I2C_READY;
	pI2CHandle->pRxBuffer = NULL;
	pI2CHandle->RxLen = 0;
	pI2CHandle->RxSize = 0;
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_EN)
	{
		I2C_ACK_EN_DI(pI2CHandle->pI2Cx, ENABLE);
	}
}

void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
	// Disable ITBUFEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);

	// Disable ITEVTEN Control Bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);

	pI2CHandle->TxRxState = I2C_READY;
	pI2CHandle->pTxBuffer = NULL;
}

static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle)
{
	if(pI2CHandle->TxLen > 0)
	{
		//1. Load the data into DR

		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);

		//2. Decrement TxLen

		pI2CHandle->TxLen--;

		//3. Increment Buffer Address

		pI2CHandle->pTxBuffer++;
	}
}

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle)
{
	// Perform data reception

	if(pI2CHandle->RxSize == 1)
	{
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;

		pI2CHandle->RxLen--;
	}

	if(pI2CHandle->RxSize > 1)
	{
		if(pI2CHandle->RxLen == 2)
		{
			//clear ACk but
			I2C_ACK_EN_DI(pI2CHandle->pI2Cx, DISABLE);
		}

		// Read DR
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
		pI2CHandle->pRxBuffer++;
		pI2CHandle->RxLen--;
	}

	if(pI2CHandle->RxLen == 0)
	{
		// Close I2C data reception and notify application


		//1. Generate STOP condition
		if(pI2CHandle->StartRepeated == I2C_NO_SR)
		{
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
		}

		//2. Close I2C Rx
		I2C_CloseReceiveData(pI2CHandle);

		//3. Notify application
		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_RX_CMPLT);

	}
}

void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
	// Event Interrupt handling for master and slave mode of device

	uint32_t temp1, temp2, temp3;


	//1. Handle interrupt generated by SB (Start Bit) event, Start condition generated
	//	 Note: SB flag only applicable to Master mode, SB always 0 in slave mode

	temp1 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
	temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);

	if(temp1 && temp3)
	{
		// SB flag is set
		// Execute Address phase
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
		{
			I2C_Write_ExecuteAddressPhase(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
		}
		else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
		{
			I2C_Read_ExecuteAddressPhase(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
		}
	}


	//2. Handle interrupt generated by ADDR event
	//	 Note: When master mode, Address is sent
	//		   When slave mode, Address matched with own address

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);

	if(temp1 && temp3)
	{
		// ADDR flag is set
		// Clear flag
		I2C_ClearADDRFlag(pI2CHandle);
	}

	//3. Handle interrupt generated by BTF (Byte Transfer Finished) event

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);

	if(temp1 && temp3)
	{
		// BTF flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
		{
			// Check if TXE is set
			if(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE))
			{
				// BTF, TXE = 1
				if(pI2CHandle->TxLen == 0)
				{
					// Close Transmission

					//1. Generate STOP condition
					if(pI2CHandle->StartRepeated)
					{
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
					}

					//2. Reset all member elements of handle structure
					I2C_CloseSendData(pI2CHandle);

					//3. Notify the application that transmission is complete
					I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_TX_CMPLT);
				}
			}
		}
		else if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
		{
			; // Nothing to do
		}

	}

	//4. Handle for interrupt generated by STOPF event
	//	 Note: Stop detection flag is only applicable to Slave mode
	//		   Never set in Master mode; below code will not be executed by master.

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);

	if(temp1 && temp3)
	{
		// STOPF flag is set
		//1. Clear STOPF: First read SR1 (done above in temp3..). Second write to CR1.

		pI2CHandle->pI2Cx->CR1 |= 0x0000; // won't affect CR1 but counts as a write to clear STOPF

		//2. Notify the application that STOP is detected

		I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_STOP);

	}

	//5. Handle interrupt generated by TXE event

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE);

	if(temp1 && temp2 && temp3)
	{
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)) //check device mode
		{
			// TXE flag is set
			// Perform Data Transmission

			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
			{
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
			}
		}
	}

	//6. Handle interrupt generated by RXNE event

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RXNE);

	if(temp1 && temp2 && temp3)
	{
		if(pI2CHandle->pI2Cx->SR2 & (1 >> I2C_SR2_MSL)) // check device mode
		{
			// Device is master
			// RXNE flag is set
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
			{
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
			}
		}
	}
}



/*************************************************************************************************************
 * @fn      		  - I2C_ER_IRQHandling
 *
 * @brief             - Handle I2C Error Interrupts
 *
 * @param[in]         - I2C configuration structure
 * @param[in]         -
 * @param[in]         -
 *
 * @return            - none
 *
 * @Note              - none
 *************************************************************************************************************/

void I2C_ERR_IRQHandling(I2C_Handle_t *pI2CHandle)
{

	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & (I2C_BERR_FLAG);
	if(temp1  && temp2 )
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~(I2C_BERR_FLAG);

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
	if(temp1  && temp2)
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~(I2C_ARLO_FLAG);

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_ARLO);

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
	if(temp1  && temp2)
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~(I2C_AF_FLAG);

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle, I2C_ERROR_AF);
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
	if(temp1  && temp2)
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag

		//Implement the code to notify the application about the error
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
	if(temp1  && temp2)
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag

		//Implement the code to notify the application about the error
	}

}


