/*
 * stm32f407xx_spi_driver.c
 *
 *  Created on: Jun 30, 2025
 *      Author: mauricewashington
 */

#include "stm32f407xx_spi_driver.h"

/*
 * Peripheral Clock Setup
 */
/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	SPI_PeriClockControl
 *
 * 	@brief					-	This function enables or disables peripheral clock for given SPI port
 *
 * 	@param[in]				-	Base address of SPI peripheral
 * 	@param[in]				-	ENABLE OR DISABLE (macro)
 * 	@param[in]				-
 *
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if(pSPIx == SPI1)
		{
			SPI1_PCLK_EN();
		}
		else if(pSPIx == SPI2)
		{
			SPI2_PCLK_EN();
		}
		else if(pSPIx == SPI3)
		{
			SPI3_PCLK_EN();
		}
		else if(pSPIx == SPI4)
		{
			SPI4_PCLK_EN();
		}
	}

	else
	{
		if(pSPIx == SPI1)
		{
			SPI1_PCLK_DI();
		}
		else if(pSPIx == SPI2)
		{
			SPI2_PCLK_DI();
		}
		else if(pSPIx == SPI3)
		{
			SPI3_PCLK_DI();
		}
		else if(pSPIx == SPI4)
		{
			SPI4_PCLK_DI();
		}
	}
}

/*
 * Init and De-init (reset)
 */

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	SPI_Init
 *
 * 	@brief					-	This function resets the SPI peripheral
 *
 * 	@param[in]				-	Base address of SPI peripheral
 * 	@param[in]				-
 * 	@param[in]				-
 *
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
	//Enable SPI peripheral clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);

	//Configure SPI CR1
	uint32_t temp = 0;

	//1. Configure Device Mode
	temp |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MODE;

	//2. Configure SPI Bus
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) // 2-line Full-Duplex
	{
		// Clear Bidirectional Mode
		temp &= ~(1 << SPI_CR1_BIDIMODE);
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) // 1-line Half-Duplex
	{
		// Set Bidirectional Mode
		temp |= (1 << SPI_CR1_BIDIMODE);
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY) // Receive only
	{
		// Clear Bidirectional Mode
		temp &= ~(1 << SPI_CR1_BIDIMODE);

		// Set RXONLY Bit
		temp |= (1 << SPI_CR1_RXONLY);
	}

	//3. Configure SPI Clock Speed (Baud Rate)
	temp |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;

	//4. Configure Date Frame Format
	temp |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;

	//5. Configure Clock Polarity (Idle state High VS Low)
	temp |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;

	//6. Configure Clock Phase (Data Capture Trailing VS Leading Edge)
	temp |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;

	//7. Configure Slave Select Mode (SW or HW)
	temp |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;

	pSPIHandle->pSPIx->CR1 = temp;

}

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	SPI_DeInit
 *
 * 	@brief					-	This function resets the given SPI peripheral
 *
 * 	@param[in]				-	Base address of SPI peripheral
 * 	@param[in]				-
 * 	@param[in]				-
 *
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void SPI_DeInit(SPI_RegDef_t *pSPIx)
{
	if(pSPIx == SPI1)
	{
		SPI1_REG_RESET();
	}
	else if(pSPIx == SPI2)
	{
		SPI2_REG_RESET();
	}
	else if(pSPIx == SPI3)
	{
		SPI3_REG_RESET();
	}
	else if(pSPIx == SPI4)
	{
		SPI4_REG_RESET();
	}
}

/*
 * Data Send and Receive
 */

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
	if(pSPIx->SR & FlagName)
	{
		return FLAG_SET;
	}
	return FLAG_RESET;
}


/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	SPI_SendData
 *
 * 	@brief					-	This function sends data to another SPI peripheral
 *
 * 	@param[in]				-	Base address of SPI peripheral
 * 	@param[in]				-	Pointer to data to be sent
 * 	@param[in]				-	Number of bytes to be sent
 *
 * 	@return					-	none
 *
 * 	@Note					-	This is a blocking call (polling type)
 *************************************************************************************************************/

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
	while(Len > 0)
	{
		//1. Wait until TXE set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);

		//2. Check DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF))
		{
			//16-bit DFF
			//1. Load data into DR
			pSPIx->DR = *((uint16_t*)pTxBuffer); //need to typecast data to two bytes
			Len--;
			Len--;
			(uint16_t*)pTxBuffer++;
		}
		else
		{
			//8-bit DFF
			pSPIx->DR = *pTxBuffer;
			Len--;
			pTxBuffer++;
		}

	}
}

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	SPI_ReceiveData
 *
 * 	@brief					-	This function receives data from another SPI peripheral
 *
 * 	@param[in]				-	Base address of SPI peripheral
 * 	@param[in]				-	Pointer to data to be received
 * 	@param[in]				-	Number of bytes to receive
 *
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
	while(Len > 0)
		{
			//1. Wait until RXNE set
			while(SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET);

			//2. Check DFF bit in CR1
			if(pSPIx->CR1 & (1 << SPI_CR1_DFF))
			{
				//1. Load Data From DR to RxBuffer Address
				//16-bit DFF
				*((uint16_t*)pRxBuffer) = pSPIx->DR; //need to typecast data to two bytes
				Len--;
				Len--;
				(uint16_t*)pRxBuffer++;
			}
			else
			{
				//8-bit DFF
				*pRxBuffer = pSPIx->DR;
				Len--;
				pRxBuffer++;
			}

		}
}

/*
 * IRQ Configuration and ISR Handling
 */

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	SPI_IRQInterruptConfig
 *
 * 	@brief					-	This function enables/disables interrupts for SPI
 *
 * 	@param[in]				-	Interrupt Request Number
 * 	@param[in]				-	ENABLE or DISABLE (macro)
 *
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
	if (EnorDi == ENABLE)
		{
			if(IRQNumber <= 31)
			{
				//program ISER0
				*NVIC_ISER0 |= (1 << IRQNumber);
			}
			else if (IRQNumber > 32 && IRQNumber < 64)
			{
				//program ISER1
				*NVIC_ISER1 |= (1 << IRQNumber % 32);
			}
			else if (IRQNumber > 64 && IRQNumber < 96)
			{
				//ISER2
				*NVIC_ISER2 |= (1 << IRQNumber % 64);
			}
		}
		else
		{
			if(IRQNumber <= 31)
			{
				//ICER0
				*NVIC_ICER0 |= (1 << IRQNumber);
			}
			else if (IRQNumber > 32 && IRQNumber < 64)
			{
				//ICER1
				*NVIC_ICER1 |= (1 << IRQNumber % 32);
			}
			else if (IRQNumber > 64 && IRQNumber < 96)
			{
				//ICER2
				*NVIC_ICER2 |= (1 << IRQNumber % 64);
			}
		}
}

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	SPI_IRQPriorityConfig
 *
 * 	@brief					-	This function sets interrupt priority
 *
 * 	@param[in]				-	Interrupt Request Number
 * 	@param[in]				-	Interrupt Priority
 * 	@param[in]				-
 *
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
	//1. first determine IPR register
	uint8_t iprx = IRQNumber / 4;
	uint8_t iprx_section = IRQNumber % 4 ;

	//2. set priority
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount); // +iprx because pointer arithmetic leads to +4 address bytes
}

void SPI_IRQHandling(SPI_Handle_t *pSPIHandle)
{

}

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	SPI_PeripheralControl
 *
 * 	@brief					-	This function enables or disables SPI peripheral
 *
 * 	@param[in]				-	Base address of SPI peripheral
 * 	@param[in]				-	Enable or Disable
 * 	@param[in]				-
 *
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
	if(EnOrDi == ENABLE)
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	SPI_SSI_Config
 *
 * 	@brief					-	This function enables or disables SPI Internal Slave Select
 *
 * 	@param[in]				-	Base address of SPI peripheral
 * 	@param[in]				-	Enable or Disable
 * 	@param[in]				-
 *
 * 	@return					-	none
 *
 * 	@Note					-	Set NSS High to prevent Status Register MODF (Mode fault) = 1 which sets SPI to Slave Mode due to fault
 *************************************************************************************************************/

void SPI_SSI_Config(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
	if(EnOrDi == ENABLE)
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	SPI_SSOE_Config
 *
 * 	@brief					-	This function enables or disables SPI Slave Select Output
 *
 * 	@param[in]				-	Base address of SPI peripheral
 * 	@param[in]				-	Enable or Disable
 * 	@param[in]				-
 *
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void SPI_SSOE_Config(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
	if(EnOrDi == ENABLE)
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
	}
	else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	SPI_SendDataIT
 *
 * 	@brief					-	This function sends data to another SPI peripheral using ISR
 *
 * 	@param[in]				-	Base address of SPI peripheral
 * 	@param[in]				-	Pointer to data to be sent
 * 	@param[in]				-	Number of bytes to be sent
 *
 * 	@return					-	none
 *
 * 	@Note					-	This is a non-blocking call (interrupt type)
 *************************************************************************************************************/

void SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Len)
{
	uint8_t state = pSPIHandle->TxState;

	if(state != SPI_BUSY_IN_TX)
	{
		//1. Save Tx Buffer Address and Length Information in Global Variables
		pSPIHandle->pTxBuffer = pTxBuffer;
		pSPIHandle->TxLen = Len;

		//2. Mark SPI state as busy in transmission so that no other code can take over same peripheral until transmission ends
		pSPIHandle->TxState = SPI_BUSY_IN_TX;

		//3. Enable TXEIE control but to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_TXEIE);
	}
	//4. Data Transmission handled by ISR code
	//TODO


	return state;


}

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	SPI_ReceiveDataIT
 *
 * 	@brief					-	This function receives data from another SPI peripheral using ISR
 *
 * 	@param[in]				-	Base address of SPI peripheral
 * 	@param[in]				-	Pointer to data to be received
 * 	@param[in]				-	Number of bytes to receive
 *
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len)
{

}
