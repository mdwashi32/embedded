/*
 * 017rtc_lcd.c
 *
 *  Created on: Aug 10, 2025
 *      Author: mauricewashington
 */

#include <stdio.h>
#include "ds1307.h"
#include "lcd.h"

#define  SYSTICK_TIM_CLK 16000000UL

void init_systick_timer(uint32_t tick_hz) //systick timer interrupt every second
{
	uint32_t *pSRVR = (uint32_t*)0xE000E014; //systick timer registers
	uint32_t *pSCSR = (uint32_t*)0xE000E010;

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);

    //load the value in to SVR
    *pSRVR |= count_value;

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter

}

char* get_day_of_week(uint8_t day)
{
	char* days[] = {"Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"};

	return days[day - 1];
}

void number_to_string(uint8_t num, char* buffer)
{
	if(num < 10)
	{
		buffer[0] = '0';
		buffer[1] = num + 48; // ascii value of a number is number + 48
	}
	else if (num >= 10 && num < 99)
	{
		buffer[0] = (num / 10) + 48;
		buffer[1] = (num % 10 ) + 48;
	}
}

// format: hh:mm:ss
char* time_to_string(RTC_Time_t *rtc_time)
{
	static char buffer[9];

	buffer[2] = ':';
	buffer[5] = ':';

	number_to_string(rtc_time->hours,buffer);
	number_to_string(rtc_time->minutes,&buffer[3]);
	number_to_string(rtc_time->seconds,&buffer[6]);

	buffer[8] = '\0';

	return buffer;
}

// format: dd/mm/yy
char* date_to_string(RTC_Date_t *rtc_date)
{
	static char buffer[9];

	buffer[2] = '/';
	buffer[5] = '/';

	number_to_string(rtc_date->month,buffer);
	number_to_string(rtc_date->date,&buffer[3]);
	number_to_string(rtc_date->year,&buffer[6]);

	buffer[8] = '\0';

	return buffer;
}



int main(void)
{
	RTC_Time_t current_time;
	RTC_Date_t current_date;

	//printf("RTC test\n");

	lcd_init();

	lcd_print_string("RTC Test...");
	mdelay(2000);

	lcd_display_clear();
	lcd_display_return_home();

	if(ds1307_init())
	{
		printf("Init has failed\n");
		while(1);
	}

	init_systick_timer(1);

	current_date.day = MONDAY;
	current_date.date = 13;
	current_date.month = 8;
	current_date.year = 25;

	current_time.hours = 10;
	current_time.minutes = 59;
	current_time.seconds = 40;
	current_time.time_format = TIME_FORMAT_12HRS_AM;

	ds1307_set_current_date(&current_date);
	ds1307_set_current_time(&current_time);

	ds1307_get_current_date(&current_date);
	ds1307_get_current_time(&current_time);

	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS)
	{
		am_pm = (current_time.time_format) ? "PM" : "AM";
		//printf("Current time: <%s %s>\n",time_to_string(&current_time),am_pm); // e.g. 4:25:41 PM
		lcd_print_string(time_to_string(&current_time));
		lcd_print_string(am_pm);
	}
	else
	{
		//printf("Current time: <%s>\n",time_to_string(&current_time));
		lcd_print_string(time_to_string(&current_time));
	}

	//printf("Current date: <%s, %s>\n",get_day_of_week(current_date.day),date_to_string(&current_date));
	lcd_set_cursor(2, 1);
	lcd_print_string(date_to_string(&current_date));
	lcd_send_char(' ');
	lcd_print_string(get_day_of_week(current_date.day));

	while(1);
	return 0;
}

void SysTick_Handler(void)
{
	RTC_Time_t current_time;
	RTC_Date_t current_date;
	ds1307_get_current_time(&current_time);

	lcd_set_cursor(1, 1);
	char *am_pm;
	if(current_time.time_format != TIME_FORMAT_24HRS)
	{
		am_pm = (current_time.time_format) ? "PM" : "AM";
		//printf("Current time: <%s %s>\n",time_to_string(&current_time),am_pm); // e.g. 4:25:41 PM
		lcd_print_string(time_to_string(&current_time));
		lcd_print_string(am_pm);
	}
	else
	{
		//printf("Current time: <%s>\n",time_to_string(&current_time));
		lcd_print_string(time_to_string(&current_time));
	}

	ds1307_get_current_date(&current_date);
	//printf("Current date: <%s, %s>\n",get_day_of_week(current_date.day),date_to_string(&current_date));
	lcd_set_cursor(2, 1);
	lcd_print_string(date_to_string(&current_date));
	lcd_send_char(' ');
	lcd_print_string(get_day_of_week(current_date.day));
}

