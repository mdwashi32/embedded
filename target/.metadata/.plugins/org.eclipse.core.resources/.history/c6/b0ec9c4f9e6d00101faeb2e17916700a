/*
 * 011i2c_master_rx_testing.c
 *
 *  Created on: Jul 30, 2025
 *      Author: mauricewashington
 */

#include "stm32f407xx.h"
#include "stm32f407xx_gpio_driver.h"
#include "stm32f407xx_i2c_driver.h"
#include <string.h>
#include <stdio.h>

/*
 * PB6 -> SCL
 * PB9 -> SDA
 */

#define MY_ADDR 		0x61
#define SLAVE_ADDR		0x68

uint8_t one_byte_cmd[] = {0x51}; // Write command to slave to prepare one byte to be read by master
uint8_t all_byte_cmd[] = {0x52}; // Write command to slave to prepare all bytes to be read by master
volatile char ReadByte;

I2C_Handle_t I2C1Handle;

void delay(void)
{
	for(uint32_t i = 0; i < 500000/2; i++);
}

void I2C1_GPIOInits()
{
	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;

	// SCL PB6
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
	GPIO_Init(&I2CPins);

	// SDA PB9
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
	GPIO_Init(&I2CPins);
}

void I2C1_Inits(void)
{
	I2C1Handle.pI2Cx = I2C1;
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_EN;
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;

	I2C_Init(&I2C1Handle);
}

void GPIO_ButtonInit(void)
{
	GPIO_Handle_t GpioBtn;
	//button
	GpioBtn.pGPIOx = GPIOA;
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;

	GPIO_Init(&GpioBtn);

}


int main(void)
{
	// Initialize GPIO button
	GPIO_ButtonInit();

	// Initialize GPIO pins as I2C1 peripheral pins
	I2C1_GPIOInits();

	// Initialize I2C1 peripheral configuration
	I2C1_Inits();

	// Enable I2C1 peripheral
	I2C_PeripheralControl(I2C1, ENABLE);

	// Wait for button press
	while(1)
	{	// Wait for button press
		while(! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );

		// ~200 ms delay to avoid button de-bouncing
		delay();

		// Write opcode to receive one byte from Slave to Slave
 		I2C_MasterSendData(&I2C1Handle, one_byte_cmd, 1, SLAVE_ADDR);

 		// Read 1 byte of data from Slave
 		I2C_MasterReceiveData(&I2C1Handle, &ReadByte, 1, SLAVE_ADDR);

 		// Write opcode to receive all bytes from Slave to Slave
		I2C_MasterSendData(&I2C1Handle, all_byte_cmd, 1, SLAVE_ADDR);

		// Read all bytes of data from Slave
		I2C_MasterReceiveData(&I2C1Handle, &ReadByte, 4, SLAVE_ADDR);
	}

	while(1);

}

