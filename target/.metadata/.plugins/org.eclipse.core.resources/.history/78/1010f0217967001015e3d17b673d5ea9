/*
 * stm32f407xx_i2c_driver.c
 *
 *  Created on: Jul 22, 2025
 *      Author: mauricewashington
 */

#include "stm32f407xx_i2c_driver.h"

uint16_t AHB1_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint16_t APB1_PreScaler[8] = {2,4,8,16};

/*
 * Peripheral Clock Setup
 */
/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	I2C_PeriClockControl
 *
 * 	@brief					-	This function enables or disables peripheral clock for given I2C peripheral
 *
 * 	@param[in]				-	Base address of I2C peripheral
 * 	@param[in]				-	ENABLE OR DISABLE (macro)
 * 	@param[in]				-
 *
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if(pI2Cx == I2C1)
		{
			I2C1_PCLK_EN();
		}
		else if(pI2Cx == I2C2)
		{
			I2C2_PCLK_EN();
		}
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_EN();
		}
	}

	else
	{
		if(pI2Cx == I2C1)
		{
			I2C1_PCLK_DI();
		}
		else if(pI2Cx == I2C2)
		{
			I2C2_PCLK_DI();
		}
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}

/*
 * Init and De-init (reset)
 */
uint32_t RCC_GetPLLOutputClock(void) /**** Not implemented ***/
{

	return 0;
}

uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};

uint32_t RCC_GetPCLKValue(void)
{
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahb1p,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3); // only want bit positions 0 and 1

	if (clksrc == 0)
	{
		SystemClk = 16000000;
	}
	else if (clksrc == 1)
	{
		SystemClk = 8000000;
	}
	else if (clksrc == 2)
	{
		SystemClk = RCC_GetPLLOutputClock(); // not implemented
	}

	//ahb1 prescaler
	temp = ((RCC->CFGR >> 4) & 0xF);

	if (temp < 8)
	{
		ahb1p = 1;
	}
	else
	{
		ahb1p = AHB1_PreScaler[temp - 8]; // if ahb1 prescaler greater than 8, fetch first value of array
	}

	//apb1 prescaler
	temp = ((RCC->CFGR >> 10) & 0x7);

	if (temp < 4)
	{
		apb1p = 1;
	}
	else
	{
		apb1p = APB1_PreScaler[temp - 4]; // if apb1 prescaler greater than 4, fetch first value of array
	}

	pclk1 = (SystemClk / ahb1p) / apb1p;

	return pclk1;
}

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	I2C_Init
 *
 * 	@brief					-	This function resets the I2C peripheral
 *
 * 	@param[in]				-	Base address of I2C peripheral
 * 	@param[in]				-
 * 	@param[in]				-
 *
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
	// ACK control bit
	uint32_t tempreg = 0;
	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
	pI2CHandle->pI2Cx->CR1 = tempreg;

	// FREQ Configuration
	tempreg = 0;
	tempreg |= RCC_GetPCLKValue() / 1000000U;
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F); // mask all except first 5 bits

	// Device Own Address
	tempreg = 0;
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
	tempreg |= (1 << 14)
;	pI2CHandle->pI2Cx->OAR1 = tempreg;
}

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	I2C_DeInit
 *
 * 	@brief					-	This function resets the given I2C peripheral
 *
 * 	@param[in]				-	Base address of I2C peripheral
 * 	@param[in]				-
 * 	@param[in]				-
 *
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void I2C_DeInit(I2C_RegDef_t *pI2Cx)
{
	if(pI2Cx == I2C1)
	{
		I2C1_REG_RESET();
	}
	else if(pI2Cx == I2C2)
	{
		I2C2_REG_RESET();
	}
	else if(pI2Cx == I2C3)
	{
		I2C3_REG_RESET();
	}
}

/*
 * IRQ Configuration and ISR Handling
 */

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	I2C_IRQInterruptConfig
 *
 * 	@brief					-	This function enables/disables interrupts for I2C
 *
 * 	@param[in]				-	Interrupt Request Number
 * 	@param[in]				-	ENABLE or DISABLE (macro)
 *
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
	if (EnorDi == ENABLE)
		{
			if(IRQNumber <= 31)
			{
				//program ISER0
				*NVIC_ISER0 |= (1 << IRQNumber);
			}
			else if (IRQNumber > 32 && IRQNumber < 64)
			{
				//program ISER1
				*NVIC_ISER1 |= (1 << IRQNumber % 32);
			}
			else if (IRQNumber > 64 && IRQNumber < 96)
			{
				//ISER2
				*NVIC_ISER2 |= (1 << IRQNumber % 64);
			}
		}
		else
		{
			if(IRQNumber <= 31)
			{
				//ICER0
				*NVIC_ICER0 |= (1 << IRQNumber);
			}
			else if (IRQNumber > 32 && IRQNumber < 64)
			{
				//ICER1
				*NVIC_ICER1 |= (1 << IRQNumber % 32);
			}
			else if (IRQNumber > 64 && IRQNumber < 96)
			{
				//ICER2
				*NVIC_ICER2 |= (1 << IRQNumber % 64);
			}
		}
}

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	I2C_IRQPriorityConfig
 *
 * 	@brief					-	This function sets interrupt priority
 *
 * 	@param[in]				-	Interrupt Request Number
 * 	@param[in]				-	Interrupt Priority
 * 	@param[in]				-
 *
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void I2C_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
	//1. first determine IPR register
	uint8_t iprx = IRQNumber / 4;
	uint8_t iprx_section = IRQNumber % 4 ;

	//2. set priority
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount); // +iprx because pointer arithmetic leads to +4 address bytes
}

/*************************************************************************************************************
 * FUNCTION DETAILS
 * 	@function				-	I2C_PeripheralControl
 *
 * 	@brief					-	This function enables or disables I2C peripheral
 *
 * 	@param[in]				-	Base address of I2C peripheral
 * 	@param[in]				-	Enable or Disable
 * 	@param[in]				-
 *
 * 	@return					-	none
 *
 * 	@Note					-	none
 *************************************************************************************************************/

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
	if(EnOrDi == ENABLE)
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}



