/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

/*
 * 	PINS:
 * 		PD0 - PD3: 0x4002 0C00 ROWS/Output
 * 		PD8 - PD11: 0x4002 0C00 COLS/Input
 * 	CLK ENABLE
 * 		RCC -> AHB1ENR: 0x4002 3800 + 0x30
 * 	MODE
 * 		PD0 - PD3: GPIOxMODER: + 0x00
 * 		PD8 - PD11: ^
 * 	PULL-UP
 * 		PD8 - PD11: GPIOxPUPDR: + 0x0C
 * 	INPUT
 * 		PD8 - PD11: GPIOx_IDR: + 0x10
 * 	OUTPUT
 * 		PD0 - PD3: GPIOx_ODR: + 0x14
 *
 *
 *
 *
 */

int main(void)
{
	uint32_t volatile *const pAhb1_ENR = (uint32_t*)0x40023830;
	uint32_t volatile *const pGpiod_MODE = (uint32_t*)0x40020C00;
	uint32_t volatile *const pGpiod_PUPDR = (uint32_t*)0x40020C0C;
	uint32_t const volatile *const pGpiod_IDR = (uint32_t*)0x40020C10;
	uint32_t volatile *const pGpiod_ODR = (uint32_t*)0x40020C14;

	// ENABLE PD CLK
	*pAhb1_ENR |= (1 << 3);

	// SET MODE
	*gPiod_MODE &= ~(0xFF << 0); // 0000 0000 shifted 0 times to clear pin d 0-3
	*gPiod_MODE |= (0x55 << 0); //0101 0101 shifted 0 times to set 01/output on pin d 0-3
	*gPiod_MODE &= ~(0xFF << 16); // 0000 0000 shifted 16 times to clear pin d 8-11

	// SET PULL-UP ON INPUT/COLUMNS
	*pGpiod_PUPDR &= ~(0xFF << 16); // 0000 0000 shifted 16 times to clear pin d 8-11
	*pGpiod_PUPDR |= (0x55 << 16); // 0101 0101 shifted 16 times to set 01/pull-up on pin d 8-11;

	// POLLING


	while (1){
		uint8_t pin0status = *pGpiod_IDR & 0x1;
		uint8_t pin1status = *pGpiod_IDR & 0x2;
		uint8_t pin2status = *pGpiod_IDR & 0x4;
		uint8_t pin3status = *pGpiod_IDR & 0x8;
		*pGpiod_ODR |= (0xF << 0); // Set pd 0-3 high to initialize
		*pGpiod_ODR &= ~(1 << 0); // Clear bit 0 to set low
		if (pin0status == 1){
			printf("1");
			for (int i = 0; i < 200000;i++);
		}
		else if(pin1status == 1){
			printf("2");
			for (int i = 0; i < 200000;i++);
		}
		else if(pin2status == 1){
			printf("3");
			for (int i = 0; i < 200000;i++);
		}
		else if(pin3status == 1){
			printf("A");
			for (int i = 0; i < 200000;i++);
		}

		*pGpiod_ODR |= (0xF << 0);
		*pGpiod_ODR &= ~(1 << 1); // Clear bit 1 to set low
		if (pin0status == 1){
			printf("4");
			for (int i = 0; i < 200000;i++);
		}
		else if(pin1status == 1){
			printf("5");
			for (int i = 0; i < 200000;i++);
		}
		else if(pin2status == 1){
			printf("6");
			for (int i = 0; i < 200000;i++);
		}
		else if(pin3status == 1){
			printf("B");
			for (int i = 0; i < 200000;i++);
		}

		*pGpiod_ODR |= (0xF << 0);
		*pGpiod_ODR &= ~(1 << 2); // Clear bit 2 to set low
		if (pin0status == 1){
			printf("7");
			for (int i = 0; i < 200000;i++);
		}
		else if(pin1status == 1){
			printf("8");
			for (int i = 0; i < 200000;i++);
		}
		else if(pin2status == 1){
			printf("9");
			for (int i = 0; i < 200000;i++);
		}
		else if(pin3status == 1){
			printf("C");
			for (int i = 0; i < 200000;i++);
		}

		*pGpiod_ODR |= (0xF << 0);
		*pGpiod_ODR &= ~(1 << 3); // Clear bit 3 to set low
		if (pin0status == 1){
			printf("*");
			for (int i = 0; i < 200000;i++);
		}
		else if(pin1status == 1){
			printf("0");
			for (int i = 0; i < 200000;i++);
		}
		else if(pin2status == 1){
			printf("#");
			for (int i = 0; i < 200000;i++);
		}
		else if(pin3status == 1){
			printf("D");
			for (int i = 0; i < 200000;i++);
		}
	}

    /* Loop forever */
	for(;;);
}
